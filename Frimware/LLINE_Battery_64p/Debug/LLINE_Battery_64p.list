
LLINE_Battery_64p.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d21c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  0800d330  0800d330  0001d330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd00  0800dd00  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800dd00  0800dd00  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dd00  0800dd00  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd00  0800dd00  0001dd00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd04  0800dd04  0001dd04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800dd08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001520  20000098  0800dd9c  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200015b8  0800dd9c  000215b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b910  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006074  00000000  00000000  0004ba10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b98  00000000  00000000  00051a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000155c  00000000  00000000  00053620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fcbd  00000000  00000000  00054b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000282a6  00000000  00000000  00074839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d2b2  00000000  00000000  0009cadf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ccc  00000000  00000000  00139d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  00141a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000098 	.word	0x20000098
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d314 	.word	0x0800d314

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000009c 	.word	0x2000009c
 800014c:	0800d314 	.word	0x0800d314

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_f2iz>:
 8000fa8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fb0:	d30f      	bcc.n	8000fd2 <__aeabi_f2iz+0x2a>
 8000fb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fba:	d90d      	bls.n	8000fd8 <__aeabi_f2iz+0x30>
 8000fbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fcc:	bf18      	it	ne
 8000fce:	4240      	negne	r0, r0
 8000fd0:	4770      	bx	lr
 8000fd2:	f04f 0000 	mov.w	r0, #0
 8000fd6:	4770      	bx	lr
 8000fd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fdc:	d101      	bne.n	8000fe2 <__aeabi_f2iz+0x3a>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	d105      	bne.n	8000fee <__aeabi_f2iz+0x46>
 8000fe2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fe6:	bf08      	it	eq
 8000fe8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr

08000ff4 <Set_Can_filter>:

#include "main.h"

void Set_Can_filter(uint8_t uOption_id)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	uint32_t uFilter_id = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
	uint32_t uFilter_mask=0;
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]

#ifdef TARGET_DEVICE
	uFilter_id = MY_DEVICE_ID+uOption_id;
	uFilter_mask = MY_DEVICE_ID_MASK;		//#define	CAR_PC_MASK 	0x07F0;	//0x07F0~0x07FF 까지 필터링됨?
#else	//컨트롤러에서 받을때는....
	uFilter_id = TARGET_DEVICE_ID;
 8001006:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
 800100a:	60fb      	str	r3, [r7, #12]
	uFilter_mask = TARGET_DEVICE_ID_MASK;
 800100c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001010:	60bb      	str	r3, [r7, #8]
#endif

	/* CAN Filter */
	sFilterConfig.FilterBank = 0;
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <Set_Can_filter+0x78>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <Set_Can_filter+0x78>)
 800101a:	2200      	movs	r2, #0
 800101c:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <Set_Can_filter+0x78>)
 8001020:	2201      	movs	r2, #1
 8001022:	61da      	str	r2, [r3, #28]
	//sFilterConfig.FilterIdHigh = 0x0000;
	sFilterConfig.FilterIdHigh = uFilter_id<<5;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	4a10      	ldr	r2, [pc, #64]	; (800106c <Set_Can_filter+0x78>)
 800102a:	6013      	str	r3, [r2, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <Set_Can_filter+0x78>)
 800102e:	2200      	movs	r2, #0
 8001030:	605a      	str	r2, [r3, #4]
	//sFilterConfig.FilterMaskIdHigh = 0x0000;              	// 0x00000000 	= 모든 ID 받기
	sFilterConfig.FilterMaskIdHigh = uFilter_mask<<5;      // 0xFFFFFFFF	= 모든 설정 ID만 받겠다.
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	015b      	lsls	r3, r3, #5
 8001036:	4a0d      	ldr	r2, [pc, #52]	; (800106c <Set_Can_filter+0x78>)
 8001038:	6093      	str	r3, [r2, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <Set_Can_filter+0x78>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001040:	4b0a      	ldr	r3, [pc, #40]	; (800106c <Set_Can_filter+0x78>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <Set_Can_filter+0x78>)
 8001048:	2201      	movs	r2, #1
 800104a:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800104c:	4b07      	ldr	r3, [pc, #28]	; (800106c <Set_Can_filter+0x78>)
 800104e:	220e      	movs	r2, #14
 8001050:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 8001052:	4906      	ldr	r1, [pc, #24]	; (800106c <Set_Can_filter+0x78>)
 8001054:	4806      	ldr	r0, [pc, #24]	; (8001070 <Set_Can_filter+0x7c>)
 8001056:	f006 f993 	bl	8007380 <HAL_CAN_ConfigFilter>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <Set_Can_filter+0x70>
	{
	  /* Filter configuration Error */
	  Error_Handler();
 8001060:	f003 ff81 	bl	8004f66 <Error_Handler>
	}
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000338 	.word	0x20000338
 8001070:	2000132c 	.word	0x2000132c

08001074 <Can_setup_default>:

void Can_setup_default(uint8_t uOption_id)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]

/* Configure Transmission process */			//Tx
#ifdef TARGET_DEVICE
	g_Can_TxHeader.StdId = TARGET_DEVICE_ID;         	// Standard Identifier, 0 ~ 0x7FF
#else	//컨트롤러에서 받을때는....
	g_Can_TxHeader.StdId = MY_DEVICE_ID + uOption_id;    // Standard Identifier, 0 ~ 0x7A0 + Option_id
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	f503 63f4 	add.w	r3, r3, #1952	; 0x7a0
 8001084:	461a      	mov	r2, r3
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <Can_setup_default+0x68>)
 8001088:	601a      	str	r2, [r3, #0]
#endif
	g_Can_TxHeader.ExtId = 0x01;                 	 	// Extended Identifier, 0 ~ 0x1FFFFFFF
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <Can_setup_default+0x68>)
 800108c:	2201      	movs	r2, #1
 800108e:	605a      	str	r2, [r3, #4]
	g_Can_TxHeader.RTR = CAN_RTR_DATA;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <Can_setup_default+0x68>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
	g_Can_TxHeader.IDE = CAN_ID_STD;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <Can_setup_default+0x68>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
	g_Can_TxHeader.DLC = 8;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <Can_setup_default+0x68>)
 800109e:	2208      	movs	r2, #8
 80010a0:	611a      	str	r2, [r3, #16]
	g_Can_TxHeader.TransmitGlobalTime = DISABLE;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <Can_setup_default+0x68>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	751a      	strb	r2, [r3, #20]

	Set_Can_filter(uOption_id);
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ffa2 	bl	8000ff4 <Set_Can_filter>

	/* Can Start */
	if (HAL_CAN_Start(&hcan) != HAL_OK)
 80010b0:	480b      	ldr	r0, [pc, #44]	; (80010e0 <Can_setup_default+0x6c>)
 80010b2:	f006 fa2e 	bl	8007512 <HAL_CAN_Start>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <Can_setup_default+0x4c>
	{
		/* Start Error */
		Error_Handler();
 80010bc:	f003 ff53 	bl	8004f66 <Error_Handler>
	}
#if defined(DEBUG_SERIAL) && defined(DEBUG_SERIAL_CAN)
	//HAL_UART_Transmit(&huart1, "Can Setup!\r\n", 12, 100);
	printf("Can Setup!\r\n");
#endif
	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80010c0:	2102      	movs	r1, #2
 80010c2:	4807      	ldr	r0, [pc, #28]	; (80010e0 <Can_setup_default+0x6c>)
 80010c4:	f006 fb8a 	bl	80077dc <HAL_CAN_ActivateNotification>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <Can_setup_default+0x5e>
	{
		/* Notification Error */
		Error_Handler();
 80010ce:	f003 ff4a 	bl	8004f66 <Error_Handler>
	}
#if defined(DEBUG_SERIAL) && defined(DEBUG_SERIAL_CAN)
	//HAL_UART_Transmit(&huart1, "Can Ready!!\r\n", 13, 100);
	printf("Can Ready!!\r\n");
#endif
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000b14 	.word	0x20000b14
 80010e0:	2000132c 	.word	0x2000132c

080010e4 <Can_Cmd_check>:
#endif
	}
}

void Can_Cmd_check(void)
{
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b087      	sub	sp, #28
 80010e8:	af04      	add	r7, sp, #16
	uint16_t uData[4];

	switch(g_uCan_RxData[0])
 80010ea:	4b30      	ldr	r3, [pc, #192]	; (80011ac <Can_Cmd_check+0xc8>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d80b      	bhi.n	800110c <Can_Cmd_check+0x28>
 80010f4:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <Can_Cmd_check+0x18>)
 80010f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fa:	bf00      	nop
 80010fc:	0800110d 	.word	0x0800110d
 8001100:	0800110d 	.word	0x0800110d
 8001104:	0800110d 	.word	0x0800110d
 8001108:	0800110d 	.word	0x0800110d
	case 0x03:
		break;
	case 0x04:
		break;
	default:
		break;
 800110c:	bf00      	nop
	}
	uData[0] = (g_uCan_RxData[0]<<8) + g_uCan_RxData[1];
 800110e:	4b27      	ldr	r3, [pc, #156]	; (80011ac <Can_Cmd_check+0xc8>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	b29b      	uxth	r3, r3
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b29a      	uxth	r2, r3
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <Can_Cmd_check+0xc8>)
 800111a:	785b      	ldrb	r3, [r3, #1]
 800111c:	b29b      	uxth	r3, r3
 800111e:	4413      	add	r3, r2
 8001120:	b29b      	uxth	r3, r3
 8001122:	803b      	strh	r3, [r7, #0]
	uData[1] = (g_uCan_RxData[2]<<8) + g_uCan_RxData[3];
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <Can_Cmd_check+0xc8>)
 8001126:	789b      	ldrb	r3, [r3, #2]
 8001128:	b29b      	uxth	r3, r3
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b29a      	uxth	r2, r3
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <Can_Cmd_check+0xc8>)
 8001130:	78db      	ldrb	r3, [r3, #3]
 8001132:	b29b      	uxth	r3, r3
 8001134:	4413      	add	r3, r2
 8001136:	b29b      	uxth	r3, r3
 8001138:	807b      	strh	r3, [r7, #2]
	uData[2] = (g_uCan_RxData[4]<<8) + g_uCan_RxData[5];
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <Can_Cmd_check+0xc8>)
 800113c:	791b      	ldrb	r3, [r3, #4]
 800113e:	b29b      	uxth	r3, r3
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <Can_Cmd_check+0xc8>)
 8001146:	795b      	ldrb	r3, [r3, #5]
 8001148:	b29b      	uxth	r3, r3
 800114a:	4413      	add	r3, r2
 800114c:	b29b      	uxth	r3, r3
 800114e:	80bb      	strh	r3, [r7, #4]
	uData[3] = (g_uCan_RxData[6]<<8) + g_uCan_RxData[7];
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <Can_Cmd_check+0xc8>)
 8001152:	799b      	ldrb	r3, [r3, #6]
 8001154:	b29b      	uxth	r3, r3
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b29a      	uxth	r2, r3
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <Can_Cmd_check+0xc8>)
 800115c:	79db      	ldrb	r3, [r3, #7]
 800115e:	b29b      	uxth	r3, r3
 8001160:	4413      	add	r3, r2
 8001162:	b29b      	uxth	r3, r3
 8001164:	80fb      	strh	r3, [r7, #6]

#ifdef TARGET_DEVICE
	//printf("PC Recv:");
	HAL_UART_Transmit(&huart1, "PC Recv:\r\n", 10, 100);
#else
	printf("Bms Recv:");
 8001166:	4812      	ldr	r0, [pc, #72]	; (80011b0 <Can_Cmd_check+0xcc>)
 8001168:	f00a ffea 	bl	800c140 <iprintf>
	//HAL_UART_Transmit(&huart1, "Bms Recv:\r\n", 11, 100);
#endif

	//printf("%04lx : %d     %d     %d     %d \r\n", RxHeader.StdId,data[0],data[1],data[2],data[3]);
	sprintf((char *)g_uSerial_tx_buffer, "%04lx : %d     %d     %d     %d \r\n", g_Can_RxHeader.StdId,uData[0],uData[1],uData[2],uData[3]);
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <Can_Cmd_check+0xd0>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	883b      	ldrh	r3, [r7, #0]
 8001172:	461c      	mov	r4, r3
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	88b9      	ldrh	r1, [r7, #4]
 8001178:	88f8      	ldrh	r0, [r7, #6]
 800117a:	9002      	str	r0, [sp, #8]
 800117c:	9101      	str	r1, [sp, #4]
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	4623      	mov	r3, r4
 8001182:	490d      	ldr	r1, [pc, #52]	; (80011b8 <Can_Cmd_check+0xd4>)
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <Can_Cmd_check+0xd8>)
 8001186:	f00b f851 	bl	800c22c <siprintf>
	HAL_UART_Transmit(&huart1, g_uSerial_tx_buffer, strlen((char *)g_uSerial_tx_buffer), 100);
 800118a:	480c      	ldr	r0, [pc, #48]	; (80011bc <Can_Cmd_check+0xd8>)
 800118c:	f7fe ffe0 	bl	8000150 <strlen>
 8001190:	4603      	mov	r3, r0
 8001192:	b29a      	uxth	r2, r3
 8001194:	2364      	movs	r3, #100	; 0x64
 8001196:	4909      	ldr	r1, [pc, #36]	; (80011bc <Can_Cmd_check+0xd8>)
 8001198:	4809      	ldr	r0, [pc, #36]	; (80011c0 <Can_Cmd_check+0xdc>)
 800119a:	f00a f8f9 	bl	800b390 <HAL_UART_Transmit>
	g_uCan_Rxflag = 0;
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <Can_Cmd_check+0xe0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd90      	pop	{r4, r7, pc}
 80011ac:	20001190 	.word	0x20001190
 80011b0:	0800d344 	.word	0x0800d344
 80011b4:	20000d54 	.word	0x20000d54
 80011b8:	0800d350 	.word	0x0800d350
 80011bc:	20000c44 	.word	0x20000c44
 80011c0:	20001500 	.word	0x20001500
 80011c4:	20000391 	.word	0x20000391

080011c8 <EKF_Algorithm_Main>:

};
uint16_t SOC_Init = 0;

void EKF_Algorithm_Main(void)
{
 80011c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011cc:	b09d      	sub	sp, #116	; 0x74
 80011ce:	af00      	add	r7, sp, #0
	double d_Buff_Matrix_A[2][2], d_Buff_Matrix_B[2][2];
	double d_Buff_a;
	double d_EKF_Current_M, d_EKF_Voltage_M;

	// Buffer Clear //
	for(i=0;i<2;i++)
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80011d6:	e037      	b.n	8001248 <EKF_Algorithm_Main+0x80>
	{
		for(j=0;j<2;j++)
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80011de:	e02a      	b.n	8001236 <EKF_Algorithm_Main+0x6e>
		{
			d_Buff_Matrix_A[i][j] = 0;
 80011e0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80011e4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80011e8:	0052      	lsls	r2, r2, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	3360      	adds	r3, #96	; 0x60
 80011f0:	f107 0210 	add.w	r2, r7, #16
 80011f4:	4413      	add	r3, r2
 80011f6:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	f04f 0300 	mov.w	r3, #0
 8001202:	e9c1 2300 	strd	r2, r3, [r1]
			d_Buff_Matrix_B[i][j] = 0;
 8001206:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800120a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800120e:	0052      	lsls	r2, r2, #1
 8001210:	4413      	add	r3, r2
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	3360      	adds	r3, #96	; 0x60
 8001216:	f107 0210 	add.w	r2, r7, #16
 800121a:	4413      	add	r3, r2
 800121c:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	e9c1 2300 	strd	r2, r3, [r1]
		for(j=0;j<2;j++)
 800122c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001230:	3301      	adds	r3, #1
 8001232:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001236:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800123a:	2b01      	cmp	r3, #1
 800123c:	d9d0      	bls.n	80011e0 <EKF_Algorithm_Main+0x18>
	for(i=0;i<2;i++)
 800123e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001242:	3301      	adds	r3, #1
 8001244:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001248:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800124c:	2b01      	cmp	r3, #1
 800124e:	d9c3      	bls.n	80011d8 <EKF_Algorithm_Main+0x10>
		}
	}

	d_Buff_a = 0;
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	if(guc_EKF_Init_Flag == 0)
 800125c:	4bc4      	ldr	r3, [pc, #784]	; (8001570 <EKF_Algorithm_Main+0x3a8>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d106      	bne.n	8001272 <EKF_Algorithm_Main+0xaa>
	{
		EKF_Algorithm_Init();
 8001264:	f000 fcb0 	bl	8001bc8 <EKF_Algorithm_Init>
		guc_EKF_Init_Flag = 1;
 8001268:	4bc1      	ldr	r3, [pc, #772]	; (8001570 <EKF_Algorithm_Main+0x3a8>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]

		// Communication Data //
		eui_EKF_SOC_UART = ed_EKF_SOC*10000;

	}
}
 800126e:	f000 bc86 	b.w	8001b7e <EKF_Algorithm_Main+0x9b6>
	else if(guc_EKF_Init_Flag == 1)
 8001272:	4bbf      	ldr	r3, [pc, #764]	; (8001570 <EKF_Algorithm_Main+0x3a8>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	f040 8481 	bne.w	8001b7e <EKF_Algorithm_Main+0x9b6>
		d_EKF_Current_M = (double)0.028;		// put current
 800127c:	a3b2      	add	r3, pc, #712	; (adr r3, 8001548 <EKF_Algorithm_Main+0x380>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
		d_EKF_Voltage_M = (double)(Bms.Voltage_avg/10000.);		// put cell voltage
 8001286:	4bbb      	ldr	r3, [pc, #748]	; (8001574 <EKF_Algorithm_Main+0x3ac>)
 8001288:	8bdb      	ldrh	r3, [r3, #30]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff f8ba 	bl	8000404 <__aeabi_i2d>
 8001290:	a3af      	add	r3, pc, #700	; (adr r3, 8001550 <EKF_Algorithm_Main+0x388>)
 8001292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001296:	f7ff fa49 	bl	800072c <__aeabi_ddiv>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		gd_EKF_State_Matrix_Pre[0] = gd_EKF_State_Matrix[0] - (d_EKF_Current_M/EKF_Cn)*EKF_dT;
 80012a2:	4bb5      	ldr	r3, [pc, #724]	; (8001578 <EKF_Algorithm_Main+0x3b0>)
 80012a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4bb3      	ldr	r3, [pc, #716]	; (800157c <EKF_Algorithm_Main+0x3b4>)
 80012ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80012b2:	f7ff fa3b 	bl	800072c <__aeabi_ddiv>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4610      	mov	r0, r2
 80012bc:	4619      	mov	r1, r3
 80012be:	a3a6      	add	r3, pc, #664	; (adr r3, 8001558 <EKF_Algorithm_Main+0x390>)
 80012c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c4:	f7ff f908 	bl	80004d8 <__aeabi_dmul>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	4620      	mov	r0, r4
 80012ce:	4629      	mov	r1, r5
 80012d0:	f7fe ff4a 	bl	8000168 <__aeabi_dsub>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	49a9      	ldr	r1, [pc, #676]	; (8001580 <EKF_Algorithm_Main+0x3b8>)
 80012da:	e9c1 2300 	strd	r2, r3, [r1]
		gd_EKF_State_Matrix_Pre[1] = gd_EKF_State_Matrix[1]*exp(-EKF_dT/(EKF_R1*EKF_C1))
 80012de:	4ba6      	ldr	r3, [pc, #664]	; (8001578 <EKF_Algorithm_Main+0x3b0>)
 80012e0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80012e4:	a39e      	add	r3, pc, #632	; (adr r3, 8001560 <EKF_Algorithm_Main+0x398>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff f8f5 	bl	80004d8 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4614      	mov	r4, r2
 80012f4:	461d      	mov	r5, r3
				                     + (1 - exp(-EKF_dT/(EKF_R1*EKF_C1)))*EKF_R1*d_EKF_Current_M;
 80012f6:	a39c      	add	r3, pc, #624	; (adr r3, 8001568 <EKF_Algorithm_Main+0x3a0>)
 80012f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001300:	f7ff f8ea 	bl	80004d8 <__aeabi_dmul>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4620      	mov	r0, r4
 800130a:	4629      	mov	r1, r5
 800130c:	f7fe ff2e 	bl	800016c <__adddf3>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
		gd_EKF_State_Matrix_Pre[1] = gd_EKF_State_Matrix[1]*exp(-EKF_dT/(EKF_R1*EKF_C1))
 8001314:	499a      	ldr	r1, [pc, #616]	; (8001580 <EKF_Algorithm_Main+0x3b8>)
 8001316:	e9c1 2302 	strd	r2, r3, [r1, #8]
		for(i=0;i<2;i++)
 800131a:	2300      	movs	r3, #0
 800131c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001320:	e05b      	b.n	80013da <EKF_Algorithm_Main+0x212>
			for(j=0;j<2;j++)
 8001322:	2300      	movs	r3, #0
 8001324:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001328:	e04e      	b.n	80013c8 <EKF_Algorithm_Main+0x200>
				for(k=0;k<2;k++)
 800132a:	2300      	movs	r3, #0
 800132c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001330:	e041      	b.n	80013b6 <EKF_Algorithm_Main+0x1ee>
					d_Buff_Matrix_A[i][j] += gd_EKF_A_Matrix[i][k]*gd_EKF_P_Matrix[k][j];
 8001332:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001336:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800133a:	0052      	lsls	r2, r2, #1
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	3360      	adds	r3, #96	; 0x60
 8001342:	f107 0210 	add.w	r2, r7, #16
 8001346:	4413      	add	r3, r2
 8001348:	3b40      	subs	r3, #64	; 0x40
 800134a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800134e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001352:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001356:	498b      	ldr	r1, [pc, #556]	; (8001584 <EKF_Algorithm_Main+0x3bc>)
 8001358:	0052      	lsls	r2, r2, #1
 800135a:	4413      	add	r3, r2
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	440b      	add	r3, r1
 8001360:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001364:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8001368:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800136c:	4e86      	ldr	r6, [pc, #536]	; (8001588 <EKF_Algorithm_Main+0x3c0>)
 800136e:	0052      	lsls	r2, r2, #1
 8001370:	4413      	add	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4433      	add	r3, r6
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	f7ff f8ad 	bl	80004d8 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	f897 806f 	ldrb.w	r8, [r7, #111]	; 0x6f
 8001386:	f897 606e 	ldrb.w	r6, [r7, #110]	; 0x6e
 800138a:	4620      	mov	r0, r4
 800138c:	4629      	mov	r1, r5
 800138e:	f7fe feed 	bl	800016c <__adddf3>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	ea4f 0148 	mov.w	r1, r8, lsl #1
 800139a:	4431      	add	r1, r6
 800139c:	00c9      	lsls	r1, r1, #3
 800139e:	3160      	adds	r1, #96	; 0x60
 80013a0:	f107 0010 	add.w	r0, r7, #16
 80013a4:	4401      	add	r1, r0
 80013a6:	3940      	subs	r1, #64	; 0x40
 80013a8:	e9c1 2300 	strd	r2, r3, [r1]
				for(k=0;k<2;k++)
 80013ac:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80013b0:	3301      	adds	r3, #1
 80013b2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 80013b6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d9b9      	bls.n	8001332 <EKF_Algorithm_Main+0x16a>
			for(j=0;j<2;j++)
 80013be:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80013c2:	3301      	adds	r3, #1
 80013c4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80013c8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d9ac      	bls.n	800132a <EKF_Algorithm_Main+0x162>
		for(i=0;i<2;i++)
 80013d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013d4:	3301      	adds	r3, #1
 80013d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80013da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d99f      	bls.n	8001322 <EKF_Algorithm_Main+0x15a>
		for(i=0;i<2;i++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80013e8:	e05e      	b.n	80014a8 <EKF_Algorithm_Main+0x2e0>
			for(j=0;j<2;j++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80013f0:	e051      	b.n	8001496 <EKF_Algorithm_Main+0x2ce>
				for(k=0;k<2;k++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 80013f8:	e044      	b.n	8001484 <EKF_Algorithm_Main+0x2bc>
					d_Buff_Matrix_B[i][j] += d_Buff_Matrix_A[i][k]*gd_EKF_A_Matrix[j][k];
 80013fa:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80013fe:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001402:	0052      	lsls	r2, r2, #1
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	3360      	adds	r3, #96	; 0x60
 800140a:	f107 0210 	add.w	r2, r7, #16
 800140e:	4413      	add	r3, r2
 8001410:	3b60      	subs	r3, #96	; 0x60
 8001412:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001416:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800141a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800141e:	0052      	lsls	r2, r2, #1
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	3360      	adds	r3, #96	; 0x60
 8001426:	f107 0210 	add.w	r2, r7, #16
 800142a:	4413      	add	r3, r2
 800142c:	3b40      	subs	r3, #64	; 0x40
 800142e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001432:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8001436:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800143a:	4e52      	ldr	r6, [pc, #328]	; (8001584 <EKF_Algorithm_Main+0x3bc>)
 800143c:	0052      	lsls	r2, r2, #1
 800143e:	4413      	add	r3, r2
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4433      	add	r3, r6
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff f846 	bl	80004d8 <__aeabi_dmul>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	f897 806f 	ldrb.w	r8, [r7, #111]	; 0x6f
 8001454:	f897 606e 	ldrb.w	r6, [r7, #110]	; 0x6e
 8001458:	4620      	mov	r0, r4
 800145a:	4629      	mov	r1, r5
 800145c:	f7fe fe86 	bl	800016c <__adddf3>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8001468:	4431      	add	r1, r6
 800146a:	00c9      	lsls	r1, r1, #3
 800146c:	3160      	adds	r1, #96	; 0x60
 800146e:	f107 0010 	add.w	r0, r7, #16
 8001472:	4401      	add	r1, r0
 8001474:	3960      	subs	r1, #96	; 0x60
 8001476:	e9c1 2300 	strd	r2, r3, [r1]
				for(k=0;k<2;k++)
 800147a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800147e:	3301      	adds	r3, #1
 8001480:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001484:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001488:	2b01      	cmp	r3, #1
 800148a:	d9b6      	bls.n	80013fa <EKF_Algorithm_Main+0x232>
			for(j=0;j<2;j++)
 800148c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001490:	3301      	adds	r3, #1
 8001492:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001496:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800149a:	2b01      	cmp	r3, #1
 800149c:	d9a9      	bls.n	80013f2 <EKF_Algorithm_Main+0x22a>
		for(i=0;i<2;i++)
 800149e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014a2:	3301      	adds	r3, #1
 80014a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80014a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d99c      	bls.n	80013ea <EKF_Algorithm_Main+0x222>
		for(i=0;i<2;i++)
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80014b6:	e039      	b.n	800152c <EKF_Algorithm_Main+0x364>
			for(j=0;j<2;j++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80014be:	e02c      	b.n	800151a <EKF_Algorithm_Main+0x352>
				gd_EKF_P_Matrix_Pre[i][j] = d_Buff_Matrix_B[i][j] + gd_EKF_Q_Matrix[i][j];
 80014c0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80014c4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80014c8:	0052      	lsls	r2, r2, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	3360      	adds	r3, #96	; 0x60
 80014d0:	f107 0210 	add.w	r2, r7, #16
 80014d4:	4413      	add	r3, r2
 80014d6:	3b60      	subs	r3, #96	; 0x60
 80014d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014dc:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80014e0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80014e4:	4c29      	ldr	r4, [pc, #164]	; (800158c <EKF_Algorithm_Main+0x3c4>)
 80014e6:	0052      	lsls	r2, r2, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	4423      	add	r3, r4
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f897 506f 	ldrb.w	r5, [r7, #111]	; 0x6f
 80014f6:	f897 406e 	ldrb.w	r4, [r7, #110]	; 0x6e
 80014fa:	f7fe fe37 	bl	800016c <__adddf3>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4823      	ldr	r0, [pc, #140]	; (8001590 <EKF_Algorithm_Main+0x3c8>)
 8001504:	0069      	lsls	r1, r5, #1
 8001506:	4421      	add	r1, r4
 8001508:	00c9      	lsls	r1, r1, #3
 800150a:	4401      	add	r1, r0
 800150c:	e9c1 2300 	strd	r2, r3, [r1]
			for(j=0;j<2;j++)
 8001510:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001514:	3301      	adds	r3, #1
 8001516:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800151a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800151e:	2b01      	cmp	r3, #1
 8001520:	d9ce      	bls.n	80014c0 <EKF_Algorithm_Main+0x2f8>
		for(i=0;i<2;i++)
 8001522:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001526:	3301      	adds	r3, #1
 8001528:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800152c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001530:	2b01      	cmp	r3, #1
 8001532:	d9c1      	bls.n	80014b8 <EKF_Algorithm_Main+0x2f0>
		for(i=0;i<2;i++)
 8001534:	2300      	movs	r3, #0
 8001536:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800153a:	e05f      	b.n	80015fc <EKF_Algorithm_Main+0x434>
			for(j=0;j<2;j++)
 800153c:	2300      	movs	r3, #0
 800153e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001542:	e052      	b.n	80015ea <EKF_Algorithm_Main+0x422>
 8001544:	f3af 8000 	nop.w
 8001548:	3126e979 	.word	0x3126e979
 800154c:	3f9cac08 	.word	0x3f9cac08
 8001550:	00000000 	.word	0x00000000
 8001554:	40c38800 	.word	0x40c38800
 8001558:	9999999a 	.word	0x9999999a
 800155c:	3fb99999 	.word	0x3fb99999
 8001560:	3147bfa1 	.word	0x3147bfa1
 8001564:	3fefd7a0 	.word	0x3fefd7a0
 8001568:	68618636 	.word	0x68618636
 800156c:	3ed61e5e 	.word	0x3ed61e5e
 8001570:	200000b4 	.word	0x200000b4
 8001574:	20000360 	.word	0x20000360
 8001578:	20001230 	.word	0x20001230
 800157c:	41019400 	.word	0x41019400
 8001580:	200012a8 	.word	0x200012a8
 8001584:	20001250 	.word	0x20001250
 8001588:	200011f0 	.word	0x200011f0
 800158c:	20001210 	.word	0x20001210
 8001590:	20001288 	.word	0x20001288
				d_Buff_Matrix_A[i][j] = 0;
 8001594:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001598:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800159c:	0052      	lsls	r2, r2, #1
 800159e:	4413      	add	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	3360      	adds	r3, #96	; 0x60
 80015a4:	f107 0210 	add.w	r2, r7, #16
 80015a8:	4413      	add	r3, r2
 80015aa:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9c1 2300 	strd	r2, r3, [r1]
				d_Buff_Matrix_B[i][j] = 0;
 80015ba:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80015be:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80015c2:	0052      	lsls	r2, r2, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	3360      	adds	r3, #96	; 0x60
 80015ca:	f107 0210 	add.w	r2, r7, #16
 80015ce:	4413      	add	r3, r2
 80015d0:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	e9c1 2300 	strd	r2, r3, [r1]
			for(j=0;j<2;j++)
 80015e0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80015e4:	3301      	adds	r3, #1
 80015e6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80015ea:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d9d0      	bls.n	8001594 <EKF_Algorithm_Main+0x3cc>
		for(i=0;i<2;i++)
 80015f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015f6:	3301      	adds	r3, #1
 80015f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80015fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001600:	2b01      	cmp	r3, #1
 8001602:	d99b      	bls.n	800153c <EKF_Algorithm_Main+0x374>
		gd_EKF_C_Matrix[0] = EKF_OCV_Dot_DIV_5Poly(gd_EKF_State_Matrix_Pre[0]);
 8001604:	4bae      	ldr	r3, [pc, #696]	; (80018c0 <EKF_Algorithm_Main+0x6f8>)
 8001606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f000 fd63 	bl	80020d8 <EKF_OCV_Dot_DIV_5Poly>
 8001612:	4602      	mov	r2, r0
 8001614:	460b      	mov	r3, r1
 8001616:	49ab      	ldr	r1, [pc, #684]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 8001618:	e9c1 2300 	strd	r2, r3, [r1]
		gd_EKF_C_Matrix[1] = 1;
 800161c:	49a9      	ldr	r1, [pc, #676]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4ba9      	ldr	r3, [pc, #676]	; (80018c8 <EKF_Algorithm_Main+0x700>)
 8001624:	e9c1 2302 	strd	r2, r3, [r1, #8]
		d_Buff_a = gd_EKF_C_Matrix[0]*(gd_EKF_P_Matrix_Pre[0][0]*gd_EKF_C_Matrix[0] + gd_EKF_P_Matrix_Pre[0][1]*gd_EKF_C_Matrix[1])
 8001628:	4ba6      	ldr	r3, [pc, #664]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 800162a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800162e:	4ba7      	ldr	r3, [pc, #668]	; (80018cc <EKF_Algorithm_Main+0x704>)
 8001630:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001634:	4ba3      	ldr	r3, [pc, #652]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7fe ff4d 	bl	80004d8 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4690      	mov	r8, r2
 8001644:	4699      	mov	r9, r3
 8001646:	4ba1      	ldr	r3, [pc, #644]	; (80018cc <EKF_Algorithm_Main+0x704>)
 8001648:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800164c:	4b9d      	ldr	r3, [pc, #628]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 800164e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001652:	f7fe ff41 	bl	80004d8 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4640      	mov	r0, r8
 800165c:	4649      	mov	r1, r9
 800165e:	f7fe fd85 	bl	800016c <__adddf3>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	f7fe ff35 	bl	80004d8 <__aeabi_dmul>
 800166e:	4602      	mov	r2, r0
 8001670:	460b      	mov	r3, r1
 8001672:	e9c7 2300 	strd	r2, r3, [r7]
				   + gd_EKF_C_Matrix[1]*(gd_EKF_P_Matrix_Pre[1][0]*gd_EKF_C_Matrix[0] + gd_EKF_P_Matrix_Pre[1][1]*gd_EKF_C_Matrix[1])
 8001676:	4b93      	ldr	r3, [pc, #588]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 8001678:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800167c:	4b93      	ldr	r3, [pc, #588]	; (80018cc <EKF_Algorithm_Main+0x704>)
 800167e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001682:	4b90      	ldr	r3, [pc, #576]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7fe ff26 	bl	80004d8 <__aeabi_dmul>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4690      	mov	r8, r2
 8001692:	4699      	mov	r9, r3
 8001694:	4b8d      	ldr	r3, [pc, #564]	; (80018cc <EKF_Algorithm_Main+0x704>)
 8001696:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800169a:	4b8a      	ldr	r3, [pc, #552]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 800169c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016a0:	f7fe ff1a 	bl	80004d8 <__aeabi_dmul>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4640      	mov	r0, r8
 80016aa:	4649      	mov	r1, r9
 80016ac:	f7fe fd5e 	bl	800016c <__adddf3>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4620      	mov	r0, r4
 80016b6:	4629      	mov	r1, r5
 80016b8:	f7fe ff0e 	bl	80004d8 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016c4:	f7fe fd52 	bl	800016c <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
				   + gd_EKF_R;
 80016d0:	4b7f      	ldr	r3, [pc, #508]	; (80018d0 <EKF_Algorithm_Main+0x708>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
		d_Buff_a = gd_EKF_C_Matrix[0]*(gd_EKF_P_Matrix_Pre[0][0]*gd_EKF_C_Matrix[0] + gd_EKF_P_Matrix_Pre[0][1]*gd_EKF_C_Matrix[1])
 80016d6:	f7fe fd49 	bl	800016c <__adddf3>
 80016da:	4602      	mov	r2, r0
 80016dc:	460b      	mov	r3, r1
 80016de:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		gd_EKF_K_Matrix[0] = (gd_EKF_P_Matrix_Pre[0][0]*gd_EKF_C_Matrix[0] + gd_EKF_P_Matrix_Pre[0][1]*gd_EKF_C_Matrix[1])/d_Buff_a;
 80016e2:	4b7a      	ldr	r3, [pc, #488]	; (80018cc <EKF_Algorithm_Main+0x704>)
 80016e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e8:	4b76      	ldr	r3, [pc, #472]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7fe fef3 	bl	80004d8 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4614      	mov	r4, r2
 80016f8:	461d      	mov	r5, r3
 80016fa:	4b74      	ldr	r3, [pc, #464]	; (80018cc <EKF_Algorithm_Main+0x704>)
 80016fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 8001702:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001706:	f7fe fee7 	bl	80004d8 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4620      	mov	r0, r4
 8001710:	4629      	mov	r1, r5
 8001712:	f7fe fd2b 	bl	800016c <__adddf3>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4610      	mov	r0, r2
 800171c:	4619      	mov	r1, r3
 800171e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001722:	f7ff f803 	bl	800072c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	496a      	ldr	r1, [pc, #424]	; (80018d4 <EKF_Algorithm_Main+0x70c>)
 800172c:	e9c1 2300 	strd	r2, r3, [r1]
		gd_EKF_K_Matrix[1] = (gd_EKF_P_Matrix_Pre[1][0]*gd_EKF_C_Matrix[0] + gd_EKF_P_Matrix_Pre[1][1]*gd_EKF_C_Matrix[1])/d_Buff_a;
 8001730:	4b66      	ldr	r3, [pc, #408]	; (80018cc <EKF_Algorithm_Main+0x704>)
 8001732:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001736:	4b63      	ldr	r3, [pc, #396]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 8001738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173c:	f7fe fecc 	bl	80004d8 <__aeabi_dmul>
 8001740:	4602      	mov	r2, r0
 8001742:	460b      	mov	r3, r1
 8001744:	4614      	mov	r4, r2
 8001746:	461d      	mov	r5, r3
 8001748:	4b60      	ldr	r3, [pc, #384]	; (80018cc <EKF_Algorithm_Main+0x704>)
 800174a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800174e:	4b5d      	ldr	r3, [pc, #372]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 8001750:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001754:	f7fe fec0 	bl	80004d8 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe fd04 	bl	800016c <__adddf3>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4610      	mov	r0, r2
 800176a:	4619      	mov	r1, r3
 800176c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001770:	f7fe ffdc 	bl	800072c <__aeabi_ddiv>
 8001774:	4602      	mov	r2, r0
 8001776:	460b      	mov	r3, r1
 8001778:	4956      	ldr	r1, [pc, #344]	; (80018d4 <EKF_Algorithm_Main+0x70c>)
 800177a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		d_Buff_a = 0;
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		gd_EKF_Y = EKF_OCV_DIV_5Poly(gd_EKF_State_Matrix_Pre[0]) - gd_EKF_State_Matrix_Pre[1] - EKF_R0*d_EKF_Current_M;
 800178a:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <EKF_Algorithm_Main+0x6f8>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	4610      	mov	r0, r2
 8001792:	4619      	mov	r1, r3
 8001794:	f000 faa8 	bl	8001ce8 <EKF_OCV_DIV_5Poly>
 8001798:	4b49      	ldr	r3, [pc, #292]	; (80018c0 <EKF_Algorithm_Main+0x6f8>)
 800179a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800179e:	f7fe fce3 	bl	8000168 <__aeabi_dsub>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4614      	mov	r4, r2
 80017a8:	461d      	mov	r5, r3
 80017aa:	a343      	add	r3, pc, #268	; (adr r3, 80018b8 <EKF_Algorithm_Main+0x6f0>)
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80017b4:	f7fe fe90 	bl	80004d8 <__aeabi_dmul>
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4620      	mov	r0, r4
 80017be:	4629      	mov	r1, r5
 80017c0:	f7fe fcd2 	bl	8000168 <__aeabi_dsub>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4943      	ldr	r1, [pc, #268]	; (80018d8 <EKF_Algorithm_Main+0x710>)
 80017ca:	e9c1 2300 	strd	r2, r3, [r1]
		gd_EKF_State_Matrix[0] = gd_EKF_State_Matrix_Pre[0] + gd_EKF_K_Matrix[0]*(d_EKF_Voltage_M - gd_EKF_Y);
 80017ce:	4b3c      	ldr	r3, [pc, #240]	; (80018c0 <EKF_Algorithm_Main+0x6f8>)
 80017d0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80017d4:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <EKF_Algorithm_Main+0x70c>)
 80017d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80017da:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <EKF_Algorithm_Main+0x710>)
 80017dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80017e4:	f7fe fcc0 	bl	8000168 <__aeabi_dsub>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4640      	mov	r0, r8
 80017ee:	4649      	mov	r1, r9
 80017f0:	f7fe fe72 	bl	80004d8 <__aeabi_dmul>
 80017f4:	4602      	mov	r2, r0
 80017f6:	460b      	mov	r3, r1
 80017f8:	4620      	mov	r0, r4
 80017fa:	4629      	mov	r1, r5
 80017fc:	f7fe fcb6 	bl	800016c <__adddf3>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4935      	ldr	r1, [pc, #212]	; (80018dc <EKF_Algorithm_Main+0x714>)
 8001806:	e9c1 2300 	strd	r2, r3, [r1]
		gd_EKF_State_Matrix[1] = gd_EKF_State_Matrix_Pre[1] + gd_EKF_K_Matrix[1]*(d_EKF_Voltage_M - gd_EKF_Y);
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <EKF_Algorithm_Main+0x6f8>)
 800180c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001810:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <EKF_Algorithm_Main+0x70c>)
 8001812:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <EKF_Algorithm_Main+0x710>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001820:	f7fe fca2 	bl	8000168 <__aeabi_dsub>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4640      	mov	r0, r8
 800182a:	4649      	mov	r1, r9
 800182c:	f7fe fe54 	bl	80004d8 <__aeabi_dmul>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4620      	mov	r0, r4
 8001836:	4629      	mov	r1, r5
 8001838:	f7fe fc98 	bl	800016c <__adddf3>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4926      	ldr	r1, [pc, #152]	; (80018dc <EKF_Algorithm_Main+0x714>)
 8001842:	e9c1 2302 	strd	r2, r3, [r1, #8]
		d_Buff_Matrix_A[0][0] = 1 - gd_EKF_K_Matrix[0]*gd_EKF_C_Matrix[0];		d_Buff_Matrix_A[0][1] = -gd_EKF_K_Matrix[0]*gd_EKF_C_Matrix[1];
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <EKF_Algorithm_Main+0x70c>)
 8001848:	e9d3 0100 	ldrd	r0, r1, [r3]
 800184c:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fe41 	bl	80004d8 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	f04f 0000 	mov.w	r0, #0
 800185e:	491a      	ldr	r1, [pc, #104]	; (80018c8 <EKF_Algorithm_Main+0x700>)
 8001860:	f7fe fc82 	bl	8000168 <__aeabi_dsub>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800186c:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <EKF_Algorithm_Main+0x70c>)
 800186e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001872:	60ba      	str	r2, [r7, #8]
 8001874:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 800187c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001880:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001884:	f7fe fe28 	bl	80004d8 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		d_Buff_Matrix_A[1][0] = -gd_EKF_K_Matrix[1]*gd_EKF_C_Matrix[0];			d_Buff_Matrix_A[1][1] = 1 - gd_EKF_K_Matrix[1]*gd_EKF_C_Matrix[1];
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <EKF_Algorithm_Main+0x70c>)
 8001892:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001896:	4692      	mov	sl, r2
 8001898:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <EKF_Algorithm_Main+0x6fc>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	4650      	mov	r0, sl
 80018a4:	4659      	mov	r1, fp
 80018a6:	f7fe fe17 	bl	80004d8 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <EKF_Algorithm_Main+0x70c>)
 80018b4:	e014      	b.n	80018e0 <EKF_Algorithm_Main+0x718>
 80018b6:	bf00      	nop
 80018b8:	4c836651 	.word	0x4c836651
 80018bc:	3f567232 	.word	0x3f567232
 80018c0:	200012a8 	.word	0x200012a8
 80018c4:	20001240 	.word	0x20001240
 80018c8:	3ff00000 	.word	0x3ff00000
 80018cc:	20001288 	.word	0x20001288
 80018d0:	200000b8 	.word	0x200000b8
 80018d4:	20001270 	.word	0x20001270
 80018d8:	20001280 	.word	0x20001280
 80018dc:	20001230 	.word	0x20001230
 80018e0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018e4:	4bae      	ldr	r3, [pc, #696]	; (8001ba0 <EKF_Algorithm_Main+0x9d8>)
 80018e6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ea:	f7fe fdf5 	bl	80004d8 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	f04f 0000 	mov.w	r0, #0
 80018f6:	49ab      	ldr	r1, [pc, #684]	; (8001ba4 <EKF_Algorithm_Main+0x9dc>)
 80018f8:	f7fe fc36 	bl	8000168 <__aeabi_dsub>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		for(i=0;i<2;i++)
 8001904:	2300      	movs	r3, #0
 8001906:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800190a:	e05e      	b.n	80019ca <EKF_Algorithm_Main+0x802>
			for(j=0;j<2;j++)
 800190c:	2300      	movs	r3, #0
 800190e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001912:	e051      	b.n	80019b8 <EKF_Algorithm_Main+0x7f0>
				for(k=0;k<2;k++)
 8001914:	2300      	movs	r3, #0
 8001916:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 800191a:	e044      	b.n	80019a6 <EKF_Algorithm_Main+0x7de>
					d_Buff_Matrix_B[i][j] += d_Buff_Matrix_A[i][k]*gd_EKF_P_Matrix_Pre[k][j];
 800191c:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001920:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001924:	0052      	lsls	r2, r2, #1
 8001926:	4413      	add	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	3360      	adds	r3, #96	; 0x60
 800192c:	f107 0210 	add.w	r2, r7, #16
 8001930:	4413      	add	r3, r2
 8001932:	3b60      	subs	r3, #96	; 0x60
 8001934:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001938:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800193c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8001940:	0052      	lsls	r2, r2, #1
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	3360      	adds	r3, #96	; 0x60
 8001948:	f107 0210 	add.w	r2, r7, #16
 800194c:	4413      	add	r3, r2
 800194e:	3b40      	subs	r3, #64	; 0x40
 8001950:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001954:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8001958:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800195c:	4e92      	ldr	r6, [pc, #584]	; (8001ba8 <EKF_Algorithm_Main+0x9e0>)
 800195e:	0052      	lsls	r2, r2, #1
 8001960:	4413      	add	r3, r2
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4433      	add	r3, r6
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	f7fe fdb5 	bl	80004d8 <__aeabi_dmul>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	f897 806f 	ldrb.w	r8, [r7, #111]	; 0x6f
 8001976:	f897 606e 	ldrb.w	r6, [r7, #110]	; 0x6e
 800197a:	4620      	mov	r0, r4
 800197c:	4629      	mov	r1, r5
 800197e:	f7fe fbf5 	bl	800016c <__adddf3>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	ea4f 0148 	mov.w	r1, r8, lsl #1
 800198a:	4431      	add	r1, r6
 800198c:	00c9      	lsls	r1, r1, #3
 800198e:	3160      	adds	r1, #96	; 0x60
 8001990:	f107 0010 	add.w	r0, r7, #16
 8001994:	4401      	add	r1, r0
 8001996:	3960      	subs	r1, #96	; 0x60
 8001998:	e9c1 2300 	strd	r2, r3, [r1]
				for(k=0;k<2;k++)
 800199c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80019a0:	3301      	adds	r3, #1
 80019a2:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 80019a6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d9b6      	bls.n	800191c <EKF_Algorithm_Main+0x754>
			for(j=0;j<2;j++)
 80019ae:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80019b2:	3301      	adds	r3, #1
 80019b4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80019b8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d9a9      	bls.n	8001914 <EKF_Algorithm_Main+0x74c>
		for(i=0;i<2;i++)
 80019c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019c4:	3301      	adds	r3, #1
 80019c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80019ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d99c      	bls.n	800190c <EKF_Algorithm_Main+0x744>
		for(i=0;i<2;i++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80019d8:	e02a      	b.n	8001a30 <EKF_Algorithm_Main+0x868>
			for(j=0;j<2;j++)
 80019da:	2300      	movs	r3, #0
 80019dc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 80019e0:	e01d      	b.n	8001a1e <EKF_Algorithm_Main+0x856>
				gd_EKF_P_Matrix[i][j] = d_Buff_Matrix_B[i][j];
 80019e2:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80019e6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80019ea:	f897 006f 	ldrb.w	r0, [r7, #111]	; 0x6f
 80019ee:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 80019f2:	0052      	lsls	r2, r2, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	3360      	adds	r3, #96	; 0x60
 80019fa:	f107 0210 	add.w	r2, r7, #16
 80019fe:	4413      	add	r3, r2
 8001a00:	3b60      	subs	r3, #96	; 0x60
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	4c69      	ldr	r4, [pc, #420]	; (8001bac <EKF_Algorithm_Main+0x9e4>)
 8001a08:	0040      	lsls	r0, r0, #1
 8001a0a:	4401      	add	r1, r0
 8001a0c:	00c9      	lsls	r1, r1, #3
 8001a0e:	4421      	add	r1, r4
 8001a10:	e9c1 2300 	strd	r2, r3, [r1]
			for(j=0;j<2;j++)
 8001a14:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001a1e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d9dd      	bls.n	80019e2 <EKF_Algorithm_Main+0x81a>
		for(i=0;i<2;i++)
 8001a26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001a30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d9d0      	bls.n	80019da <EKF_Algorithm_Main+0x812>
		for(i=0;i<2;i++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001a3e:	e037      	b.n	8001ab0 <EKF_Algorithm_Main+0x8e8>
			for(j=0;j<2;j++)
 8001a40:	2300      	movs	r3, #0
 8001a42:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001a46:	e02a      	b.n	8001a9e <EKF_Algorithm_Main+0x8d6>
				d_Buff_Matrix_A[i][j] = 0;
 8001a48:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001a4c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001a50:	0052      	lsls	r2, r2, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	3360      	adds	r3, #96	; 0x60
 8001a58:	f107 0210 	add.w	r2, r7, #16
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	e9c1 2300 	strd	r2, r3, [r1]
				d_Buff_Matrix_B[i][j] = 0;
 8001a6e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001a72:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001a76:	0052      	lsls	r2, r2, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	3360      	adds	r3, #96	; 0x60
 8001a7e:	f107 0210 	add.w	r2, r7, #16
 8001a82:	4413      	add	r3, r2
 8001a84:	f1a3 0160 	sub.w	r1, r3, #96	; 0x60
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	f04f 0300 	mov.w	r3, #0
 8001a90:	e9c1 2300 	strd	r2, r3, [r1]
			for(j=0;j<2;j++)
 8001a94:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001a9e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d9d0      	bls.n	8001a48 <EKF_Algorithm_Main+0x880>
		for(i=0;i<2;i++)
 8001aa6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001ab0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d9c3      	bls.n	8001a40 <EKF_Algorithm_Main+0x878>
		gd_EKF_P_Matrix[0][1] = (gd_EKF_P_Matrix[0][1] + gd_EKF_P_Matrix[1][0])/2;
 8001ab8:	4b3c      	ldr	r3, [pc, #240]	; (8001bac <EKF_Algorithm_Main+0x9e4>)
 8001aba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001abe:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <EKF_Algorithm_Main+0x9e4>)
 8001ac0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ac4:	f7fe fb52 	bl	800016c <__adddf3>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ad8:	f7fe fe28 	bl	800072c <__aeabi_ddiv>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4932      	ldr	r1, [pc, #200]	; (8001bac <EKF_Algorithm_Main+0x9e4>)
 8001ae2:	e9c1 2302 	strd	r2, r3, [r1, #8]
		gd_EKF_P_Matrix[1][0] = gd_EKF_P_Matrix[0][1];
 8001ae6:	4b31      	ldr	r3, [pc, #196]	; (8001bac <EKF_Algorithm_Main+0x9e4>)
 8001ae8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001aec:	492f      	ldr	r1, [pc, #188]	; (8001bac <EKF_Algorithm_Main+0x9e4>)
 8001aee:	e9c1 2304 	strd	r2, r3, [r1, #16]
		if(gd_EKF_State_Matrix[0] > Max_SOC)
 8001af2:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <EKF_Algorithm_Main+0x9e8>)
 8001af4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001af8:	a323      	add	r3, pc, #140	; (adr r3, 8001b88 <EKF_Algorithm_Main+0x9c0>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe ff7b 	bl	80009f8 <__aeabi_dcmpgt>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d006      	beq.n	8001b16 <EKF_Algorithm_Main+0x94e>
			gd_EKF_State_Matrix[0] = Max_SOC;
 8001b08:	4929      	ldr	r1, [pc, #164]	; (8001bb0 <EKF_Algorithm_Main+0x9e8>)
 8001b0a:	a31f      	add	r3, pc, #124	; (adr r3, 8001b88 <EKF_Algorithm_Main+0x9c0>)
 8001b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b10:	e9c1 2300 	strd	r2, r3, [r1]
 8001b14:	e010      	b.n	8001b38 <EKF_Algorithm_Main+0x970>
		else if(gd_EKF_State_Matrix[0] < Min_SOC)
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <EKF_Algorithm_Main+0x9e8>)
 8001b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b1c:	a31c      	add	r3, pc, #112	; (adr r3, 8001b90 <EKF_Algorithm_Main+0x9c8>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe ff4b 	bl	80009bc <__aeabi_dcmplt>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d005      	beq.n	8001b38 <EKF_Algorithm_Main+0x970>
			gd_EKF_State_Matrix[0] = Min_SOC;
 8001b2c:	4920      	ldr	r1, [pc, #128]	; (8001bb0 <EKF_Algorithm_Main+0x9e8>)
 8001b2e:	a318      	add	r3, pc, #96	; (adr r3, 8001b90 <EKF_Algorithm_Main+0x9c8>)
 8001b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b34:	e9c1 2300 	strd	r2, r3, [r1]
		ed_EKF_SOC = gd_EKF_State_Matrix[0];	// Estimated SOC
 8001b38:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <EKF_Algorithm_Main+0x9e8>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	491d      	ldr	r1, [pc, #116]	; (8001bb4 <EKF_Algorithm_Main+0x9ec>)
 8001b40:	e9c1 2300 	strd	r2, r3, [r1]
		ed_EKF_V1 = gd_EKF_State_Matrix[1];		// Estimated V1
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <EKF_Algorithm_Main+0x9e8>)
 8001b46:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001b4a:	491b      	ldr	r1, [pc, #108]	; (8001bb8 <EKF_Algorithm_Main+0x9f0>)
 8001b4c:	e9c1 2300 	strd	r2, r3, [r1]
		ed_EKF_Vt = gd_EKF_Y;					// Estimated Vt
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <EKF_Algorithm_Main+0x9f4>)
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	491a      	ldr	r1, [pc, #104]	; (8001bc0 <EKF_Algorithm_Main+0x9f8>)
 8001b58:	e9c1 2300 	strd	r2, r3, [r1]
		eui_EKF_SOC_UART = ed_EKF_SOC*10000;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <EKF_Algorithm_Main+0x9ec>)
 8001b5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b62:	a30d      	add	r3, pc, #52	; (adr r3, 8001b98 <EKF_Algorithm_Main+0x9d0>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe fcb6 	bl	80004d8 <__aeabi_dmul>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7fe ff4a 	bl	8000a0c <__aeabi_d2uiz>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <EKF_Algorithm_Main+0x9fc>)
 8001b7c:	6013      	str	r3, [r2, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	3774      	adds	r7, #116	; 0x74
 8001b82:	46bd      	mov	sp, r7
 8001b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b88:	7ae147ae 	.word	0x7ae147ae
 8001b8c:	3fefae14 	.word	0x3fefae14
 8001b90:	47ae147b 	.word	0x47ae147b
 8001b94:	3f847ae1 	.word	0x3f847ae1
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40c38800 	.word	0x40c38800
 8001ba0:	20001240 	.word	0x20001240
 8001ba4:	3ff00000 	.word	0x3ff00000
 8001ba8:	20001288 	.word	0x20001288
 8001bac:	200011f0 	.word	0x200011f0
 8001bb0:	20001230 	.word	0x20001230
 8001bb4:	200000c0 	.word	0x200000c0
 8001bb8:	200000c8 	.word	0x200000c8
 8001bbc:	20001280 	.word	0x20001280
 8001bc0:	200000d0 	.word	0x200000d0
 8001bc4:	200000d8 	.word	0x200000d8

08001bc8 <EKF_Algorithm_Init>:

void EKF_Algorithm_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	// Initial SOC //
	SocCalculation();
 8001bcc:	f000 fca0 	bl	8002510 <SocCalculation>

	// State Initialization //
	gd_EKF_State_Matrix[0] = SOC_Init/100. + EKF_SOC_Offset;		// put initial SOC value
 8001bd0:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <EKF_Algorithm_Init+0xf8>)
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fc15 	bl	8000404 <__aeabi_i2d>
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	4b39      	ldr	r3, [pc, #228]	; (8001cc4 <EKF_Algorithm_Init+0xfc>)
 8001be0:	f7fe fda4 	bl	800072c <__aeabi_ddiv>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4610      	mov	r0, r2
 8001bea:	4619      	mov	r1, r3
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	f7fe faba 	bl	800016c <__adddf3>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4932      	ldr	r1, [pc, #200]	; (8001cc8 <EKF_Algorithm_Init+0x100>)
 8001bfe:	e9c1 2300 	strd	r2, r3, [r1]
	gd_EKF_State_Matrix[1] = 0;		// Initial V1 value
 8001c02:	4931      	ldr	r1, [pc, #196]	; (8001cc8 <EKF_Algorithm_Init+0x100>)
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	f04f 0300 	mov.w	r3, #0
 8001c0c:	e9c1 2302 	strd	r2, r3, [r1, #8]

	// Model Initialization //
	gd_EKF_A_Matrix[0][0] = 1;		gd_EKF_A_Matrix[0][1] = 0;
 8001c10:	492e      	ldr	r1, [pc, #184]	; (8001ccc <EKF_Algorithm_Init+0x104>)
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b2e      	ldr	r3, [pc, #184]	; (8001cd0 <EKF_Algorithm_Init+0x108>)
 8001c18:	e9c1 2300 	strd	r2, r3, [r1]
 8001c1c:	492b      	ldr	r1, [pc, #172]	; (8001ccc <EKF_Algorithm_Init+0x104>)
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	f04f 0300 	mov.w	r3, #0
 8001c26:	e9c1 2302 	strd	r2, r3, [r1, #8]
	gd_EKF_A_Matrix[1][0] = 0;		gd_EKF_A_Matrix[1][1] = exp(-EKF_dT/(EKF_R1*EKF_C1));
 8001c2a:	4928      	ldr	r1, [pc, #160]	; (8001ccc <EKF_Algorithm_Init+0x104>)
 8001c2c:	f04f 0200 	mov.w	r2, #0
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001c38:	4924      	ldr	r1, [pc, #144]	; (8001ccc <EKF_Algorithm_Init+0x104>)
 8001c3a:	a319      	add	r3, pc, #100	; (adr r3, 8001ca0 <EKF_Algorithm_Init+0xd8>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	e9c1 2306 	strd	r2, r3, [r1, #24]

	// Design Parameter Initialization //
	gd_EKF_Q_Matrix[0][0] = EKF_Qz;			gd_EKF_Q_Matrix[0][1] = 0;
 8001c44:	4923      	ldr	r1, [pc, #140]	; (8001cd4 <EKF_Algorithm_Init+0x10c>)
 8001c46:	a318      	add	r3, pc, #96	; (adr r3, 8001ca8 <EKF_Algorithm_Init+0xe0>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	e9c1 2300 	strd	r2, r3, [r1]
 8001c50:	4920      	ldr	r1, [pc, #128]	; (8001cd4 <EKF_Algorithm_Init+0x10c>)
 8001c52:	f04f 0200 	mov.w	r2, #0
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	gd_EKF_Q_Matrix[1][0] = 0;				gd_EKF_Q_Matrix[1][1] = EKF_QV1;
 8001c5e:	491d      	ldr	r1, [pc, #116]	; (8001cd4 <EKF_Algorithm_Init+0x10c>)
 8001c60:	f04f 0200 	mov.w	r2, #0
 8001c64:	f04f 0300 	mov.w	r3, #0
 8001c68:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8001c6c:	4919      	ldr	r1, [pc, #100]	; (8001cd4 <EKF_Algorithm_Init+0x10c>)
 8001c6e:	a310      	add	r3, pc, #64	; (adr r3, 8001cb0 <EKF_Algorithm_Init+0xe8>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	e9c1 2306 	strd	r2, r3, [r1, #24]
	gd_EKF_R = EKF_R;
 8001c78:	4917      	ldr	r1, [pc, #92]	; (8001cd8 <EKF_Algorithm_Init+0x110>)
 8001c7a:	f04f 0200 	mov.w	r2, #0
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <EKF_Algorithm_Init+0x114>)
 8001c80:	e9c1 2300 	strd	r2, r3, [r1]

	gd_EKF_P_Matrix[0][0] = EKF_P_Init_z;
 8001c84:	4916      	ldr	r1, [pc, #88]	; (8001ce0 <EKF_Algorithm_Init+0x118>)
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <EKF_Algorithm_Init+0x11c>)
 8001c8c:	e9c1 2300 	strd	r2, r3, [r1]
	gd_EKF_P_Matrix[1][1] = EKF_P_Init_V1;
 8001c90:	4913      	ldr	r1, [pc, #76]	; (8001ce0 <EKF_Algorithm_Init+0x118>)
 8001c92:	a309      	add	r3, pc, #36	; (adr r3, 8001cb8 <EKF_Algorithm_Init+0xf0>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	3147bfa1 	.word	0x3147bfa1
 8001ca4:	3fefd7a0 	.word	0x3fefd7a0
 8001ca8:	88e368f1 	.word	0x88e368f1
 8001cac:	3ee4f8b5 	.word	0x3ee4f8b5
 8001cb0:	a0b5ed8d 	.word	0xa0b5ed8d
 8001cb4:	3eb0c6f7 	.word	0x3eb0c6f7
 8001cb8:	9999999a 	.word	0x9999999a
 8001cbc:	3fb99999 	.word	0x3fb99999
 8001cc0:	200000dc 	.word	0x200000dc
 8001cc4:	40590000 	.word	0x40590000
 8001cc8:	20001230 	.word	0x20001230
 8001ccc:	20001250 	.word	0x20001250
 8001cd0:	3ff00000 	.word	0x3ff00000
 8001cd4:	20001210 	.word	0x20001210
 8001cd8:	200000b8 	.word	0x200000b8
 8001cdc:	40790000 	.word	0x40790000
 8001ce0:	200011f0 	.word	0x200011f0
 8001ce4:	40140000 	.word	0x40140000

08001ce8 <EKF_OCV_DIV_5Poly>:

double EKF_OCV_DIV_5Poly(double SOC)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	e9c7 0100 	strd	r0, r1, [r7]
	// If the SOC is in low range //
	if(SOC < Mid_SOC)
 8001cf2:	a317      	add	r3, pc, #92	; (adr r3, 8001d50 <EKF_OCV_DIV_5Poly+0x68>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001cfc:	f7fe fe5e 	bl	80009bc <__aeabi_dcmplt>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <EKF_OCV_DIV_5Poly+0x2c>
	{
		return EKF_OCV_Low_5Poly(SOC);
 8001d06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d0a:	f000 f951 	bl	8001fb0 <EKF_OCV_Low_5Poly>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	460b      	mov	r3, r1
 8001d12:	e016      	b.n	8001d42 <EKF_OCV_DIV_5Poly+0x5a>

	}
	// Else if the SOC is in middle range //
	else if(SOC < High_SOC)
 8001d14:	a310      	add	r3, pc, #64	; (adr r3, 8001d58 <EKF_OCV_DIV_5Poly+0x70>)
 8001d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d1e:	f7fe fe4d 	bl	80009bc <__aeabi_dcmplt>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <EKF_OCV_DIV_5Poly+0x4e>
	{
		return EKF_OCV_Mid_5Poly(SOC);
 8001d28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d2c:	f000 f8ac 	bl	8001e88 <EKF_OCV_Mid_5Poly>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	e005      	b.n	8001d42 <EKF_OCV_DIV_5Poly+0x5a>
	}
	// Else if the SOC is in high range //
	else
	{
		return EKF_OCV_High_5Poly(SOC);
 8001d36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d3a:	f000 f811 	bl	8001d60 <EKF_OCV_High_5Poly>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
	}
}
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	f3af 8000 	nop.w
 8001d50:	33333333 	.word	0x33333333
 8001d54:	3fd33333 	.word	0x3fd33333
 8001d58:	9999999a 	.word	0x9999999a
 8001d5c:	3fe99999 	.word	0x3fe99999

08001d60 <EKF_OCV_High_5Poly>:

double EKF_OCV_High_5Poly(double SOC)
{
 8001d60:	b5b0      	push	{r4, r5, r7, lr}
 8001d62:	b09a      	sub	sp, #104	; 0x68
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	e9c7 0100 	strd	r0, r1, [r7]
	unsigned char i = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	// Normalization parameters //
	double mean = 0.895, std = 0.05528;
 8001d70:	a33f      	add	r3, pc, #252	; (adr r3, 8001e70 <EKF_OCV_High_5Poly+0x110>)
 8001d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d76:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001d7a:	a33f      	add	r3, pc, #252	; (adr r3, 8001e78 <EKF_OCV_High_5Poly+0x118>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	// coefficients of polynomials p6 ~ p1 //
	double Param[6] = {4.084, 0.02152, -0.008372, 0.0101, 0.00236, -0.0007013};
 8001d84:	4b3e      	ldr	r3, [pc, #248]	; (8001e80 <EKF_OCV_High_5Poly+0x120>)
 8001d86:	f107 0408 	add.w	r4, r7, #8
 8001d8a:	461d      	mov	r5, r3
 8001d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Result //
	double SOC_Norm = 0, OCV_High = 0, Pow_SOC = 1;
 8001d9c:	f04f 0200 	mov.w	r2, #0
 8001da0:	f04f 0300 	mov.w	r3, #0
 8001da4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <EKF_OCV_High_5Poly+0x124>)
 8001dba:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	// Normalization //
	SOC_Norm = (SOC - mean)/std;
 8001dbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001dc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001dc6:	f7fe f9cf 	bl	8000168 <__aeabi_dsub>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001dd6:	f7fe fca9 	bl	800072c <__aeabi_ddiv>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	for(i=0;i<6;i++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001de8:	e034      	b.n	8001e54 <EKF_OCV_High_5Poly+0xf4>
	{
		if(i == 0)
 8001dea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10b      	bne.n	8001e0a <EKF_OCV_High_5Poly+0xaa>
		{
			Pow_SOC = 1;
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <EKF_OCV_High_5Poly+0x124>)
 8001df8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			OCV_High = 0;
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001e08:	e009      	b.n	8001e1e <EKF_OCV_High_5Poly+0xbe>
		}
		else
		{
			Pow_SOC = Pow_SOC*SOC_Norm;
 8001e0a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001e0e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e12:	f7fe fb61 	bl	80004d8 <__aeabi_dmul>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		}

		// OCV_High = p1*SOC^5 + p2*SOC^4 + p3*SOC^3 + p4*SOC^2 + p5*SOC + p6 //
		OCV_High = OCV_High + Param[i]*Pow_SOC;
 8001e1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	3368      	adds	r3, #104	; 0x68
 8001e26:	443b      	add	r3, r7
 8001e28:	3b60      	subs	r3, #96	; 0x60
 8001e2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e2e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e32:	f7fe fb51 	bl	80004d8 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e3e:	f7fe f995 	bl	800016c <__adddf3>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	for(i=0;i<6;i++)
 8001e4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e4e:	3301      	adds	r3, #1
 8001e50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001e54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d9c6      	bls.n	8001dea <EKF_OCV_High_5Poly+0x8a>
	}

	return OCV_High;
 8001e5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
}
 8001e60:	4610      	mov	r0, r2
 8001e62:	4619      	mov	r1, r3
 8001e64:	3768      	adds	r7, #104	; 0x68
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	f3af 8000 	nop.w
 8001e70:	0a3d70a4 	.word	0x0a3d70a4
 8001e74:	3feca3d7 	.word	0x3feca3d7
 8001e78:	003eea21 	.word	0x003eea21
 8001e7c:	3fac4da9 	.word	0x3fac4da9
 8001e80:	0800d378 	.word	0x0800d378
 8001e84:	3ff00000 	.word	0x3ff00000

08001e88 <EKF_OCV_Mid_5Poly>:

double EKF_OCV_Mid_5Poly(double SOC)
{
 8001e88:	b5b0      	push	{r4, r5, r7, lr}
 8001e8a:	b09a      	sub	sp, #104	; 0x68
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	e9c7 0100 	strd	r0, r1, [r7]
	unsigned char i = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	// Normalization parameters //
	double mean = 0.5495, std = 0.1445;
 8001e98:	a33f      	add	r3, pc, #252	; (adr r3, 8001f98 <EKF_OCV_Mid_5Poly+0x110>)
 8001e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001ea2:	a33f      	add	r3, pc, #252	; (adr r3, 8001fa0 <EKF_OCV_Mid_5Poly+0x118>)
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	// coefficients of polynomials p6 ~ p1 //
	double Param[6] = {3.764, 0.1493, 0.0003391, -0.01939, 0.0002086, 0.005026};
 8001eac:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <EKF_OCV_Mid_5Poly+0x120>)
 8001eae:	f107 0408 	add.w	r4, r7, #8
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ebc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Result //
	double SOC_Norm = 0, OCV_High = 0, Pow_SOC = 1;
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	f04f 0300 	mov.w	r3, #0
 8001ecc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f04f 0300 	mov.w	r3, #0
 8001ed8:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	4b32      	ldr	r3, [pc, #200]	; (8001fac <EKF_OCV_Mid_5Poly+0x124>)
 8001ee2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	// Normalization //
	SOC_Norm = (SOC - mean)/std;
 8001ee6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001eea:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001eee:	f7fe f93b 	bl	8000168 <__aeabi_dsub>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001efe:	f7fe fc15 	bl	800072c <__aeabi_ddiv>
 8001f02:	4602      	mov	r2, r0
 8001f04:	460b      	mov	r3, r1
 8001f06:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	for(i=0;i<6;i++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f10:	e034      	b.n	8001f7c <EKF_OCV_Mid_5Poly+0xf4>
	{
		if(i == 0)
 8001f12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10b      	bne.n	8001f32 <EKF_OCV_Mid_5Poly+0xaa>
		{
			Pow_SOC = 1;
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	4b23      	ldr	r3, [pc, #140]	; (8001fac <EKF_OCV_Mid_5Poly+0x124>)
 8001f20:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			OCV_High = 0;
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8001f30:	e009      	b.n	8001f46 <EKF_OCV_Mid_5Poly+0xbe>
		}
		else
		{
			Pow_SOC = Pow_SOC*SOC_Norm;
 8001f32:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001f3a:	f7fe facd 	bl	80004d8 <__aeabi_dmul>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		}

		// OCV_High = p1*SOC^5 + p2*SOC^4 + p3*SOC^3 + p4*SOC^2 + p5*SOC + p6 //
		OCV_High = OCV_High + Param[i]*Pow_SOC;
 8001f46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	3368      	adds	r3, #104	; 0x68
 8001f4e:	443b      	add	r3, r7
 8001f50:	3b60      	subs	r3, #96	; 0x60
 8001f52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f56:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f5a:	f7fe fabd 	bl	80004d8 <__aeabi_dmul>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001f66:	f7fe f901 	bl	800016c <__adddf3>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	for(i=0;i<6;i++)
 8001f72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f76:	3301      	adds	r3, #1
 8001f78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001f7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d9c6      	bls.n	8001f12 <EKF_OCV_Mid_5Poly+0x8a>
	}

	return OCV_High;
 8001f84:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
}
 8001f88:	4610      	mov	r0, r2
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	3768      	adds	r7, #104	; 0x68
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bdb0      	pop	{r4, r5, r7, pc}
 8001f92:	bf00      	nop
 8001f94:	f3af 8000 	nop.w
 8001f98:	0624dd2f 	.word	0x0624dd2f
 8001f9c:	3fe19581 	.word	0x3fe19581
 8001fa0:	db22d0e5 	.word	0xdb22d0e5
 8001fa4:	3fc27ef9 	.word	0x3fc27ef9
 8001fa8:	0800d3a8 	.word	0x0800d3a8
 8001fac:	3ff00000 	.word	0x3ff00000

08001fb0 <EKF_OCV_Low_5Poly>:

double EKF_OCV_Low_5Poly(double SOC)
{
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	b09a      	sub	sp, #104	; 0x68
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	e9c7 0100 	strd	r0, r1, [r7]
	unsigned char i = 0;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	// Normalization parameters //
	double mean = 0.15, std = 0.08646;
 8001fc0:	a33f      	add	r3, pc, #252	; (adr r3, 80020c0 <EKF_OCV_Low_5Poly+0x110>)
 8001fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fca:	a33f      	add	r3, pc, #252	; (adr r3, 80020c8 <EKF_OCV_Low_5Poly+0x118>)
 8001fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	// coefficients of polynomials p6 ~ p1 //
	double Param[6] = {3.326, 0.1473, 0.006766, 0.002178, -0.02616, 0.01023};
 8001fd4:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <EKF_OCV_Low_5Poly+0x120>)
 8001fd6:	f107 0408 	add.w	r4, r7, #8
 8001fda:	461d      	mov	r5, r3
 8001fdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fe4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fe8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Result //
	double SOC_Norm = 0, OCV_High = 0, Pow_SOC = 1;
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	4b32      	ldr	r3, [pc, #200]	; (80020d4 <EKF_OCV_Low_5Poly+0x124>)
 800200a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	// Normalization //
	SOC_Norm = (SOC - mean)/std;
 800200e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002012:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002016:	f7fe f8a7 	bl	8000168 <__aeabi_dsub>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002026:	f7fe fb81 	bl	800072c <__aeabi_ddiv>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	for(i=0;i<6;i++)
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002038:	e034      	b.n	80020a4 <EKF_OCV_Low_5Poly+0xf4>
	{
		if(i == 0)
 800203a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10b      	bne.n	800205a <EKF_OCV_Low_5Poly+0xaa>
		{
			Pow_SOC = 1;
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <EKF_OCV_Low_5Poly+0x124>)
 8002048:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			OCV_High = 0;
 800204c:	f04f 0200 	mov.w	r2, #0
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002058:	e009      	b.n	800206e <EKF_OCV_Low_5Poly+0xbe>
		}
		else
		{
			Pow_SOC = Pow_SOC*SOC_Norm;
 800205a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800205e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002062:	f7fe fa39 	bl	80004d8 <__aeabi_dmul>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		}

		// OCV_High = p1*SOC^5 + p2*SOC^4 + p3*SOC^3 + p4*SOC^2 + p5*SOC + p6 //
		OCV_High = OCV_High + Param[i]*Pow_SOC;
 800206e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	3368      	adds	r3, #104	; 0x68
 8002076:	443b      	add	r3, r7
 8002078:	3b60      	subs	r3, #96	; 0x60
 800207a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800207e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002082:	f7fe fa29 	bl	80004d8 <__aeabi_dmul>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800208e:	f7fe f86d 	bl	800016c <__adddf3>
 8002092:	4602      	mov	r2, r0
 8002094:	460b      	mov	r3, r1
 8002096:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	for(i=0;i<6;i++)
 800209a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800209e:	3301      	adds	r3, #1
 80020a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80020a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80020a8:	2b05      	cmp	r3, #5
 80020aa:	d9c6      	bls.n	800203a <EKF_OCV_Low_5Poly+0x8a>
	}

	return OCV_High;
 80020ac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
}
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	3768      	adds	r7, #104	; 0x68
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bdb0      	pop	{r4, r5, r7, pc}
 80020ba:	bf00      	nop
 80020bc:	f3af 8000 	nop.w
 80020c0:	33333333 	.word	0x33333333
 80020c4:	3fc33333 	.word	0x3fc33333
 80020c8:	18698351 	.word	0x18698351
 80020cc:	3fb6223e 	.word	0x3fb6223e
 80020d0:	0800d3d8 	.word	0x0800d3d8
 80020d4:	3ff00000 	.word	0x3ff00000

080020d8 <EKF_OCV_Dot_DIV_5Poly>:

double EKF_OCV_Dot_DIV_5Poly(double SOC)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	e9c7 0100 	strd	r0, r1, [r7]
	// If the SOC is in low range //
	if(SOC < Mid_SOC)
 80020e2:	a317      	add	r3, pc, #92	; (adr r3, 8002140 <EKF_OCV_Dot_DIV_5Poly+0x68>)
 80020e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020ec:	f7fe fc66 	bl	80009bc <__aeabi_dcmplt>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <EKF_OCV_Dot_DIV_5Poly+0x2c>
	{
		return EKF_OCV_Dot_Low_5Poly(SOC);
 80020f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020fa:	f000 f969 	bl	80023d0 <EKF_OCV_Dot_Low_5Poly>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	e016      	b.n	8002132 <EKF_OCV_Dot_DIV_5Poly+0x5a>

	}
	// Else if the SOC is in middle range //
	else if(SOC < High_SOC)
 8002104:	a310      	add	r3, pc, #64	; (adr r3, 8002148 <EKF_OCV_Dot_DIV_5Poly+0x70>)
 8002106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800210e:	f7fe fc55 	bl	80009bc <__aeabi_dcmplt>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d006      	beq.n	8002126 <EKF_OCV_Dot_DIV_5Poly+0x4e>
	{
		return EKF_OCV_Dot_Mid_5Poly(SOC);
 8002118:	e9d7 0100 	ldrd	r0, r1, [r7]
 800211c:	f000 f8b8 	bl	8002290 <EKF_OCV_Dot_Mid_5Poly>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	e005      	b.n	8002132 <EKF_OCV_Dot_DIV_5Poly+0x5a>
	}
	// Else if the SOC is in high range //
	else
	{
		return EKF_OCV_Dot_High_5Poly(SOC);
 8002126:	e9d7 0100 	ldrd	r0, r1, [r7]
 800212a:	f000 f811 	bl	8002150 <EKF_OCV_Dot_High_5Poly>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
	}
}
 8002132:	4610      	mov	r0, r2
 8002134:	4619      	mov	r1, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	f3af 8000 	nop.w
 8002140:	33333333 	.word	0x33333333
 8002144:	3fd33333 	.word	0x3fd33333
 8002148:	9999999a 	.word	0x9999999a
 800214c:	3fe99999 	.word	0x3fe99999

08002150 <EKF_OCV_Dot_High_5Poly>:

double EKF_OCV_Dot_High_5Poly(double SOC)
{
 8002150:	b5b0      	push	{r4, r5, r7, lr}
 8002152:	b09a      	sub	sp, #104	; 0x68
 8002154:	af00      	add	r7, sp, #0
 8002156:	e9c7 0100 	strd	r0, r1, [r7]
	unsigned char i = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	// Normalization parameters //
	double mean = 0.895, std = 0.05528;
 8002160:	a345      	add	r3, pc, #276	; (adr r3, 8002278 <EKF_OCV_Dot_High_5Poly+0x128>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800216a:	a345      	add	r3, pc, #276	; (adr r3, 8002280 <EKF_OCV_Dot_High_5Poly+0x130>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	// coefficients of polynomials p6 ~ p1 //
	double Param[6] = {4.084, 0.02152, -0.008372, 0.0101, 0.00236, -0.0007013};
 8002174:	4b44      	ldr	r3, [pc, #272]	; (8002288 <EKF_OCV_Dot_High_5Poly+0x138>)
 8002176:	f107 0408 	add.w	r4, r7, #8
 800217a:	461d      	mov	r5, r3
 800217c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800217e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002184:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Result //
	double SOC_Norm = 0, OCV_Dot_High = 0, Pow_SOC = 1;
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002198:	f04f 0200 	mov.w	r2, #0
 800219c:	f04f 0300 	mov.w	r3, #0
 80021a0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	4b38      	ldr	r3, [pc, #224]	; (800228c <EKF_OCV_Dot_High_5Poly+0x13c>)
 80021aa:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	// Normalization //
	SOC_Norm = (SOC - mean)/std;
 80021ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80021b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021b6:	f7fd ffd7 	bl	8000168 <__aeabi_dsub>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80021c6:	f7fe fab1 	bl	800072c <__aeabi_ddiv>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	for(i=0;i<5;i++)
 80021d2:	2300      	movs	r3, #0
 80021d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80021d8:	e041      	b.n	800225e <EKF_OCV_Dot_High_5Poly+0x10e>
	{
		if(i == 0)
 80021da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10b      	bne.n	80021fa <EKF_OCV_Dot_High_5Poly+0xaa>
		{
			Pow_SOC = 1;
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	4b29      	ldr	r3, [pc, #164]	; (800228c <EKF_OCV_Dot_High_5Poly+0x13c>)
 80021e8:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			OCV_Dot_High = 0;
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80021f8:	e009      	b.n	800220e <EKF_OCV_Dot_High_5Poly+0xbe>
		}
		else
		{
			Pow_SOC = Pow_SOC*SOC_Norm;
 80021fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80021fe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002202:	f7fe f969 	bl	80004d8 <__aeabi_dmul>
 8002206:	4602      	mov	r2, r0
 8002208:	460b      	mov	r3, r1
 800220a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		}

		// OCV_Dot_High = 5*p1*SOC^4 + 4*p2*SOC^3 + 3*p3*SOC^2 + 2*p4*SOC + p5 //
		OCV_Dot_High = OCV_Dot_High + (i+1)*Param[i+1]*Pow_SOC;
 800220e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002212:	3301      	adds	r3, #1
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe f8f5 	bl	8000404 <__aeabi_i2d>
 800221a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800221e:	3301      	adds	r3, #1
 8002220:	00db      	lsls	r3, r3, #3
 8002222:	3368      	adds	r3, #104	; 0x68
 8002224:	443b      	add	r3, r7
 8002226:	3b60      	subs	r3, #96	; 0x60
 8002228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800222c:	f7fe f954 	bl	80004d8 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800223c:	f7fe f94c 	bl	80004d8 <__aeabi_dmul>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002248:	f7fd ff90 	bl	800016c <__adddf3>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	for(i=0;i<5;i++)
 8002254:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002258:	3301      	adds	r3, #1
 800225a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800225e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002262:	2b04      	cmp	r3, #4
 8002264:	d9b9      	bls.n	80021da <EKF_OCV_Dot_High_5Poly+0x8a>
	}

	return OCV_Dot_High;
 8002266:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
}
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	3768      	adds	r7, #104	; 0x68
 8002270:	46bd      	mov	sp, r7
 8002272:	bdb0      	pop	{r4, r5, r7, pc}
 8002274:	f3af 8000 	nop.w
 8002278:	0a3d70a4 	.word	0x0a3d70a4
 800227c:	3feca3d7 	.word	0x3feca3d7
 8002280:	003eea21 	.word	0x003eea21
 8002284:	3fac4da9 	.word	0x3fac4da9
 8002288:	0800d378 	.word	0x0800d378
 800228c:	3ff00000 	.word	0x3ff00000

08002290 <EKF_OCV_Dot_Mid_5Poly>:

double EKF_OCV_Dot_Mid_5Poly(double SOC)
{
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b09a      	sub	sp, #104	; 0x68
 8002294:	af00      	add	r7, sp, #0
 8002296:	e9c7 0100 	strd	r0, r1, [r7]
	unsigned char i = 0;
 800229a:	2300      	movs	r3, #0
 800229c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	// Normalization parameters //
	double mean = 0.5495, std = 0.1445;
 80022a0:	a345      	add	r3, pc, #276	; (adr r3, 80023b8 <EKF_OCV_Dot_Mid_5Poly+0x128>)
 80022a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80022aa:	a345      	add	r3, pc, #276	; (adr r3, 80023c0 <EKF_OCV_Dot_Mid_5Poly+0x130>)
 80022ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	// coefficients of polynomials p6 ~ p1 //
	double Param[6] = {3.764, 0.1493, 0.0003391, -0.01939, 0.0002086, 0.005026};
 80022b4:	4b44      	ldr	r3, [pc, #272]	; (80023c8 <EKF_OCV_Dot_Mid_5Poly+0x138>)
 80022b6:	f107 0408 	add.w	r4, r7, #8
 80022ba:	461d      	mov	r5, r3
 80022bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Result //
	double SOC_Norm = 0, OCV_Dot_High = 0, Pow_SOC = 1;
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	4b38      	ldr	r3, [pc, #224]	; (80023cc <EKF_OCV_Dot_Mid_5Poly+0x13c>)
 80022ea:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	// Normalization //
	SOC_Norm = (SOC - mean)/std;
 80022ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80022f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022f6:	f7fd ff37 	bl	8000168 <__aeabi_dsub>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4610      	mov	r0, r2
 8002300:	4619      	mov	r1, r3
 8002302:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002306:	f7fe fa11 	bl	800072c <__aeabi_ddiv>
 800230a:	4602      	mov	r2, r0
 800230c:	460b      	mov	r3, r1
 800230e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	for(i=0;i<5;i++)
 8002312:	2300      	movs	r3, #0
 8002314:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002318:	e041      	b.n	800239e <EKF_OCV_Dot_Mid_5Poly+0x10e>
	{
		if(i == 0)
 800231a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10b      	bne.n	800233a <EKF_OCV_Dot_Mid_5Poly+0xaa>
		{
			Pow_SOC = 1;
 8002322:	f04f 0200 	mov.w	r2, #0
 8002326:	4b29      	ldr	r3, [pc, #164]	; (80023cc <EKF_OCV_Dot_Mid_5Poly+0x13c>)
 8002328:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			OCV_Dot_High = 0;
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002338:	e009      	b.n	800234e <EKF_OCV_Dot_Mid_5Poly+0xbe>
		}
		else
		{
			Pow_SOC = Pow_SOC*SOC_Norm;
 800233a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800233e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002342:	f7fe f8c9 	bl	80004d8 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		}

		// OCV_Dot_High = 5*p1*SOC^4 + 4*p2*SOC^3 + 3*p3*SOC^2 + 2*p4*SOC + p5 //
		OCV_Dot_High = OCV_Dot_High + (i+1)*Param[i+1]*Pow_SOC;
 800234e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002352:	3301      	adds	r3, #1
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f855 	bl	8000404 <__aeabi_i2d>
 800235a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800235e:	3301      	adds	r3, #1
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	3368      	adds	r3, #104	; 0x68
 8002364:	443b      	add	r3, r7
 8002366:	3b60      	subs	r3, #96	; 0x60
 8002368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236c:	f7fe f8b4 	bl	80004d8 <__aeabi_dmul>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	4610      	mov	r0, r2
 8002376:	4619      	mov	r1, r3
 8002378:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800237c:	f7fe f8ac 	bl	80004d8 <__aeabi_dmul>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002388:	f7fd fef0 	bl	800016c <__adddf3>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	for(i=0;i<5;i++)
 8002394:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002398:	3301      	adds	r3, #1
 800239a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800239e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d9b9      	bls.n	800231a <EKF_OCV_Dot_Mid_5Poly+0x8a>
	}

	return OCV_Dot_High;
 80023a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
}
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	3768      	adds	r7, #104	; 0x68
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bdb0      	pop	{r4, r5, r7, pc}
 80023b4:	f3af 8000 	nop.w
 80023b8:	0624dd2f 	.word	0x0624dd2f
 80023bc:	3fe19581 	.word	0x3fe19581
 80023c0:	db22d0e5 	.word	0xdb22d0e5
 80023c4:	3fc27ef9 	.word	0x3fc27ef9
 80023c8:	0800d3a8 	.word	0x0800d3a8
 80023cc:	3ff00000 	.word	0x3ff00000

080023d0 <EKF_OCV_Dot_Low_5Poly>:

double EKF_OCV_Dot_Low_5Poly(double SOC)
{
 80023d0:	b5b0      	push	{r4, r5, r7, lr}
 80023d2:	b09a      	sub	sp, #104	; 0x68
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	e9c7 0100 	strd	r0, r1, [r7]
	unsigned char i = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	// Normalization parameters //
	double mean = 0.15, std = 0.08646;
 80023e0:	a345      	add	r3, pc, #276	; (adr r3, 80024f8 <EKF_OCV_Dot_Low_5Poly+0x128>)
 80023e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80023ea:	a345      	add	r3, pc, #276	; (adr r3, 8002500 <EKF_OCV_Dot_Low_5Poly+0x130>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	// coefficients of polynomials p6 ~ p1 //
	double Param[6] = {3.326, 0.1473, 0.006766, 0.002178, -0.02616, 0.01023};
 80023f4:	4b44      	ldr	r3, [pc, #272]	; (8002508 <EKF_OCV_Dot_Low_5Poly+0x138>)
 80023f6:	f107 0408 	add.w	r4, r7, #8
 80023fa:	461d      	mov	r5, r3
 80023fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002400:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002402:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002404:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002408:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// Result //
	double SOC_Norm = 0, OCV_Dot_High = 0, Pow_SOC = 1;
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	4b38      	ldr	r3, [pc, #224]	; (800250c <EKF_OCV_Dot_Low_5Poly+0x13c>)
 800242a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50

	// Normalization //
	SOC_Norm = (SOC - mean)/std;
 800242e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002432:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002436:	f7fd fe97 	bl	8000168 <__aeabi_dsub>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002446:	f7fe f971 	bl	800072c <__aeabi_ddiv>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	for(i=0;i<5;i++)
 8002452:	2300      	movs	r3, #0
 8002454:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002458:	e041      	b.n	80024de <EKF_OCV_Dot_Low_5Poly+0x10e>
	{
		if(i == 0)
 800245a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10b      	bne.n	800247a <EKF_OCV_Dot_Low_5Poly+0xaa>
		{
			Pow_SOC = 1;
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	4b29      	ldr	r3, [pc, #164]	; (800250c <EKF_OCV_Dot_Low_5Poly+0x13c>)
 8002468:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			OCV_Dot_High = 0;
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 8002478:	e009      	b.n	800248e <EKF_OCV_Dot_Low_5Poly+0xbe>
		}
		else
		{
			Pow_SOC = Pow_SOC*SOC_Norm;
 800247a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800247e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002482:	f7fe f829 	bl	80004d8 <__aeabi_dmul>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		}

		// OCV_Dot_High = 5*p1*SOC^4 + 4*p2*SOC^3 + 3*p3*SOC^2 + 2*p4*SOC + p5 //
		OCV_Dot_High = OCV_Dot_High + (i+1)*Param[i+1]*Pow_SOC;
 800248e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002492:	3301      	adds	r3, #1
 8002494:	4618      	mov	r0, r3
 8002496:	f7fd ffb5 	bl	8000404 <__aeabi_i2d>
 800249a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800249e:	3301      	adds	r3, #1
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	3368      	adds	r3, #104	; 0x68
 80024a4:	443b      	add	r3, r7
 80024a6:	3b60      	subs	r3, #96	; 0x60
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	f7fe f814 	bl	80004d8 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80024bc:	f7fe f80c 	bl	80004d8 <__aeabi_dmul>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80024c8:	f7fd fe50 	bl	800016c <__adddf3>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	for(i=0;i<5;i++)
 80024d4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80024d8:	3301      	adds	r3, #1
 80024da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80024de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d9b9      	bls.n	800245a <EKF_OCV_Dot_Low_5Poly+0x8a>
	}

	return OCV_Dot_High;
 80024e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
}
 80024ea:	4610      	mov	r0, r2
 80024ec:	4619      	mov	r1, r3
 80024ee:	3768      	adds	r7, #104	; 0x68
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bdb0      	pop	{r4, r5, r7, pc}
 80024f4:	f3af 8000 	nop.w
 80024f8:	33333333 	.word	0x33333333
 80024fc:	3fc33333 	.word	0x3fc33333
 8002500:	18698351 	.word	0x18698351
 8002504:	3fb6223e 	.word	0x3fb6223e
 8002508:	0800d3d8 	.word	0x0800d3d8
 800250c:	3ff00000 	.word	0x3ff00000

08002510 <SocCalculation>:


void SocCalculation(void) {
 8002510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002514:	b088      	sub	sp, #32
 8002516:	af00      	add	r7, sp, #0
    // Local Variables //
    uint8_t i;
    double Soc_Value = 0;
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double Buffer_Ocv = 0;
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	e9c7 2302 	strd	r2, r3, [r7, #8]
    double Ocv_Value = 0;
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	e9c7 2300 	strd	r2, r3, [r7]

    // Convert analog input values to SOC values for g_Soc[0]
    //Ocv_Value = (uint16_t)(g_ModuleVoltageInfoArray[0].AverageVoltage * 10); // Get Average Voltage Value
    Ocv_Value = (uint16_t)Adbms6817.voltage_avg; // Get Average Voltage Value
 800253c:	4b4d      	ldr	r3, [pc, #308]	; (8002674 <SocCalculation+0x164>)
 800253e:	f8b3 3410 	ldrh.w	r3, [r3, #1040]	; 0x410
 8002542:	4618      	mov	r0, r3
 8002544:	f7fd ff4e 	bl	80003e4 <__aeabi_ui2d>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	e9c7 2300 	strd	r2, r3, [r7]

    for(i=0;i<21;i++)
 8002550:	2300      	movs	r3, #0
 8002552:	77fb      	strb	r3, [r7, #31]
 8002554:	e07d      	b.n	8002652 <SocCalculation+0x142>
    {
        if(Ocv_Value < OcvTable[i])
 8002556:	7ffb      	ldrb	r3, [r7, #31]
 8002558:	4a47      	ldr	r2, [pc, #284]	; (8002678 <SocCalculation+0x168>)
 800255a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd ff50 	bl	8000404 <__aeabi_i2d>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800256c:	f7fe fa26 	bl	80009bc <__aeabi_dcmplt>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d06a      	beq.n	800264c <SocCalculation+0x13c>
        {
            if(i==0)
 8002576:	7ffb      	ldrb	r3, [r7, #31]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10f      	bne.n	800259c <SocCalculation+0x8c>
            {
                Buffer_Ocv = OcvTable[0];
 800257c:	4b3e      	ldr	r3, [pc, #248]	; (8002678 <SocCalculation+0x168>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fd ff2f 	bl	80003e4 <__aeabi_ui2d>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	e9c7 2302 	strd	r2, r3, [r7, #8]
                Soc_Value = 0;
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	e9c7 2304 	strd	r2, r3, [r7, #16]
            else
            {
            	Buffer_Ocv = OcvTable[0];
            	Soc_Value = 0;
            }
            break;
 800259a:	e05e      	b.n	800265a <SocCalculation+0x14a>
            else if(i < 20)
 800259c:	7ffb      	ldrb	r3, [r7, #31]
 800259e:	2b13      	cmp	r3, #19
 80025a0:	d844      	bhi.n	800262c <SocCalculation+0x11c>
                Buffer_Ocv = (OcvTable[i] - OcvTable[i-1]);
 80025a2:	7ffb      	ldrb	r3, [r7, #31]
 80025a4:	4a34      	ldr	r2, [pc, #208]	; (8002678 <SocCalculation+0x168>)
 80025a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025aa:	4619      	mov	r1, r3
 80025ac:	7ffb      	ldrb	r3, [r7, #31]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	4a31      	ldr	r2, [pc, #196]	; (8002678 <SocCalculation+0x168>)
 80025b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b6:	1acb      	subs	r3, r1, r3
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fd ff23 	bl	8000404 <__aeabi_i2d>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
                Soc_Value = (i-1)*5+(5/Buffer_Ocv*(-OcvTable[i-1]+Ocv_Value));
 80025c6:	7ffb      	ldrb	r3, [r7, #31]
 80025c8:	1e5a      	subs	r2, r3, #1
 80025ca:	4613      	mov	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4413      	add	r3, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ff17 	bl	8000404 <__aeabi_i2d>
 80025d6:	4604      	mov	r4, r0
 80025d8:	460d      	mov	r5, r1
 80025da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025de:	f04f 0000 	mov.w	r0, #0
 80025e2:	4926      	ldr	r1, [pc, #152]	; (800267c <SocCalculation+0x16c>)
 80025e4:	f7fe f8a2 	bl	800072c <__aeabi_ddiv>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4690      	mov	r8, r2
 80025ee:	4699      	mov	r9, r3
 80025f0:	7ffb      	ldrb	r3, [r7, #31]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	4a20      	ldr	r2, [pc, #128]	; (8002678 <SocCalculation+0x168>)
 80025f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025fa:	425b      	negs	r3, r3
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ff01 	bl	8000404 <__aeabi_i2d>
 8002602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002606:	f7fd fdb1 	bl	800016c <__adddf3>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4640      	mov	r0, r8
 8002610:	4649      	mov	r1, r9
 8002612:	f7fd ff61 	bl	80004d8 <__aeabi_dmul>
 8002616:	4602      	mov	r2, r0
 8002618:	460b      	mov	r3, r1
 800261a:	4620      	mov	r0, r4
 800261c:	4629      	mov	r1, r5
 800261e:	f7fd fda5 	bl	800016c <__adddf3>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	e9c7 2304 	strd	r2, r3, [r7, #16]
            break;
 800262a:	e016      	b.n	800265a <SocCalculation+0x14a>
            	Buffer_Ocv = OcvTable[0];
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <SocCalculation+0x168>)
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd fed7 	bl	80003e4 <__aeabi_ui2d>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	e9c7 2302 	strd	r2, r3, [r7, #8]
            	Soc_Value = 0;
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9c7 2304 	strd	r2, r3, [r7, #16]
            break;
 800264a:	e006      	b.n	800265a <SocCalculation+0x14a>
    for(i=0;i<21;i++)
 800264c:	7ffb      	ldrb	r3, [r7, #31]
 800264e:	3301      	adds	r3, #1
 8002650:	77fb      	strb	r3, [r7, #31]
 8002652:	7ffb      	ldrb	r3, [r7, #31]
 8002654:	2b14      	cmp	r3, #20
 8002656:	f67f af7e 	bls.w	8002556 <SocCalculation+0x46>
        }
    }

    SOC_Init = Soc_Value;
 800265a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800265e:	f7fe f9d5 	bl	8000a0c <__aeabi_d2uiz>
 8002662:	4603      	mov	r3, r0
 8002664:	b29a      	uxth	r2, r3
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <SocCalculation+0x170>)
 8002668:	801a      	strh	r2, [r3, #0]
}
 800266a:	bf00      	nop
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002674:	20000498 	.word	0x20000498
 8002678:	20000000 	.word	0x20000000
 800267c:	40140000 	.word	0x40140000
 8002680:	200000dc 	.word	0x200000dc

08002684 <Setup_uart_default>:

#include "main.h"

void Setup_uart_default(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
	g_uPrint_state = 0;
 8002688:	4b22      	ldr	r3, [pc, #136]	; (8002714 <Setup_uart_default+0x90>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
//uart1
	g_uUart1_Rx_head = 0;
 800268e:	4b22      	ldr	r3, [pc, #136]	; (8002718 <Setup_uart_default+0x94>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
	g_uUart1_Rx_tail = 0;
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <Setup_uart_default+0x98>)
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
	g_uUart1_Rx_now = 0;
 800269a:	4b21      	ldr	r3, [pc, #132]	; (8002720 <Setup_uart_default+0x9c>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
	g_uUart1_Rx_prev = 0;
 80026a0:	4b20      	ldr	r3, [pc, #128]	; (8002724 <Setup_uart_default+0xa0>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
	g_uUart1_Rx_Flag = 0;
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <Setup_uart_default+0xa4>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
	memset(g_uUart1_Rx_buffer,0x00, sizeof(g_uUart1_Rx_buffer));
 80026ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026b0:	2100      	movs	r1, #0
 80026b2:	481e      	ldr	r0, [pc, #120]	; (800272c <Setup_uart_default+0xa8>)
 80026b4:	f009 feb2 	bl	800c41c <memset>
	memset(g_uUart1_Rx_Cmd,0x00, sizeof(g_uUart1_Rx_Cmd));
 80026b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026bc:	2100      	movs	r1, #0
 80026be:	481c      	ldr	r0, [pc, #112]	; (8002730 <Setup_uart_default+0xac>)
 80026c0:	f009 feac 	bl	800c41c <memset>
	memset(g_uUart1_Tx_Cmd,0x00, sizeof(g_uUart1_Tx_Cmd));
 80026c4:	2214      	movs	r2, #20
 80026c6:	2100      	movs	r1, #0
 80026c8:	481a      	ldr	r0, [pc, #104]	; (8002734 <Setup_uart_default+0xb0>)
 80026ca:	f009 fea7 	bl	800c41c <memset>
//uart2
	g_uUart2_Rx_head = 0;
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <Setup_uart_default+0xb4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
	g_uUart2_Rx_tail = 0;
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <Setup_uart_default+0xb8>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
	g_uUart2_Rx_now = 0;
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <Setup_uart_default+0xbc>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
	g_uUart2_Rx_prev = 0;
 80026e0:	4b18      	ldr	r3, [pc, #96]	; (8002744 <Setup_uart_default+0xc0>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
	g_uUart2_Rx_Flag = 0;
 80026e6:	4b18      	ldr	r3, [pc, #96]	; (8002748 <Setup_uart_default+0xc4>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
	memset(g_uUart2_Rx_buffer,0x00, sizeof(g_uUart2_Rx_buffer));
 80026ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026f0:	2100      	movs	r1, #0
 80026f2:	4816      	ldr	r0, [pc, #88]	; (800274c <Setup_uart_default+0xc8>)
 80026f4:	f009 fe92 	bl	800c41c <memset>
	memset(g_uUart2_Rx_Cmd,0x00, sizeof(g_uUart2_Rx_Cmd));
 80026f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026fc:	2100      	movs	r1, #0
 80026fe:	4814      	ldr	r0, [pc, #80]	; (8002750 <Setup_uart_default+0xcc>)
 8002700:	f009 fe8c 	bl	800c41c <memset>
	memset(g_uUart2_Tx_Cmd,0x00, sizeof(g_uUart2_Tx_Cmd));
 8002704:	2214      	movs	r2, #20
 8002706:	2100      	movs	r1, #0
 8002708:	4812      	ldr	r0, [pc, #72]	; (8002754 <Setup_uart_default+0xd0>)
 800270a:	f009 fe87 	bl	800c41c <memset>
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000496 	.word	0x20000496
 8002718:	20000497 	.word	0x20000497
 800271c:	20000d70 	.word	0x20000d70
 8002720:	200011e7 	.word	0x200011e7
 8002724:	20000f6c 	.word	0x20000f6c
 8002728:	20000b10 	.word	0x20000b10
 800272c:	20000a10 	.word	0x20000a10
 8002730:	20000238 	.word	0x20000238
 8002734:	200011b4 	.word	0x200011b4
 8002738:	200009d8 	.word	0x200009d8
 800273c:	20000390 	.word	0x20000390
 8002740:	200011e5 	.word	0x200011e5
 8002744:	20000d44 	.word	0x20000d44
 8002748:	200011e4 	.word	0x200011e4
 800274c:	20000f8c 	.word	0x20000f8c
 8002750:	20000d78 	.word	0x20000d78
 8002754:	2000119c 	.word	0x2000119c

08002758 <Uart1_Cmd_check>:

void Uart1_Cmd_check(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0
	static uint8_t flag_cmd;

	while(g_uUart1_Rx_head != g_uUart1_Rx_tail)
 800275c:	e089      	b.n	8002872 <Uart1_Cmd_check+0x11a>
	{
		if(flag_cmd)
 800275e:	4b4a      	ldr	r3, [pc, #296]	; (8002888 <Uart1_Cmd_check+0x130>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d077      	beq.n	8002856 <Uart1_Cmd_check+0xfe>
		{
			flag_cmd = false;
 8002766:	4b48      	ldr	r3, [pc, #288]	; (8002888 <Uart1_Cmd_check+0x130>)
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
			switch(g_uUart1_Rx_buffer[g_uUart1_Rx_tail++])
 800276c:	4b47      	ldr	r3, [pc, #284]	; (800288c <Uart1_Cmd_check+0x134>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	b2d1      	uxtb	r1, r2
 8002774:	4a45      	ldr	r2, [pc, #276]	; (800288c <Uart1_Cmd_check+0x134>)
 8002776:	7011      	strb	r1, [r2, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	4b45      	ldr	r3, [pc, #276]	; (8002890 <Uart1_Cmd_check+0x138>)
 800277c:	5c9b      	ldrb	r3, [r3, r2]
 800277e:	3b02      	subs	r3, #2
 8002780:	2b05      	cmp	r3, #5
 8002782:	d87e      	bhi.n	8002882 <Uart1_Cmd_check+0x12a>
 8002784:	a201      	add	r2, pc, #4	; (adr r2, 800278c <Uart1_Cmd_check+0x34>)
 8002786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278a:	bf00      	nop
 800278c:	080027a5 	.word	0x080027a5
 8002790:	080027cd 	.word	0x080027cd
 8002794:	08002883 	.word	0x08002883
 8002798:	080027f5 	.word	0x080027f5
 800279c:	0800281d 	.word	0x0800281d
 80027a0:	08002845 	.word	0x08002845
			{
			case 0x02:	// Ex-Charge Relay
				//if(IS_EX_CHARGING_RELAY_CHECK)
				if(TIM3->CCR2)
 80027a4:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <Uart1_Cmd_check+0x13c>)
 80027a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d007      	beq.n	80027bc <Uart1_Cmd_check+0x64>
				{
					PWM_Toggle_Relay(PWM_EX_CHARGE, OFF);
 80027ac:	2100      	movs	r1, #0
 80027ae:	2004      	movs	r0, #4
 80027b0:	f003 f986 	bl	8005ac0 <PWM_Toggle_Relay>
					TIM3->CCR2 = 0;
 80027b4:	4b37      	ldr	r3, [pc, #220]	; (8002894 <Uart1_Cmd_check+0x13c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	639a      	str	r2, [r3, #56]	; 0x38
 80027ba:	e003      	b.n	80027c4 <Uart1_Cmd_check+0x6c>
				}
				else
					PWM_Toggle_Relay(PWM_EX_CHARGE, ON);
 80027bc:	2101      	movs	r1, #1
 80027be:	2004      	movs	r0, #4
 80027c0:	f003 f97e 	bl	8005ac0 <PWM_Toggle_Relay>

				#if defined(DEBUG_SERIAL) && defined(DEBUG_SERIAL_TEST_BSH)
				printf("Ex-Charge Relay Cmd\r\n");
 80027c4:	4834      	ldr	r0, [pc, #208]	; (8002898 <Uart1_Cmd_check+0x140>)
 80027c6:	f009 fd29 	bl	800c21c <puts>
				#endif
				break;
 80027ca:	e043      	b.n	8002854 <Uart1_Cmd_check+0xfc>
			case 0x03:	// SMPS Relay
				//if(IS_SMPS_RELAY_CHECK)
				if(TIM3->CCR3)
 80027cc:	4b31      	ldr	r3, [pc, #196]	; (8002894 <Uart1_Cmd_check+0x13c>)
 80027ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d007      	beq.n	80027e4 <Uart1_Cmd_check+0x8c>
				{
					PWM_Toggle_Relay(PWM_SMPS_CHARGE, OFF);
 80027d4:	2100      	movs	r1, #0
 80027d6:	2008      	movs	r0, #8
 80027d8:	f003 f972 	bl	8005ac0 <PWM_Toggle_Relay>
					TIM3->CCR3 = 0;
 80027dc:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <Uart1_Cmd_check+0x13c>)
 80027de:	2200      	movs	r2, #0
 80027e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80027e2:	e003      	b.n	80027ec <Uart1_Cmd_check+0x94>
				}
				else
					PWM_Toggle_Relay(PWM_SMPS_CHARGE, ON);
 80027e4:	2101      	movs	r1, #1
 80027e6:	2008      	movs	r0, #8
 80027e8:	f003 f96a 	bl	8005ac0 <PWM_Toggle_Relay>

				#if defined(DEBUG_SERIAL) && defined(DEBUG_SERIAL_TEST_BSH)
				printf("SMPS Relay Cmd\r\n");
 80027ec:	482b      	ldr	r0, [pc, #172]	; (800289c <Uart1_Cmd_check+0x144>)
 80027ee:	f009 fd15 	bl	800c21c <puts>
				#endif
				break;
 80027f2:	e02f      	b.n	8002854 <Uart1_Cmd_check+0xfc>
			case 0x05:	// Motor Relay
				//if(IS_MOTOR_RELAY_CHECK)
				if(TIM3->CCR1)
 80027f4:	4b27      	ldr	r3, [pc, #156]	; (8002894 <Uart1_Cmd_check+0x13c>)
 80027f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d007      	beq.n	800280c <Uart1_Cmd_check+0xb4>
				{
					TIM3->CCR1 = 0;
 80027fc:	4b25      	ldr	r3, [pc, #148]	; (8002894 <Uart1_Cmd_check+0x13c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	635a      	str	r2, [r3, #52]	; 0x34
					PWM_Toggle_Relay(PWM_MOTOR, OFF);
 8002802:	2100      	movs	r1, #0
 8002804:	2000      	movs	r0, #0
 8002806:	f003 f95b 	bl	8005ac0 <PWM_Toggle_Relay>
 800280a:	e003      	b.n	8002814 <Uart1_Cmd_check+0xbc>
				}
				else
					PWM_Toggle_Relay(PWM_MOTOR, ON);
 800280c:	2101      	movs	r1, #1
 800280e:	2000      	movs	r0, #0
 8002810:	f003 f956 	bl	8005ac0 <PWM_Toggle_Relay>

				#if defined(DEBUG_SERIAL) && defined(DEBUG_SERIAL_TEST_BSH)
				printf("Motor Relay Cmd\r\n");
 8002814:	4822      	ldr	r0, [pc, #136]	; (80028a0 <Uart1_Cmd_check+0x148>)
 8002816:	f009 fd01 	bl	800c21c <puts>
				#endif
				break;
 800281a:	e01b      	b.n	8002854 <Uart1_Cmd_check+0xfc>
			case 0x06:
				TIM3->CCR1 = TIM3->CCR2 = TIM3->CCR3 = 0;
 800281c:	4a1d      	ldr	r2, [pc, #116]	; (8002894 <Uart1_Cmd_check+0x13c>)
 800281e:	2300      	movs	r3, #0
 8002820:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002822:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <Uart1_Cmd_check+0x13c>)
 8002824:	6393      	str	r3, [r2, #56]	; 0x38
 8002826:	4a1b      	ldr	r2, [pc, #108]	; (8002894 <Uart1_Cmd_check+0x13c>)
 8002828:	6353      	str	r3, [r2, #52]	; 0x34
				PWM_Toggle_Relay(PWM_EX_CHARGE, OFF);
 800282a:	2100      	movs	r1, #0
 800282c:	2004      	movs	r0, #4
 800282e:	f003 f947 	bl	8005ac0 <PWM_Toggle_Relay>
				PWM_Toggle_Relay(PWM_SMPS_CHARGE, OFF);
 8002832:	2100      	movs	r1, #0
 8002834:	2008      	movs	r0, #8
 8002836:	f003 f943 	bl	8005ac0 <PWM_Toggle_Relay>
				PWM_Toggle_Relay(PWM_MOTOR, OFF);
 800283a:	2100      	movs	r1, #0
 800283c:	2000      	movs	r0, #0
 800283e:	f003 f93f 	bl	8005ac0 <PWM_Toggle_Relay>
				break;
 8002842:	e007      	b.n	8002854 <Uart1_Cmd_check+0xfc>
			case 0x07:
				TIM3->CCR4 = 100;
 8002844:	4b13      	ldr	r3, [pc, #76]	; (8002894 <Uart1_Cmd_check+0x13c>)
 8002846:	2264      	movs	r2, #100	; 0x64
 8002848:	641a      	str	r2, [r3, #64]	; 0x40
				HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800284a:	210c      	movs	r1, #12
 800284c:	4815      	ldr	r0, [pc, #84]	; (80028a4 <Uart1_Cmd_check+0x14c>)
 800284e:	f007 fe7f 	bl	800a550 <HAL_TIM_PWM_Start>
				break;
 8002852:	bf00      	nop
			}
			break;
 8002854:	e015      	b.n	8002882 <Uart1_Cmd_check+0x12a>
		}
		else
		{
			if(g_uUart1_Rx_buffer[g_uUart1_Rx_tail++] == 0x55)
 8002856:	4b0d      	ldr	r3, [pc, #52]	; (800288c <Uart1_Cmd_check+0x134>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	b2d1      	uxtb	r1, r2
 800285e:	4a0b      	ldr	r2, [pc, #44]	; (800288c <Uart1_Cmd_check+0x134>)
 8002860:	7011      	strb	r1, [r2, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <Uart1_Cmd_check+0x138>)
 8002866:	5c9b      	ldrb	r3, [r3, r2]
 8002868:	2b55      	cmp	r3, #85	; 0x55
 800286a:	d102      	bne.n	8002872 <Uart1_Cmd_check+0x11a>
			{
				flag_cmd = true;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <Uart1_Cmd_check+0x130>)
 800286e:	2201      	movs	r2, #1
 8002870:	701a      	strb	r2, [r3, #0]
	while(g_uUart1_Rx_head != g_uUart1_Rx_tail)
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <Uart1_Cmd_check+0x150>)
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <Uart1_Cmd_check+0x134>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	f47f af6f 	bne.w	800275e <Uart1_Cmd_check+0x6>
		break;
	}
	g_uUart1_Rx_Flag = 0;
	memset(g_uUart1_Rx_Cmd, 0x00, sizeof(g_uUart1_Rx_Cmd));
#endif
}
 8002880:	e000      	b.n	8002884 <Uart1_Cmd_check+0x12c>
			break;
 8002882:	bf00      	nop
}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	200000de 	.word	0x200000de
 800288c:	20000d70 	.word	0x20000d70
 8002890:	20000a10 	.word	0x20000a10
 8002894:	40000400 	.word	0x40000400
 8002898:	0800d408 	.word	0x0800d408
 800289c:	0800d420 	.word	0x0800d420
 80028a0:	0800d430 	.word	0x0800d430
 80028a4:	20001428 	.word	0x20001428
 80028a8:	20000497 	.word	0x20000497

080028ac <Uart2_Cmd_check>:

void Uart2_Cmd_check(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
	switch(g_uUart2_Rx_Cmd[0])
 80028b0:	4b37      	ldr	r3, [pc, #220]	; (8002990 <Uart2_Cmd_check+0xe4>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	3b43      	subs	r3, #67	; 0x43
 80028b6:	2b10      	cmp	r3, #16
 80028b8:	d859      	bhi.n	800296e <Uart2_Cmd_check+0xc2>
 80028ba:	a201      	add	r2, pc, #4	; (adr r2, 80028c0 <Uart2_Cmd_check+0x14>)
 80028bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c0:	0800292f 	.word	0x0800292f
 80028c4:	0800294f 	.word	0x0800294f
 80028c8:	0800296f 	.word	0x0800296f
 80028cc:	0800296f 	.word	0x0800296f
 80028d0:	0800296f 	.word	0x0800296f
 80028d4:	0800296f 	.word	0x0800296f
 80028d8:	0800296f 	.word	0x0800296f
 80028dc:	0800296f 	.word	0x0800296f
 80028e0:	0800296f 	.word	0x0800296f
 80028e4:	0800296f 	.word	0x0800296f
 80028e8:	0800296f 	.word	0x0800296f
 80028ec:	0800296f 	.word	0x0800296f
 80028f0:	0800296f 	.word	0x0800296f
 80028f4:	08002917 	.word	0x08002917
 80028f8:	0800296f 	.word	0x0800296f
 80028fc:	0800296f 	.word	0x0800296f
 8002900:	08002905 	.word	0x08002905
	{
	case 0x53:	//'S'	//sell balance
		Adbms6817_discharge_cell_pwm(g_uUart2_Rx_Cmd[1],	g_uUart2_Rx_Cmd[2]);
 8002904:	4b22      	ldr	r3, [pc, #136]	; (8002990 <Uart2_Cmd_check+0xe4>)
 8002906:	785b      	ldrb	r3, [r3, #1]
 8002908:	4a21      	ldr	r2, [pc, #132]	; (8002990 <Uart2_Cmd_check+0xe4>)
 800290a:	7892      	ldrb	r2, [r2, #2]
 800290c:	4611      	mov	r1, r2
 800290e:	4618      	mov	r0, r3
 8002910:	f000 ff14 	bl	800373c <Adbms6817_discharge_cell_pwm>
		break;
 8002914:	e030      	b.n	8002978 <Uart2_Cmd_check+0xcc>
	case 0x50:	//'P'	//print info
		if(g_uUart2_Rx_Cmd[1] == '1') 	g_uPrint_state = 1;
 8002916:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <Uart2_Cmd_check+0xe4>)
 8002918:	785b      	ldrb	r3, [r3, #1]
 800291a:	2b31      	cmp	r3, #49	; 0x31
 800291c:	d103      	bne.n	8002926 <Uart2_Cmd_check+0x7a>
 800291e:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <Uart2_Cmd_check+0xe8>)
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
		else						g_uPrint_state = 0;
		break;
 8002924:	e028      	b.n	8002978 <Uart2_Cmd_check+0xcc>
		else						g_uPrint_state = 0;
 8002926:	4b1b      	ldr	r3, [pc, #108]	; (8002994 <Uart2_Cmd_check+0xe8>)
 8002928:	2200      	movs	r2, #0
 800292a:	701a      	strb	r2, [r3, #0]
		break;
 800292c:	e024      	b.n	8002978 <Uart2_Cmd_check+0xcc>
	case 0x43:	//'C'
		if(g_uUart2_Rx_Cmd[1] == 0x30)
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <Uart2_Cmd_check+0xe4>)
 8002930:	785b      	ldrb	r3, [r3, #1]
 8002932:	2b30      	cmp	r3, #48	; 0x30
 8002934:	d103      	bne.n	800293e <Uart2_Cmd_check+0x92>
		{
			Charge_voltage_open(0);//off
 8002936:	2000      	movs	r0, #0
 8002938:	f003 f848 	bl	80059cc <Charge_voltage_open>
		{
			Charge_voltage_open(1);//on
			//printf("Charge_voltage on!\r\n");
		}

		break;
 800293c:	e019      	b.n	8002972 <Uart2_Cmd_check+0xc6>
		else if(g_uUart2_Rx_Cmd[1] == 0x31)
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <Uart2_Cmd_check+0xe4>)
 8002940:	785b      	ldrb	r3, [r3, #1]
 8002942:	2b31      	cmp	r3, #49	; 0x31
 8002944:	d115      	bne.n	8002972 <Uart2_Cmd_check+0xc6>
			Charge_voltage_open(1);//on
 8002946:	2001      	movs	r0, #1
 8002948:	f003 f840 	bl	80059cc <Charge_voltage_open>
		break;
 800294c:	e011      	b.n	8002972 <Uart2_Cmd_check+0xc6>
	case 0x44:	//'D'
		if(g_uUart2_Rx_Cmd[1] == 0x30)
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <Uart2_Cmd_check+0xe4>)
 8002950:	785b      	ldrb	r3, [r3, #1]
 8002952:	2b30      	cmp	r3, #48	; 0x30
 8002954:	d103      	bne.n	800295e <Uart2_Cmd_check+0xb2>
		{
			Discharge_voltage_open(0);//off
 8002956:	2000      	movs	r0, #0
 8002958:	f003 f84a 	bl	80059f0 <Discharge_voltage_open>
		else if(g_uUart2_Rx_Cmd[1] == 0x31)
		{
			Discharge_voltage_open(1);//on
			//printf("Discharge_voltage on!\r\n");
		}
		break;
 800295c:	e00b      	b.n	8002976 <Uart2_Cmd_check+0xca>
		else if(g_uUart2_Rx_Cmd[1] == 0x31)
 800295e:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <Uart2_Cmd_check+0xe4>)
 8002960:	785b      	ldrb	r3, [r3, #1]
 8002962:	2b31      	cmp	r3, #49	; 0x31
 8002964:	d107      	bne.n	8002976 <Uart2_Cmd_check+0xca>
			Discharge_voltage_open(1);//on
 8002966:	2001      	movs	r0, #1
 8002968:	f003 f842 	bl	80059f0 <Discharge_voltage_open>
		break;
 800296c:	e003      	b.n	8002976 <Uart2_Cmd_check+0xca>
	default:
		break;
 800296e:	bf00      	nop
 8002970:	e002      	b.n	8002978 <Uart2_Cmd_check+0xcc>
		break;
 8002972:	bf00      	nop
 8002974:	e000      	b.n	8002978 <Uart2_Cmd_check+0xcc>
		break;
 8002976:	bf00      	nop
	}

	g_uUart2_Rx_Flag = 0;
 8002978:	4b07      	ldr	r3, [pc, #28]	; (8002998 <Uart2_Cmd_check+0xec>)
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
	memset(g_uUart2_Rx_Cmd, 0x00, sizeof(g_uUart2_Rx_Cmd));
 800297e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002982:	2100      	movs	r1, #0
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <Uart2_Cmd_check+0xe4>)
 8002986:	f009 fd49 	bl	800c41c <memset>
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000d78 	.word	0x20000d78
 8002994:	20000496 	.word	0x20000496
 8002998:	200011e4 	.word	0x200011e4

0800299c <Check_Debug_Serial>:
	//float temp = 0;
}

#if defined(DEBUG_SERIAL) && defined(DEBUG_SERIAL_TEST_BSH)
void Check_Debug_Serial(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	f5ad 6d83 	sub.w	sp, sp, #1048	; 0x418
 80029a2:	af00      	add	r7, sp, #0
	uint8_t data[NUM_OF_ADBMS6817][8], i;
	uint8_t flash_data[1024];

	while(1)
	{
		if(g_uDebug_Rx_head == g_uDebug_Rx_tail)
 80029a4:	4bd0      	ldr	r3, [pc, #832]	; (8002ce8 <Check_Debug_Serial+0x34c>)
 80029a6:	781a      	ldrb	r2, [r3, #0]
 80029a8:	4bd0      	ldr	r3, [pc, #832]	; (8002cec <Check_Debug_Serial+0x350>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	f000 820b 	beq.w	8002dc8 <Check_Debug_Serial+0x42c>
			break;

		ch = (char)g_uDebug_Rx_buffer[g_uDebug_Rx_tail++];
 80029b2:	4bce      	ldr	r3, [pc, #824]	; (8002cec <Check_Debug_Serial+0x350>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	b2d1      	uxtb	r1, r2
 80029ba:	4acc      	ldr	r2, [pc, #816]	; (8002cec <Check_Debug_Serial+0x350>)
 80029bc:	7011      	strb	r1, [r2, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	4bcb      	ldr	r3, [pc, #812]	; (8002cf0 <Check_Debug_Serial+0x354>)
 80029c2:	5c9b      	ldrb	r3, [r3, r2]
 80029c4:	f887 340f 	strb.w	r3, [r7, #1039]	; 0x40f
		Sn = ch - 0x30;
 80029c8:	f897 340f 	ldrb.w	r3, [r7, #1039]	; 0x40f
 80029cc:	3b30      	subs	r3, #48	; 0x30
 80029ce:	f887 340e 	strb.w	r3, [r7, #1038]	; 0x40e

		switch(ch)
 80029d2:	f997 340f 	ldrsb.w	r3, [r7, #1039]	; 0x40f
 80029d6:	2b38      	cmp	r3, #56	; 0x38
 80029d8:	dc4a      	bgt.n	8002a70 <Check_Debug_Serial+0xd4>
 80029da:	2b30      	cmp	r3, #48	; 0x30
 80029dc:	da4d      	bge.n	8002a7a <Check_Debug_Serial+0xde>
 80029de:	e1f2      	b.n	8002dc6 <Check_Debug_Serial+0x42a>
 80029e0:	3b53      	subs	r3, #83	; 0x53
 80029e2:	2b20      	cmp	r3, #32
 80029e4:	d8de      	bhi.n	80029a4 <Check_Debug_Serial+0x8>
 80029e6:	a201      	add	r2, pc, #4	; (adr r2, 80029ec <Check_Debug_Serial+0x50>)
 80029e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ec:	08002d8f 	.word	0x08002d8f
 80029f0:	080029a5 	.word	0x080029a5
 80029f4:	080029a5 	.word	0x080029a5
 80029f8:	080029a5 	.word	0x080029a5
 80029fc:	080029a5 	.word	0x080029a5
 8002a00:	080029a5 	.word	0x080029a5
 8002a04:	080029a5 	.word	0x080029a5
 8002a08:	080029a5 	.word	0x080029a5
 8002a0c:	080029a5 	.word	0x080029a5
 8002a10:	080029a5 	.word	0x080029a5
 8002a14:	080029a5 	.word	0x080029a5
 8002a18:	080029a5 	.word	0x080029a5
 8002a1c:	080029a5 	.word	0x080029a5
 8002a20:	080029a5 	.word	0x080029a5
 8002a24:	080029a5 	.word	0x080029a5
 8002a28:	08002b0d 	.word	0x08002b0d
 8002a2c:	080029a5 	.word	0x080029a5
 8002a30:	080029a5 	.word	0x080029a5
 8002a34:	080029a5 	.word	0x080029a5
 8002a38:	08002b7b 	.word	0x08002b7b
 8002a3c:	080029a5 	.word	0x080029a5
 8002a40:	080029a5 	.word	0x080029a5
 8002a44:	080029a5 	.word	0x080029a5
 8002a48:	080029a5 	.word	0x080029a5
 8002a4c:	080029a5 	.word	0x080029a5
 8002a50:	080029a5 	.word	0x080029a5
 8002a54:	080029a5 	.word	0x080029a5
 8002a58:	080029a5 	.word	0x080029a5
 8002a5c:	080029a5 	.word	0x080029a5
 8002a60:	080029a5 	.word	0x080029a5
 8002a64:	080029a5 	.word	0x080029a5
 8002a68:	08002c6d 	.word	0x08002c6d
 8002a6c:	08002cbb 	.word	0x08002cbb
 8002a70:	2b73      	cmp	r3, #115	; 0x73
 8002a72:	dc97      	bgt.n	80029a4 <Check_Debug_Serial+0x8>
 8002a74:	2b53      	cmp	r3, #83	; 0x53
 8002a76:	dab3      	bge.n	80029e0 <Check_Debug_Serial+0x44>
 8002a78:	e1a5      	b.n	8002dc6 <Check_Debug_Serial+0x42a>
		case '5':
		case '6':
		case '7':
		case '8':
			//Adbms6817_rdcfg(NUM_OF_ADBMS6817,REG_GRP_B,data);
			if(Adbms6817.discharge_state[Sn] == TRUE)
 8002a7a:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
 8002a7e:	4a9d      	ldr	r2, [pc, #628]	; (8002cf4 <Check_Debug_Serial+0x358>)
 8002a80:	4413      	add	r3, r2
 8002a82:	f893 3426 	ldrb.w	r3, [r3, #1062]	; 0x426
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d10d      	bne.n	8002aa6 <Check_Debug_Serial+0x10a>
			{
#ifdef USE_CELL_BALANCING_CONTINUOUSLY
				Adbms6817_discharge_cell_continuously(Sn, FALSE);
 8002a8a:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 fdd9 	bl	8003648 <Adbms6817_discharge_cell_continuously>
#else
				Adbms6817_discharge_cell_pwm(Sn, FALSE);
#endif
				Adbms6817.discharge_state[Sn] = FALSE;
 8002a96:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
 8002a9a:	4a96      	ldr	r2, [pc, #600]	; (8002cf4 <Check_Debug_Serial+0x358>)
 8002a9c:	4413      	add	r3, r2
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8002aa4:	e00c      	b.n	8002ac0 <Check_Debug_Serial+0x124>
				//Adbms6817_discharge_cell(ch, FALSE);
			}
			else
			{
#ifdef USE_CELL_BALANCING_CONTINUOUSLY
				Adbms6817_discharge_cell_continuously(Sn, TRUE);
 8002aa6:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
 8002aaa:	2101      	movs	r1, #1
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fdcb 	bl	8003648 <Adbms6817_discharge_cell_continuously>
#else
				Adbms6817_discharge_cell_pwm(Sn, TRUE);
#endif
				Adbms6817.discharge_state[Sn] = TRUE;
 8002ab2:	f897 340e 	ldrb.w	r3, [r7, #1038]	; 0x40e
 8002ab6:	4a8f      	ldr	r2, [pc, #572]	; (8002cf4 <Check_Debug_Serial+0x358>)
 8002ab8:	4413      	add	r3, r2
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
			}

			Adbms6817_rdcfg(NUM_OF_ADBMS6817,REG_GRP_B,data);
 8002ac0:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	2001      	movs	r0, #1
 8002aca:	f000 fc69 	bl	80033a0 <Adbms6817_rdcfg>

			printf("Adbms6817_rdcfg : ");
 8002ace:	488a      	ldr	r0, [pc, #552]	; (8002cf8 <Check_Debug_Serial+0x35c>)
 8002ad0:	f009 fb36 	bl	800c140 <iprintf>
			for(i=0;i<7;i++)
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 8002ada:	e00f      	b.n	8002afc <Check_Debug_Serial+0x160>
			{
				printf("%02X ",data[0][i]);
 8002adc:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002ae0:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8002ae4:	443b      	add	r3, r7
 8002ae6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002aea:	4619      	mov	r1, r3
 8002aec:	4883      	ldr	r0, [pc, #524]	; (8002cfc <Check_Debug_Serial+0x360>)
 8002aee:	f009 fb27 	bl	800c140 <iprintf>
			for(i=0;i<7;i++)
 8002af2:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002af6:	3301      	adds	r3, #1
 8002af8:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 8002afc:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002b00:	2b06      	cmp	r3, #6
 8002b02:	d9eb      	bls.n	8002adc <Check_Debug_Serial+0x140>
			}
			printf("\r\n");
 8002b04:	487e      	ldr	r0, [pc, #504]	; (8002d00 <Check_Debug_Serial+0x364>)
 8002b06:	f009 fb89 	bl	800c21c <puts>

			break;
 8002b0a:	e15c      	b.n	8002dc6 <Check_Debug_Serial+0x42a>
		case 'b':
			if(Bms.EnableBalancing)
 8002b0c:	4b7d      	ldr	r3, [pc, #500]	; (8002d04 <Check_Debug_Serial+0x368>)
 8002b0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d029      	beq.n	8002b6a <Check_Debug_Serial+0x1ce>
			{
				printf("Cell Balancing Disable\r\n");
 8002b16:	487c      	ldr	r0, [pc, #496]	; (8002d08 <Check_Debug_Serial+0x36c>)
 8002b18:	f009 fb80 	bl	800c21c <puts>
				Bms.EnableBalancing = FALSE;
 8002b1c:	4b79      	ldr	r3, [pc, #484]	; (8002d04 <Check_Debug_Serial+0x368>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				for(i=0;i<NUM_OF_CELL;i++)
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 8002b2a:	e019      	b.n	8002b60 <Check_Debug_Serial+0x1c4>
				{
					if(Adbms6817.discharge_state[i])
 8002b2c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002b30:	4a70      	ldr	r2, [pc, #448]	; (8002cf4 <Check_Debug_Serial+0x358>)
 8002b32:	4413      	add	r3, r2
 8002b34:	f893 3426 	ldrb.w	r3, [r3, #1062]	; 0x426
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00c      	beq.n	8002b56 <Check_Debug_Serial+0x1ba>
					{
			#ifdef USE_CELL_BALANCING_CONTINUOUSLY
						Adbms6817_discharge_cell_continuously(i, FALSE);
 8002b3c:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002b40:	2100      	movs	r1, #0
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 fd80 	bl	8003648 <Adbms6817_discharge_cell_continuously>
			#endif
			#ifdef USE_CELL_BALANCING_PWM
						Adbms6817_discharge_cell_pwm(i, FALSE);
			#endif
						Adbms6817.discharge_state[i] = FALSE;
 8002b48:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002b4c:	4a69      	ldr	r2, [pc, #420]	; (8002cf4 <Check_Debug_Serial+0x358>)
 8002b4e:	4413      	add	r3, r2
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
				for(i=0;i<NUM_OF_CELL;i++)
 8002b56:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 8002b60:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002b64:	2b06      	cmp	r3, #6
 8002b66:	d9e1      	bls.n	8002b2c <Check_Debug_Serial+0x190>
			else
			{
				printf("Cell Balancing Enable\r\n");
				Bms.EnableBalancing = TRUE;
			}
			break;
 8002b68:	e12d      	b.n	8002dc6 <Check_Debug_Serial+0x42a>
				printf("Cell Balancing Enable\r\n");
 8002b6a:	4868      	ldr	r0, [pc, #416]	; (8002d0c <Check_Debug_Serial+0x370>)
 8002b6c:	f009 fb56 	bl	800c21c <puts>
				Bms.EnableBalancing = TRUE;
 8002b70:	4b64      	ldr	r3, [pc, #400]	; (8002d04 <Check_Debug_Serial+0x368>)
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			break;
 8002b78:	e125      	b.n	8002dc6 <Check_Debug_Serial+0x42a>
		case 'f':
			flash_read(0, flash_data, 1024);
 8002b7a:	1d3b      	adds	r3, r7, #4
 8002b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b80:	4619      	mov	r1, r3
 8002b82:	2000      	movs	r0, #0
 8002b84:	f003 f8ba 	bl	8005cfc <flash_read>
			flash_data[2] = 0x43;
			flash_data[3] = 0x0F;
			flash_data[4] = 0x6A;
			flash_data[5] = 0xB0;
#endif
			flash_data[0] = 'E';
 8002b88:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002b8c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002b90:	2245      	movs	r2, #69	; 0x45
 8002b92:	701a      	strb	r2, [r3, #0]
			flash_data[1] = 'N';
 8002b94:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002b98:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002b9c:	224e      	movs	r2, #78	; 0x4e
 8002b9e:	705a      	strb	r2, [r3, #1]
			flash_data[2] = 'D';
 8002ba0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002ba4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002ba8:	2244      	movs	r2, #68	; 0x44
 8002baa:	709a      	strb	r2, [r3, #2]
			flash_data[3] = '_';
 8002bac:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002bb0:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002bb4:	225f      	movs	r2, #95	; 0x5f
 8002bb6:	70da      	strb	r2, [r3, #3]
			flash_data[4] = 'O';
 8002bb8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002bbc:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002bc0:	224f      	movs	r2, #79	; 0x4f
 8002bc2:	711a      	strb	r2, [r3, #4]
			flash_data[5] = 'F';
 8002bc4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002bc8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002bcc:	2246      	movs	r2, #70	; 0x46
 8002bce:	715a      	strb	r2, [r3, #5]
			flash_data[6] = '_';
 8002bd0:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002bd4:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002bd8:	225f      	movs	r2, #95	; 0x5f
 8002bda:	719a      	strb	r2, [r3, #6]
			flash_data[7] = 'F';
 8002bdc:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002be0:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002be4:	2246      	movs	r2, #70	; 0x46
 8002be6:	71da      	strb	r2, [r3, #7]
			flash_data[8] = 'L';
 8002be8:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002bec:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002bf0:	224c      	movs	r2, #76	; 0x4c
 8002bf2:	721a      	strb	r2, [r3, #8]
			flash_data[9] = 'A';
 8002bf4:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002bf8:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002bfc:	2241      	movs	r2, #65	; 0x41
 8002bfe:	725a      	strb	r2, [r3, #9]
			flash_data[10] = 'S';
 8002c00:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002c04:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002c08:	2253      	movs	r2, #83	; 0x53
 8002c0a:	729a      	strb	r2, [r3, #10]
			flash_data[11] = 'H';
 8002c0c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002c10:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002c14:	2248      	movs	r2, #72	; 0x48
 8002c16:	72da      	strb	r2, [r3, #11]
			flash_data[12] = '_';
 8002c18:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002c1c:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002c20:	225f      	movs	r2, #95	; 0x5f
 8002c22:	731a      	strb	r2, [r3, #12]
			flash_data[13] = 'M';
 8002c24:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002c28:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002c2c:	224d      	movs	r2, #77	; 0x4d
 8002c2e:	735a      	strb	r2, [r3, #13]
			flash_data[14] = 'E';
 8002c30:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002c34:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002c38:	2245      	movs	r2, #69	; 0x45
 8002c3a:	739a      	strb	r2, [r3, #14]
			flash_data[15] = 'M';
 8002c3c:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002c40:	f2a3 4314 	subw	r3, r3, #1044	; 0x414
 8002c44:	224d      	movs	r2, #77	; 0x4d
 8002c46:	73da      	strb	r2, [r3, #15]

			flash_write(0x03F0, flash_data, 16);
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	2210      	movs	r2, #16
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8002c52:	f003 f877 	bl	8005d44 <flash_write>
			printf("write done\r\n");
 8002c56:	482e      	ldr	r0, [pc, #184]	; (8002d10 <Check_Debug_Serial+0x374>)
 8002c58:	f009 fae0 	bl	800c21c <puts>
			flash_read(0, flash_data, 1024);
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c62:	4619      	mov	r1, r3
 8002c64:	2000      	movs	r0, #0
 8002c66:	f003 f849 	bl	8005cfc <flash_read>
			break;
 8002c6a:	e0ac      	b.n	8002dc6 <Check_Debug_Serial+0x42a>
		case 'r':
			flash_read(0x03F0, flash_data, 16);
 8002c6c:	1d3b      	adds	r3, r7, #4
 8002c6e:	2210      	movs	r2, #16
 8002c70:	4619      	mov	r1, r3
 8002c72:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
 8002c76:	f003 f841 	bl	8005cfc <flash_read>
			printf("flash_data : ");
 8002c7a:	4826      	ldr	r0, [pc, #152]	; (8002d14 <Check_Debug_Serial+0x378>)
 8002c7c:	f009 fa60 	bl	800c140 <iprintf>
			for(int i=0;i<16;i++)
 8002c80:	2300      	movs	r3, #0
 8002c82:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8002c86:	e010      	b.n	8002caa <Check_Debug_Serial+0x30e>
			{
				printf("%02X ",flash_data[i]);
 8002c88:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8002c8c:	f2a3 4214 	subw	r2, r3, #1044	; 0x414
 8002c90:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8002c94:	4413      	add	r3, r2
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4818      	ldr	r0, [pc, #96]	; (8002cfc <Check_Debug_Serial+0x360>)
 8002c9c:	f009 fa50 	bl	800c140 <iprintf>
			for(int i=0;i<16;i++)
 8002ca0:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
 8002caa:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8002cae:	2b0f      	cmp	r3, #15
 8002cb0:	ddea      	ble.n	8002c88 <Check_Debug_Serial+0x2ec>
			}
			printf("\r\n");
 8002cb2:	4813      	ldr	r0, [pc, #76]	; (8002d00 <Check_Debug_Serial+0x364>)
 8002cb4:	f009 fab2 	bl	800c21c <puts>

			break;
 8002cb8:	e085      	b.n	8002dc6 <Check_Debug_Serial+0x42a>
		case 's':
			//Adbms6817_rdcfg(NUM_OF_ADBMS6817,REG_GRP_B,data);
			// update discharge_state
			for(i=0;i<7;i++)
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 8002cc0:	e036      	b.n	8002d30 <Check_Debug_Serial+0x394>
			{
				if(data[0][4] & (0x1 << i))
 8002cc2:	f897 3408 	ldrb.w	r3, [r7, #1032]	; 0x408
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002ccc:	fa42 f303 	asr.w	r3, r2, r3
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01f      	beq.n	8002d18 <Check_Debug_Serial+0x37c>
					Adbms6817.discharge_state[i] = TRUE;
 8002cd8:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002cdc:	4a05      	ldr	r2, [pc, #20]	; (8002cf4 <Check_Debug_Serial+0x358>)
 8002cde:	4413      	add	r3, r2
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8002ce6:	e01e      	b.n	8002d26 <Check_Debug_Serial+0x38a>
 8002ce8:	20001198 	.word	0x20001198
 8002cec:	20000b11 	.word	0x20000b11
 8002cf0:	20000394 	.word	0x20000394
 8002cf4:	20000498 	.word	0x20000498
 8002cf8:	0800d4a4 	.word	0x0800d4a4
 8002cfc:	0800d4b8 	.word	0x0800d4b8
 8002d00:	0800d49c 	.word	0x0800d49c
 8002d04:	20000360 	.word	0x20000360
 8002d08:	0800d4c0 	.word	0x0800d4c0
 8002d0c:	0800d4d8 	.word	0x0800d4d8
 8002d10:	0800d4f0 	.word	0x0800d4f0
 8002d14:	0800d4fc 	.word	0x0800d4fc
				else
					Adbms6817.discharge_state[i] = FALSE;
 8002d18:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002d1c:	4a2d      	ldr	r2, [pc, #180]	; (8002dd4 <Check_Debug_Serial+0x438>)
 8002d1e:	4413      	add	r3, r2
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
			for(i=0;i<7;i++)
 8002d26:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 8002d30:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d9c4      	bls.n	8002cc2 <Check_Debug_Serial+0x326>
			}
			if(data[0][5] & 0x1)
 8002d38:	f897 3409 	ldrb.w	r3, [r7, #1033]	; 0x409
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <Check_Debug_Serial+0x3b2>
			{
				Adbms6817.discharge_state[8] = TRUE;
 8002d44:	4b23      	ldr	r3, [pc, #140]	; (8002dd4 <Check_Debug_Serial+0x438>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
 8002d4c:	e003      	b.n	8002d56 <Check_Debug_Serial+0x3ba>
			}
			else
			{
				Adbms6817.discharge_state[8] = FALSE;
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <Check_Debug_Serial+0x438>)
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
			}
			for(i=0;i<8;i++)
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 8002d5c:	e00f      	b.n	8002d7e <Check_Debug_Serial+0x3e2>
			{
				printf("%02X ",data[0][i]);
 8002d5e:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002d62:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8002d66:	443b      	add	r3, r7
 8002d68:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	481a      	ldr	r0, [pc, #104]	; (8002dd8 <Check_Debug_Serial+0x43c>)
 8002d70:	f009 f9e6 	bl	800c140 <iprintf>
			for(i=0;i<8;i++)
 8002d74:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002d78:	3301      	adds	r3, #1
 8002d7a:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 8002d7e:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002d82:	2b07      	cmp	r3, #7
 8002d84:	d9eb      	bls.n	8002d5e <Check_Debug_Serial+0x3c2>
			}
			printf("\r\n");
 8002d86:	4815      	ldr	r0, [pc, #84]	; (8002ddc <Check_Debug_Serial+0x440>)
 8002d88:	f009 fa48 	bl	800c21c <puts>
			break;
 8002d8c:	e01b      	b.n	8002dc6 <Check_Debug_Serial+0x42a>
		case 'S':
			for(i=0;i<9;i++)
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 8002d94:	e00e      	b.n	8002db4 <Check_Debug_Serial+0x418>
			{
				printf("%X ",Adbms6817.discharge_state[i]);
 8002d96:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002d9a:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <Check_Debug_Serial+0x438>)
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f893 3426 	ldrb.w	r3, [r3, #1062]	; 0x426
 8002da2:	4619      	mov	r1, r3
 8002da4:	480e      	ldr	r0, [pc, #56]	; (8002de0 <Check_Debug_Serial+0x444>)
 8002da6:	f009 f9cb 	bl	800c140 <iprintf>
			for(i=0;i<9;i++)
 8002daa:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002dae:	3301      	adds	r3, #1
 8002db0:	f887 3417 	strb.w	r3, [r7, #1047]	; 0x417
 8002db4:	f897 3417 	ldrb.w	r3, [r7, #1047]	; 0x417
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d9ec      	bls.n	8002d96 <Check_Debug_Serial+0x3fa>
			}
			printf("\r\n");
 8002dbc:	4807      	ldr	r0, [pc, #28]	; (8002ddc <Check_Debug_Serial+0x440>)
 8002dbe:	f009 fa2d 	bl	800c21c <puts>
			break;
 8002dc2:	bf00      	nop
 8002dc4:	e5ee      	b.n	80029a4 <Check_Debug_Serial+0x8>
		if(g_uDebug_Rx_head == g_uDebug_Rx_tail)
 8002dc6:	e5ed      	b.n	80029a4 <Check_Debug_Serial+0x8>
			break;
 8002dc8:	bf00      	nop


		}

	}
}
 8002dca:	bf00      	nop
 8002dcc:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	20000498 	.word	0x20000498
 8002dd8:	0800d4b8 	.word	0x0800d4b8
 8002ddc:	0800d49c 	.word	0x0800d49c
 8002de0:	0800d50c 	.word	0x0800d50c

08002de4 <Setup_uart485_default>:

#include <main.h>

void Setup_uart485_default(void)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
//uart3
	g_u485_Rx_head = 0;
 8002de8:	4b16      	ldr	r3, [pc, #88]	; (8002e44 <Setup_uart485_default+0x60>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	701a      	strb	r2, [r3, #0]
	g_u485_Rx_tail = 0;
 8002dee:	4b16      	ldr	r3, [pc, #88]	; (8002e48 <Setup_uart485_default+0x64>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]

	g_u485_Rx_now = 0;
 8002df4:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <Setup_uart485_default+0x68>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
	g_u485_Rx_prev = 0;
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <Setup_uart485_default+0x6c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
	g_u485_Rx_Flag = 0;
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <Setup_uart485_default+0x70>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	701a      	strb	r2, [r3, #0]

	memset(g_u485_Rx_buffer,0x00, sizeof(g_u485_Rx_buffer));
 8002e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4812      	ldr	r0, [pc, #72]	; (8002e58 <Setup_uart485_default+0x74>)
 8002e0e:	f009 fb05 	bl	800c41c <memset>
	memset(g_u485_Rx_Cmd,0x00, sizeof(g_u485_Rx_Cmd));
 8002e12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e16:	2100      	movs	r1, #0
 8002e18:	4810      	ldr	r0, [pc, #64]	; (8002e5c <Setup_uart485_default+0x78>)
 8002e1a:	f009 faff 	bl	800c41c <memset>
	memset(g_u485_Tx_Cmd,0x00, sizeof(g_u485_Tx_Cmd));
 8002e1e:	2214      	movs	r2, #20
 8002e20:	2100      	movs	r1, #0
 8002e22:	480f      	ldr	r0, [pc, #60]	; (8002e60 <Setup_uart485_default+0x7c>)
 8002e24:	f009 fafa 	bl	800c41c <memset>

	HAL_GPIO_WritePin(RS485_nRE_GPIO_Port, RS485_nRE_Pin, GPIO_PIN_RESET);
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e2e:	480d      	ldr	r0, [pc, #52]	; (8002e64 <Setup_uart485_default+0x80>)
 8002e30:	f005 fe5f 	bl	8008af2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 8002e34:	2200      	movs	r2, #0
 8002e36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e3a:	480a      	ldr	r0, [pc, #40]	; (8002e64 <Setup_uart485_default+0x80>)
 8002e3c:	f005 fe59 	bl	8008af2 <HAL_GPIO_WritePin>

}
 8002e40:	bf00      	nop
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	200011b0 	.word	0x200011b0
 8002e48:	200011e6 	.word	0x200011e6
 8002e4c:	2000108c 	.word	0x2000108c
 8002e50:	20000f88 	.word	0x20000f88
 8002e54:	20000b12 	.word	0x20000b12
 8002e58:	20001090 	.word	0x20001090
 8002e5c:	200008d8 	.word	0x200008d8
 8002e60:	20000c2c 	.word	0x20000c2c
 8002e64:	40010c00 	.word	0x40010c00

08002e68 <U3_485_Cmd_check>:

void U3_485_Cmd_check(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
	switch(g_u485_Rx_Cmd[0])
 8002e6c:	4b09      	ldr	r3, [pc, #36]	; (8002e94 <U3_485_Cmd_check+0x2c>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <U3_485_Cmd_check+0x12>
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d002      	beq.n	8002e7e <U3_485_Cmd_check+0x16>
	case 0x00:
		break;
	case 0x01:
		break;
	default:
		break;
 8002e78:	e002      	b.n	8002e80 <U3_485_Cmd_check+0x18>
		break;
 8002e7a:	bf00      	nop
 8002e7c:	e000      	b.n	8002e80 <U3_485_Cmd_check+0x18>
		break;
 8002e7e:	bf00      	nop
	}

	U3_485_send_data();
 8002e80:	f000 f80a 	bl	8002e98 <U3_485_send_data>

	memset(g_u485_Rx_Cmd, 0x00, sizeof(g_u485_Rx_Cmd));
 8002e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e88:	2100      	movs	r1, #0
 8002e8a:	4802      	ldr	r0, [pc, #8]	; (8002e94 <U3_485_Cmd_check+0x2c>)
 8002e8c:	f009 fac6 	bl	800c41c <memset>
}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	200008d8 	.word	0x200008d8

08002e98 <U3_485_send_data>:

void U3_485_send_data(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RS485_nRE_GPIO_Port, RS485_nRE_Pin, GPIO_PIN_SET);
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ea2:	4810      	ldr	r0, [pc, #64]	; (8002ee4 <U3_485_send_data+0x4c>)
 8002ea4:	f005 fe25 	bl	8008af2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_SET);
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eae:	480d      	ldr	r0, [pc, #52]	; (8002ee4 <U3_485_send_data+0x4c>)
 8002eb0:	f005 fe1f 	bl	8008af2 <HAL_GPIO_WritePin>
	//HAL_Delay(1);
	HAL_UART_Transmit(&huart3, g_u485_Rx_Cmd, sizeof(g_u485_Rx_Cmd),100 );
 8002eb4:	2364      	movs	r3, #100	; 0x64
 8002eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eba:	490b      	ldr	r1, [pc, #44]	; (8002ee8 <U3_485_send_data+0x50>)
 8002ebc:	480b      	ldr	r0, [pc, #44]	; (8002eec <U3_485_send_data+0x54>)
 8002ebe:	f008 fa67 	bl	800b390 <HAL_UART_Transmit>
	//HAL_Delay(1);
	HAL_GPIO_WritePin(RS485_DE_GPIO_Port, RS485_DE_Pin, GPIO_PIN_RESET);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ec8:	4806      	ldr	r0, [pc, #24]	; (8002ee4 <U3_485_send_data+0x4c>)
 8002eca:	f005 fe12 	bl	8008af2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RS485_nRE_GPIO_Port, RS485_nRE_Pin, GPIO_PIN_RESET);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ed4:	4803      	ldr	r0, [pc, #12]	; (8002ee4 <U3_485_send_data+0x4c>)
 8002ed6:	f005 fe0c 	bl	8008af2 <HAL_GPIO_WritePin>
	g_u485_Rx_Flag = 0;
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <U3_485_send_data+0x58>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
}
 8002ee0:	bf00      	nop
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40010c00 	.word	0x40010c00
 8002ee8:	200008d8 	.word	0x200008d8
 8002eec:	200014b8 	.word	0x200014b8
 8002ef0:	20000b12 	.word	0x20000b12
 8002ef4:	00000000 	.word	0x00000000

08002ef8 <Print_Cell_Voltage>:

extern uint8_t boot_time_sec, boot_time_min, boot_time_hour;

// admbs6817 cell0 ~ cell7
void Print_Cell_Voltage(void)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af02      	add	r7, sp, #8
#if defined(DEBUG_SERIAL) && defined(DEBUG_SERIAL_ADBMS6817)
	uint8_t Cell_Num;
	float voltage = 0;
 8002efe:	f04f 0300 	mov.w	r3, #0
 8002f02:	607b      	str	r3, [r7, #4]
	float voltage_total = 0;
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	60bb      	str	r3, [r7, #8]
	float voltage_avg = 0;
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	603b      	str	r3, [r7, #0]

	printf("%d:%02d:%02d    ", boot_time_hour, boot_time_min, boot_time_sec);
 8002f10:	4b31      	ldr	r3, [pc, #196]	; (8002fd8 <Print_Cell_Voltage+0xe0>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	4619      	mov	r1, r3
 8002f16:	4b31      	ldr	r3, [pc, #196]	; (8002fdc <Print_Cell_Voltage+0xe4>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	4b30      	ldr	r3, [pc, #192]	; (8002fe0 <Print_Cell_Voltage+0xe8>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4830      	ldr	r0, [pc, #192]	; (8002fe4 <Print_Cell_Voltage+0xec>)
 8002f22:	f009 f90d 	bl	800c140 <iprintf>
	for(Cell_Num=1;Cell_Num<8;Cell_Num++)
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
 8002f2a:	e034      	b.n	8002f96 <Print_Cell_Voltage+0x9e>
	{
		voltage = Adbms6817.voltage_cell[Cell_Num-1]/10000.;
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	4a2d      	ldr	r2, [pc, #180]	; (8002fe8 <Print_Cell_Voltage+0xf0>)
 8002f32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002f36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fa62 	bl	8000404 <__aeabi_i2d>
 8002f40:	a323      	add	r3, pc, #140	; (adr r3, 8002fd0 <Print_Cell_Voltage+0xd8>)
 8002f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f46:	f7fd fbf1 	bl	800072c <__aeabi_ddiv>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	f7fd fd7b 	bl	8000a4c <__aeabi_d2f>
 8002f56:	4603      	mov	r3, r0
 8002f58:	607b      	str	r3, [r7, #4]
		voltage_total += voltage;
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	68b8      	ldr	r0, [r7, #8]
 8002f5e:	f7fd fdcb 	bl	8000af8 <__addsf3>
 8002f62:	4603      	mov	r3, r0
 8002f64:	60bb      	str	r3, [r7, #8]
		{
			printf("*");
		}
#endif
		//printf("Cell %d : %.3f Volt\r\n",Cell_Num,voltage);
		if(Adbms6817.discharge_state[Cell_Num-1])
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	4a1f      	ldr	r2, [pc, #124]	; (8002fe8 <Print_Cell_Voltage+0xf0>)
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f893 3426 	ldrb.w	r3, [r3, #1062]	; 0x426
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <Print_Cell_Voltage+0x84>
		{
			printf("*");
 8002f76:	202a      	movs	r0, #42	; 0x2a
 8002f78:	f009 f8f4 	bl	800c164 <putchar>
		}

		printf("%d %.3f    ",Cell_Num,voltage);
 8002f7c:	7bfc      	ldrb	r4, [r7, #15]
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f7fd fa52 	bl	8000428 <__aeabi_f2d>
 8002f84:	4602      	mov	r2, r0
 8002f86:	460b      	mov	r3, r1
 8002f88:	4621      	mov	r1, r4
 8002f8a:	4818      	ldr	r0, [pc, #96]	; (8002fec <Print_Cell_Voltage+0xf4>)
 8002f8c:	f009 f8d8 	bl	800c140 <iprintf>
	for(Cell_Num=1;Cell_Num<8;Cell_Num++)
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	3301      	adds	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	2b07      	cmp	r3, #7
 8002f9a:	d9c7      	bls.n	8002f2c <Print_Cell_Voltage+0x34>
	}
	//printf("\r\n");
	voltage_avg = voltage_total / 7;
 8002f9c:	4914      	ldr	r1, [pc, #80]	; (8002ff0 <Print_Cell_Voltage+0xf8>)
 8002f9e:	68b8      	ldr	r0, [r7, #8]
 8002fa0:	f7fd ff66 	bl	8000e70 <__aeabi_fdiv>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	603b      	str	r3, [r7, #0]
			printf("%d ", i+1);
		}
	}
	printf("\r\n");
#endif
	printf("Avg:%.2fV   %.2f%% \r\n", voltage_avg, Bms.Soc);
 8002fa8:	6838      	ldr	r0, [r7, #0]
 8002faa:	f7fd fa3d 	bl	8000428 <__aeabi_f2d>
 8002fae:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <Print_Cell_Voltage+0xfc>)
 8002fb0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002fb4:	e9cd 2300 	strd	r2, r3, [sp]
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	480e      	ldr	r0, [pc, #56]	; (8002ff8 <Print_Cell_Voltage+0x100>)
 8002fbe:	f009 f8bf 	bl	800c140 <iprintf>
	}
	printf("\r\n");
	#endif
	//printf("\r\n");
#endif
}
 8002fc2:	bf00      	nop
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	f3af 8000 	nop.w
 8002fd0:	00000000 	.word	0x00000000
 8002fd4:	40c38800 	.word	0x40c38800
 8002fd8:	200013aa 	.word	0x200013aa
 8002fdc:	200013a8 	.word	0x200013a8
 8002fe0:	200013a9 	.word	0x200013a9
 8002fe4:	0800d510 	.word	0x0800d510
 8002fe8:	20000498 	.word	0x20000498
 8002fec:	0800d524 	.word	0x0800d524
 8002ff0:	40e00000 	.word	0x40e00000
 8002ff4:	20000360 	.word	0x20000360
 8002ff8:	0800d530 	.word	0x0800d530

08002ffc <Adbms6817_initialize>:
	printf("\r\n");
#endif
}

void Adbms6817_initialize()
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
	memset(Adbms6817.discharge_state,0x00,sizeof(Adbms6817.discharge_state));
	memset(Adbms6817.discharge_data,0x00,sizeof(Adbms6817.discharge_data));
	memset(Adbms6817.voltage_cell,0x00,sizeof(Adbms6817.voltage_cell));
	memset(Adbms6817.temp_gpio,0x00,sizeof(Adbms6817.temp_gpio));
*/
	memset(&Adbms6817,0x00,sizeof(struct _ADBMS6817));
 8003000:	f44f 6288 	mov.w	r2, #1088	; 0x440
 8003004:	2100      	movs	r1, #0
 8003006:	4808      	ldr	r0, [pc, #32]	; (8003028 <Adbms6817_initialize+0x2c>)
 8003008:	f009 fa08 	bl	800c41c <memset>
	memset(&Bms,0x00,sizeof(struct _BMS));
 800300c:	2230      	movs	r2, #48	; 0x30
 800300e:	2100      	movs	r1, #0
 8003010:	4806      	ldr	r0, [pc, #24]	; (800302c <Adbms6817_initialize+0x30>)
 8003012:	f009 fa03 	bl	800c41c <memset>

	PEC15_Table_initialize();
 8003016:	f000 fc85 	bl	8003924 <PEC15_Table_initialize>
	PEC10_Table_initialize();
 800301a:	f000 fcbd 	bl	8003998 <PEC10_Table_initialize>
	//set_adc(MD_NORMAL, DCP_DISABLED, CELL_CH_ALL, AUX_CH_ALL);

	Adbms6817_init_reg();
 800301e:	f000 fddd 	bl	8003bdc <Adbms6817_init_reg>
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	20000498 	.word	0x20000498
 800302c:	20000360 	.word	0x20000360

08003030 <Adbms6817_adcv>:
 |CMD[0:1]	|  15   |  14   |  13   |  12   |  11   |  10   |   9   |   8   |   7   |   6   |   5   |   4   |   3   |   2   |   1   |   0   |
 |----------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|-------|
 |ADCV:	    |   0   |   0   |   0   |   0   |   0   |   0   |   1   | MD[1] | MD[2] |   1   |   1   |  DCP  |   0   | CH[2] | CH[1] | CH[0] |
 ***********************************************************************************************/
void Adbms6817_adcv()
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
	uint16_t cmd_pec;

	//1
	//cmd[0] = ADCV[0];
	//cmd[1] = ADCV[1];
	cmd[0] = 0x03;
 8003036:	2303      	movs	r3, #3
 8003038:	703b      	strb	r3, [r7, #0]
	cmd[1] = 0x60;
 800303a:	2360      	movs	r3, #96	; 0x60
 800303c:	707b      	strb	r3, [r7, #1]

	//2
	cmd_pec = PEC15_calc(2, cmd);
 800303e:	463b      	mov	r3, r7
 8003040:	4619      	mov	r1, r3
 8003042:	2002      	movs	r0, #2
 8003044:	f000 fce6 	bl	8003a14 <PEC15_calc>
 8003048:	4603      	mov	r3, r0
 800304a:	80fb      	strh	r3, [r7, #6]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	b29b      	uxth	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	70bb      	strb	r3, [r7, #2]
	cmd[3] = (uint8_t) (cmd_pec);
 8003056:	88fb      	ldrh	r3, [r7, #6]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	70fb      	strb	r3, [r7, #3]

	//3
	wakeup_idle(); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 800305c:	f000 fde2 	bl	8003c24 <wakeup_idle>

	//4
	Adbms6817_CS_low
 8003060:	2200      	movs	r2, #0
 8003062:	2110      	movs	r1, #16
 8003064:	4808      	ldr	r0, [pc, #32]	; (8003088 <Adbms6817_adcv+0x58>)
 8003066:	f005 fd44 	bl	8008af2 <HAL_GPIO_WritePin>
	spi_write_array(4, cmd);
 800306a:	463b      	mov	r3, r7
 800306c:	4619      	mov	r1, r3
 800306e:	2004      	movs	r0, #4
 8003070:	f000 fdec 	bl	8003c4c <spi_write_array>
	Adbms6817_CS_high
 8003074:	2201      	movs	r2, #1
 8003076:	2110      	movs	r1, #16
 8003078:	4803      	ldr	r0, [pc, #12]	; (8003088 <Adbms6817_adcv+0x58>)
 800307a:	f005 fd3a 	bl	8008af2 <HAL_GPIO_WritePin>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40010800 	.word	0x40010800

0800308c <Adbms6817_rdcv_reg>:
  *************************************************/
void Adbms6817_rdcv_reg(uint8_t reg, //Determines which cell voltage register is read back
		uint8_t total_ic, //the number of ICs in the
		uint8_t *data //An array of the unparsed cell codes
		)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	603a      	str	r2, [r7, #0]
 8003096:	71fb      	strb	r3, [r7, #7]
 8003098:	460b      	mov	r3, r1
 800309a:	71bb      	strb	r3, [r7, #6]
	const uint8_t REG_LEN = 8; //number of bytes in each ICs register + 2 bytes for the PEC
 800309c:	2308      	movs	r3, #8
 800309e:	73fb      	strb	r3, [r7, #15]
	uint8_t cmd[4];
	uint16_t cmd_pec;

	//1
	if (reg == 1)     //1: RDCVA(1~3 CELL)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d104      	bne.n	80030b0 <Adbms6817_rdcv_reg+0x24>
	{
		cmd[1] = 0x04;
 80030a6:	2304      	movs	r3, #4
 80030a8:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80030aa:	2300      	movs	r3, #0
 80030ac:	723b      	strb	r3, [r7, #8]
 80030ae:	e016      	b.n	80030de <Adbms6817_rdcv_reg+0x52>
	}
	else if (reg == 2) //2: RDCVB(4~6 CELL)
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d104      	bne.n	80030c0 <Adbms6817_rdcv_reg+0x34>
	{
		cmd[1] = 0x06;
 80030b6:	2306      	movs	r3, #6
 80030b8:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80030ba:	2300      	movs	r3, #0
 80030bc:	723b      	strb	r3, [r7, #8]
 80030be:	e00e      	b.n	80030de <Adbms6817_rdcv_reg+0x52>
	}
	else if (reg == 3) //3: RDCVC(7~8 CELL)
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	2b03      	cmp	r3, #3
 80030c4:	d104      	bne.n	80030d0 <Adbms6817_rdcv_reg+0x44>
	{
		cmd[1] = 0x08;
 80030c6:	2308      	movs	r3, #8
 80030c8:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80030ca:	2300      	movs	r3, #0
 80030cc:	723b      	strb	r3, [r7, #8]
 80030ce:	e006      	b.n	80030de <Adbms6817_rdcv_reg+0x52>
	}
	else if (reg == 4) //4: RDCVD(RESERVED)
 80030d0:	79fb      	ldrb	r3, [r7, #7]
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	d103      	bne.n	80030de <Adbms6817_rdcv_reg+0x52>
	{
		cmd[1] = 0x0A;
 80030d6:	230a      	movs	r3, #10
 80030d8:	727b      	strb	r3, [r7, #9]
		cmd[0] = 0x00;
 80030da:	2300      	movs	r3, #0
 80030dc:	723b      	strb	r3, [r7, #8]
	}

	//2
	cmd_pec = PEC15_calc(2, cmd);
 80030de:	f107 0308 	add.w	r3, r7, #8
 80030e2:	4619      	mov	r1, r3
 80030e4:	2002      	movs	r0, #2
 80030e6:	f000 fc95 	bl	8003a14 <PEC15_calc>
 80030ea:	4603      	mov	r3, r0
 80030ec:	81bb      	strh	r3, [r7, #12]
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80030ee:	89bb      	ldrh	r3, [r7, #12]
 80030f0:	0a1b      	lsrs	r3, r3, #8
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 80030f8:	89bb      	ldrh	r3, [r7, #12]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	72fb      	strb	r3, [r7, #11]

	//3
	wakeup_idle(); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 80030fe:	f000 fd91 	bl	8003c24 <wakeup_idle>
	wakeup_idle();
 8003102:	f000 fd8f 	bl	8003c24 <wakeup_idle>
	wakeup_idle();
 8003106:	f000 fd8d 	bl	8003c24 <wakeup_idle>

	//4
	Adbms6817_CS_low;
 800310a:	2200      	movs	r2, #0
 800310c:	2110      	movs	r1, #16
 800310e:	484a      	ldr	r0, [pc, #296]	; (8003238 <Adbms6817_rdcv_reg+0x1ac>)
 8003110:	f005 fcef 	bl	8008af2 <HAL_GPIO_WritePin>
	spi_write_read(cmd, 4, data, (REG_LEN * total_ic));
 8003114:	7bfb      	ldrb	r3, [r7, #15]
 8003116:	79ba      	ldrb	r2, [r7, #6]
 8003118:	fb02 f303 	mul.w	r3, r2, r3
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f107 0008 	add.w	r0, r7, #8
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	2104      	movs	r1, #4
 8003126:	f000 fdb1 	bl	8003c8c <spi_write_read>
	Adbms6817_CS_high;
 800312a:	2201      	movs	r2, #1
 800312c:	2110      	movs	r1, #16
 800312e:	4842      	ldr	r0, [pc, #264]	; (8003238 <Adbms6817_rdcv_reg+0x1ac>)
 8003130:	f005 fcdf 	bl	8008af2 <HAL_GPIO_WritePin>

	if(reg == 1)
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d12b      	bne.n	8003192 <Adbms6817_rdcv_reg+0x106>
	{
		Adbms6817.voltage_cell[0] = (data[1] << 8) + data[0];
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	3301      	adds	r3, #1
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	b29a      	uxth	r2, r3
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	b29b      	uxth	r3, r3
 800314c:	4413      	add	r3, r2
 800314e:	b29a      	uxth	r2, r3
 8003150:	4b3a      	ldr	r3, [pc, #232]	; (800323c <Adbms6817_rdcv_reg+0x1b0>)
 8003152:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
		Adbms6817.voltage_cell[1] = (data[3] << 8) + data[2];
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	3303      	adds	r3, #3
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	b29b      	uxth	r3, r3
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	b29a      	uxth	r2, r3
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	3302      	adds	r3, #2
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	b29b      	uxth	r3, r3
 800316a:	4413      	add	r3, r2
 800316c:	b29a      	uxth	r2, r3
 800316e:	4b33      	ldr	r3, [pc, #204]	; (800323c <Adbms6817_rdcv_reg+0x1b0>)
 8003170:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
		Adbms6817.voltage_cell[2] = (data[5] << 8) + data[4];
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	3305      	adds	r3, #5
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	b29a      	uxth	r2, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	3304      	adds	r3, #4
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b29b      	uxth	r3, r3
 8003188:	4413      	add	r3, r2
 800318a:	b29a      	uxth	r2, r3
 800318c:	4b2b      	ldr	r3, [pc, #172]	; (800323c <Adbms6817_rdcv_reg+0x1b0>)
 800318e:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
	}
	if(reg == 2)
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	2b02      	cmp	r3, #2
 8003196:	d12b      	bne.n	80031f0 <Adbms6817_rdcv_reg+0x164>
	{
		Adbms6817.voltage_cell[3] = (data[1] << 8) + data[0];
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	021b      	lsls	r3, r3, #8
 80031a2:	b29a      	uxth	r2, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	4b23      	ldr	r3, [pc, #140]	; (800323c <Adbms6817_rdcv_reg+0x1b0>)
 80031b0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
		Adbms6817.voltage_cell[4] = (data[3] << 8) + data[2];
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	3303      	adds	r3, #3
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	021b      	lsls	r3, r3, #8
 80031be:	b29a      	uxth	r2, r3
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	3302      	adds	r3, #2
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4413      	add	r3, r2
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <Adbms6817_rdcv_reg+0x1b0>)
 80031ce:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
		Adbms6817.voltage_cell[5] = (data[5] << 8) + data[4];
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	3305      	adds	r3, #5
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	b29a      	uxth	r2, r3
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	3304      	adds	r3, #4
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	4413      	add	r3, r2
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	4b14      	ldr	r3, [pc, #80]	; (800323c <Adbms6817_rdcv_reg+0x1b0>)
 80031ec:	f8a3 240a 	strh.w	r2, [r3, #1034]	; 0x40a
	}
	if(reg == 3)
 80031f0:	79fb      	ldrb	r3, [r7, #7]
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d11c      	bne.n	8003230 <Adbms6817_rdcv_reg+0x1a4>
	{
		Adbms6817.voltage_cell[6] = (data[1] << 8) + data[0];
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	b29a      	uxth	r2, r3
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b29b      	uxth	r3, r3
 8003208:	4413      	add	r3, r2
 800320a:	b29a      	uxth	r2, r3
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <Adbms6817_rdcv_reg+0x1b0>)
 800320e:	f8a3 240c 	strh.w	r2, [r3, #1036]	; 0x40c
		Adbms6817.voltage_cell[7] = (data[3] << 8) + data[2];
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	3303      	adds	r3, #3
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	021b      	lsls	r3, r3, #8
 800321c:	b29a      	uxth	r2, r3
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	3302      	adds	r3, #2
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	4413      	add	r3, r2
 8003228:	b29a      	uxth	r2, r3
 800322a:	4b04      	ldr	r3, [pc, #16]	; (800323c <Adbms6817_rdcv_reg+0x1b0>)
 800322c:	f8a3 240e 	strh.w	r2, [r3, #1038]	; 0x40e
	}
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40010800 	.word	0x40010800
 800323c:	20000498 	.word	0x20000498

08003240 <Adbms6817_wrcfg>:

void Adbms6817_wrcfg(uint8_t total_ic, //The number of ICs being written to
		uint8_t cfg_group, // 1:Group A, 2:Group B
		uint8_t config[][8] //A two dimensional array of the configuration data that will be written
		)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b0a4      	sub	sp, #144	; 0x90
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	603a      	str	r2, [r7, #0]
 800324a:	71fb      	strb	r3, [r7, #7]
 800324c:	460b      	mov	r3, r1
 800324e:	71bb      	strb	r3, [r7, #6]
	uint16_t cmd_pec;
	const uint8_t BYTES_IN_REG = 6;
 8003250:	2306      	movs	r3, #6
 8003252:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	3304      	adds	r3, #4
 800325e:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	uint8_t current_ic;
	uint8_t current_byte;
	//cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));

	//1
	if(cfg_group == REG_GRP_A)
 8003262:	79bb      	ldrb	r3, [r7, #6]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d104      	bne.n	8003272 <Adbms6817_wrcfg+0x32>
	{
		cmd[0] = 0x00;
 8003268:	2300      	movs	r3, #0
 800326a:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x01;
 800326c:	2301      	movs	r3, #1
 800326e:	727b      	strb	r3, [r7, #9]
 8003270:	e006      	b.n	8003280 <Adbms6817_wrcfg+0x40>
	}
	else if(cfg_group == REG_GRP_B)
 8003272:	79bb      	ldrb	r3, [r7, #6]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d103      	bne.n	8003280 <Adbms6817_wrcfg+0x40>
	{
		cmd[0] = 0x00;
 8003278:	2300      	movs	r3, #0
 800327a:	723b      	strb	r3, [r7, #8]
		cmd[1] = 0x24;
 800327c:	2324      	movs	r3, #36	; 0x24
 800327e:	727b      	strb	r3, [r7, #9]
	}
	cmd_pec = PEC15_calc(2, cmd);
 8003280:	f107 0308 	add.w	r3, r7, #8
 8003284:	4619      	mov	r1, r3
 8003286:	2002      	movs	r0, #2
 8003288:	f000 fbc4 	bl	8003a14 <PEC15_calc>
 800328c:	4603      	mov	r3, r0
 800328e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8003292:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	b29b      	uxth	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 800329e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	72fb      	strb	r3, [r7, #11]

	//2
	cmd_index = 4;
 80032a6:	2304      	movs	r3, #4
 80032a8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (current_ic = total_ic; current_ic > 0; current_ic--) // executes for each LTC6804 in daisy chain, this loops starts with
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80032b2:	e055      	b.n	8003360 <Adbms6817_wrcfg+0x120>
	{			// the last IC on the stack. The first configuration written is
				// received by the last IC in the daisy chain

		for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 80032b4:	2300      	movs	r3, #0
 80032b6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80032ba:	e01a      	b.n	80032f2 <Adbms6817_wrcfg+0xb2>
		{									// current_byte is the byte counter

			cmd[cmd_index] = config[current_ic - 1][current_byte]; //adding the config data to the array to be sent
 80032bc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80032c0:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80032c4:	3b01      	subs	r3, #1
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	18d1      	adds	r1, r2, r3
 80032cc:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 80032d0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80032d4:	5c8a      	ldrb	r2, [r1, r2]
 80032d6:	3390      	adds	r3, #144	; 0x90
 80032d8:	443b      	add	r3, r7
 80032da:	f803 2c88 	strb.w	r2, [r3, #-136]
			cmd_index = cmd_index + 1;
 80032de:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80032e2:	3301      	adds	r3, #1
 80032e4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 80032e8:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80032ec:	3301      	adds	r3, #1
 80032ee:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80032f2:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 80032f6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d3de      	bcc.n	80032bc <Adbms6817_wrcfg+0x7c>
		}
		//3
		//cfg_pec = (uint16_t) PEC15_calc(BYTES_IN_REG, &config[current_ic - 1][0]);// calculating the PEC for each ICs configuration register data
		cfg_pec = (uint16_t) PEC10_calc(&config[current_ic - 1][0] , 0, BYTES_IN_REG);
 80032fe:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003302:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8003306:	3b01      	subs	r3, #1
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	4413      	add	r3, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8003314:	461a      	mov	r2, r3
 8003316:	2100      	movs	r1, #0
 8003318:	f000 fbae 	bl	8003a78 <PEC10_calc>
 800331c:	4603      	mov	r3, r0
 800331e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		cmd[cmd_index] = (uint8_t) (cfg_pec >> 8);
 8003322:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	b29a      	uxth	r2, r3
 800332a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	3390      	adds	r3, #144	; 0x90
 8003332:	443b      	add	r3, r7
 8003334:	f803 2c88 	strb.w	r2, [r3, #-136]
		cmd[cmd_index + 1] = (uint8_t) cfg_pec;
 8003338:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800333c:	3301      	adds	r3, #1
 800333e:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8003342:	b2d2      	uxtb	r2, r2
 8003344:	3390      	adds	r3, #144	; 0x90
 8003346:	443b      	add	r3, r7
 8003348:	f803 2c88 	strb.w	r2, [r3, #-136]
		cmd_index = cmd_index + 2;
 800334c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003350:	3302      	adds	r3, #2
 8003352:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (current_ic = total_ic; current_ic > 0; current_ic--) // executes for each LTC6804 in daisy chain, this loops starts with
 8003356:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800335a:	3b01      	subs	r3, #1
 800335c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8003360:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1a5      	bne.n	80032b4 <Adbms6817_wrcfg+0x74>
	}

	//4
	wakeup_idle();
 8003368:	f000 fc5c 	bl	8003c24 <wakeup_idle>
	wakeup_idle(); //This will guarantee that the LTC6804 isoSPI port is awake.This command can be removed.
 800336c:	f000 fc5a 	bl	8003c24 <wakeup_idle>
	//5
	Adbms6817_CS_low;
 8003370:	2200      	movs	r2, #0
 8003372:	2110      	movs	r1, #16
 8003374:	4809      	ldr	r0, [pc, #36]	; (800339c <Adbms6817_wrcfg+0x15c>)
 8003376:	f005 fbbc 	bl	8008af2 <HAL_GPIO_WritePin>
	//delayMicroseconds(3);
	spi_write_array(CMD_LEN, cmd);
 800337a:	f107 0208 	add.w	r2, r7, #8
 800337e:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fc61 	bl	8003c4c <spi_write_array>
	Adbms6817_CS_high;
 800338a:	2201      	movs	r2, #1
 800338c:	2110      	movs	r1, #16
 800338e:	4803      	ldr	r0, [pc, #12]	; (800339c <Adbms6817_wrcfg+0x15c>)
 8003390:	f005 fbaf 	bl	8008af2 <HAL_GPIO_WritePin>
	//free(cmd);
}
 8003394:	bf00      	nop
 8003396:	3790      	adds	r7, #144	; 0x90
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40010800 	.word	0x40010800

080033a0 <Adbms6817_rdcfg>:
 ********************************************************/
int8_t Adbms6817_rdcfg(uint8_t total_ic, //Number of ICs in the system
		uint8_t cfg_group, // 1:Group A, 2:Group B
		uint8_t r_config[][8] //A two dimensional array that the function stores the read configuration data.
		)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08c      	sub	sp, #48	; 0x30
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	603a      	str	r2, [r7, #0]
 80033aa:	71fb      	strb	r3, [r7, #7]
 80033ac:	460b      	mov	r3, r1
 80033ae:	71bb      	strb	r3, [r7, #6]
	uint16_t cmd_pec;
	const uint8_t BYTES_IN_REG = 8;
 80033b0:	2308      	movs	r3, #8
 80033b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t cmd[4];
	uint8_t rx_data[20];
	int8_t pec_error = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t current_byte;

	//rx_data = (uint8_t *) malloc((8*total_ic)*sizeof(uint8_t));

	//1
	if(cfg_group == REG_GRP_A)
 80033bc:	79bb      	ldrb	r3, [r7, #6]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d106      	bne.n	80033d0 <Adbms6817_rdcfg+0x30>
	{
		cmd[0] = 0x00;
 80033c2:	2300      	movs	r3, #0
 80033c4:	f887 3020 	strb.w	r3, [r7, #32]
		cmd[1] = 0x02;
 80033c8:	2302      	movs	r3, #2
 80033ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80033ce:	e008      	b.n	80033e2 <Adbms6817_rdcfg+0x42>
	}
	else if(cfg_group == REG_GRP_B)
 80033d0:	79bb      	ldrb	r3, [r7, #6]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d105      	bne.n	80033e2 <Adbms6817_rdcfg+0x42>
	{
		cmd[0] = 0x00;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f887 3020 	strb.w	r3, [r7, #32]
		cmd[1] = 0x26;
 80033dc:	2326      	movs	r3, #38	; 0x26
 80033de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}

	cmd_pec = PEC15_calc(2, cmd);
 80033e2:	f107 0320 	add.w	r3, r7, #32
 80033e6:	4619      	mov	r1, r3
 80033e8:	2002      	movs	r0, #2
 80033ea:	f000 fb13 	bl	8003a14 <PEC15_calc>
 80033ee:	4603      	mov	r3, r0
 80033f0:	857b      	strh	r3, [r7, #42]	; 0x2a
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 80033f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	cmd[3] = (uint8_t) (cmd_pec);
 80033fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	//2
	wakeup_idle();
 8003406:	f000 fc0d 	bl	8003c24 <wakeup_idle>
	wakeup_idle(); //This will guarantee that the LTC6804 isoSPI port is awake. This command can be removed.
 800340a:	f000 fc0b 	bl	8003c24 <wakeup_idle>

	//3
	Adbms6817_CS_low;
 800340e:	2200      	movs	r2, #0
 8003410:	2110      	movs	r1, #16
 8003412:	483a      	ldr	r0, [pc, #232]	; (80034fc <Adbms6817_rdcfg+0x15c>)
 8003414:	f005 fb6d 	bl	8008af2 <HAL_GPIO_WritePin>

	spi_write_read(cmd, 4, rx_data, (BYTES_IN_REG * total_ic)); //Read the configuration data of all ICs on the daisy chain into
 8003418:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800341c:	79fa      	ldrb	r2, [r7, #7]
 800341e:	fb02 f303 	mul.w	r3, r2, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	f107 020c 	add.w	r2, r7, #12
 8003428:	f107 0020 	add.w	r0, r7, #32
 800342c:	2104      	movs	r1, #4
 800342e:	f000 fc2d 	bl	8003c8c <spi_write_read>
	Adbms6817_CS_high;
 8003432:	2201      	movs	r2, #1
 8003434:	2110      	movs	r1, #16
 8003436:	4831      	ldr	r0, [pc, #196]	; (80034fc <Adbms6817_rdcfg+0x15c>)
 8003438:	f005 fb5b 	bl	8008af2 <HAL_GPIO_WritePin>

	//rx_data[] array
	for (current_ic = 0; current_ic < total_ic; current_ic++) //executes for each LTC6804 in the daisy chain and packs the data
 800343c:	2300      	movs	r3, #0
 800343e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8003442:	e04f      	b.n	80034e4 <Adbms6817_rdcfg+0x144>
	{ 		//into the r_config array as well as check the received Config data
			//for any bit errors
		//4.a
		for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8003444:	2300      	movs	r3, #0
 8003446:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800344a:	e019      	b.n	8003480 <Adbms6817_rdcfg+0xe0>
		{
			r_config[current_ic][current_byte] = rx_data[current_byte
					+ (current_ic * BYTES_IN_REG)];	//
 800344c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003450:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003454:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 8003458:	fb01 f303 	mul.w	r3, r1, r3
 800345c:	18d1      	adds	r1, r2, r3
			r_config[current_ic][current_byte] = rx_data[current_byte
 800345e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	441a      	add	r2, r3
 8003468:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800346c:	3130      	adds	r1, #48	; 0x30
 800346e:	4439      	add	r1, r7
 8003470:	f811 1c24 	ldrb.w	r1, [r1, #-36]
 8003474:	54d1      	strb	r1, [r2, r3]
		for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++)
 8003476:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800347a:	3301      	adds	r3, #1
 800347c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8003480:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8003484:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003488:	429a      	cmp	r2, r3
 800348a:	d3df      	bcc.n	800344c <Adbms6817_rdcfg+0xac>
		}
		//4.b
		received_pec = ((r_config[current_ic][6] & 0x03)  << 8) + r_config[current_ic][7];
 800348c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003490:	00db      	lsls	r3, r3, #3
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	4413      	add	r3, r2
 8003496:	799b      	ldrb	r3, [r3, #6]
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	b29b      	uxth	r3, r3
 800349c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	6839      	ldr	r1, [r7, #0]
 80034aa:	440b      	add	r3, r1
 80034ac:	79db      	ldrb	r3, [r3, #7]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	4413      	add	r3, r2
 80034b2:	853b      	strh	r3, [r7, #40]	; 0x28
		//data_pec = PEC15_calc(6, &r_config[current_ic][0]);
		data_pec =  PEC10_calc(&r_config[current_ic][0] , 1, 6);
 80034b4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80034b8:	00db      	lsls	r3, r3, #3
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	4413      	add	r3, r2
 80034be:	2206      	movs	r2, #6
 80034c0:	2101      	movs	r1, #1
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fad8 	bl	8003a78 <PEC10_calc>
 80034c8:	4603      	mov	r3, r0
 80034ca:	84fb      	strh	r3, [r7, #38]	; 0x26
		{
			Adbms6817.discharge_state[8] = FALSE;
		}
#endif

		if (received_pec != data_pec)
 80034cc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80034ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d002      	beq.n	80034da <Adbms6817_rdcfg+0x13a>
		{
			pec_error = -1;
 80034d4:	23ff      	movs	r3, #255	; 0xff
 80034d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for (current_ic = 0; current_ic < total_ic; current_ic++) //executes for each LTC6804 in the daisy chain and packs the data
 80034da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80034de:	3301      	adds	r3, #1
 80034e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80034e4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3aa      	bcc.n	8003444 <Adbms6817_rdcfg+0xa4>
		}
	}

	//free(rx_data);
	//5
	return (pec_error);
 80034ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3730      	adds	r7, #48	; 0x30
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40010800 	.word	0x40010800

08003500 <Adbms6817_wrpwm>:
}

void Adbms6817_wrpwm(uint8_t total_ic, //The number of ICs being written to
		uint8_t config[][8] //A two dimensional array of the configuration data that will be written
		)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b0a4      	sub	sp, #144	; 0x90
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	6039      	str	r1, [r7, #0]
 800350a:	71fb      	strb	r3, [r7, #7]
	uint16_t cmd_pec;
	const uint8_t BYTES_IN_REG = 6;
 800350c:	2306      	movs	r3, #6
 800350e:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
	const uint8_t CMD_LEN = 4 + (8 * total_ic);
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	3304      	adds	r3, #4
 800351a:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
	uint8_t current_ic;
	uint8_t current_byte;
	//cmd = (uint8_t *)malloc(CMD_LEN*sizeof(uint8_t));

	//1
	cmd[0] = 0x00;
 800351e:	2300      	movs	r3, #0
 8003520:	723b      	strb	r3, [r7, #8]
	cmd[1] = 0x20;
 8003522:	2320      	movs	r3, #32
 8003524:	727b      	strb	r3, [r7, #9]

	cmd_pec = PEC15_calc(2, cmd);
 8003526:	f107 0308 	add.w	r3, r7, #8
 800352a:	4619      	mov	r1, r3
 800352c:	2002      	movs	r0, #2
 800352e:	f000 fa71 	bl	8003a14 <PEC15_calc>
 8003532:	4603      	mov	r3, r0
 8003534:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	cmd[2] = (uint8_t) (cmd_pec >> 8);
 8003538:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	b29b      	uxth	r3, r3
 8003540:	b2db      	uxtb	r3, r3
 8003542:	72bb      	strb	r3, [r7, #10]
	cmd[3] = (uint8_t) (cmd_pec);
 8003544:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003548:	b2db      	uxtb	r3, r3
 800354a:	72fb      	strb	r3, [r7, #11]

	//2
	cmd_index = 4;
 800354c:	2304      	movs	r3, #4
 800354e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (current_ic = total_ic; current_ic > 0; current_ic--) // executes for each LTC6804 in daisy chain, this loops starts with
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8003558:	e055      	b.n	8003606 <Adbms6817_wrpwm+0x106>
	{			// the last IC on the stack. The first configuration written is
				// received by the last IC in the daisy chain

		for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 800355a:	2300      	movs	r3, #0
 800355c:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8003560:	e01a      	b.n	8003598 <Adbms6817_wrpwm+0x98>
		{									// current_byte is the byte counter

			cmd[cmd_index] = config[current_ic - 1][current_byte]; //adding the config data to the array to be sent
 8003562:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003566:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800356a:	3b01      	subs	r3, #1
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	18d1      	adds	r1, r2, r3
 8003572:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 8003576:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800357a:	5c8a      	ldrb	r2, [r1, r2]
 800357c:	3390      	adds	r3, #144	; 0x90
 800357e:	443b      	add	r3, r7
 8003580:	f803 2c88 	strb.w	r2, [r3, #-136]
			cmd_index = cmd_index + 1;
 8003584:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8003588:	3301      	adds	r3, #1
 800358a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		for (current_byte = 0; current_byte < BYTES_IN_REG; current_byte++) // executes for each of the 6 bytes in the CFGR register
 800358e:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 8003592:	3301      	adds	r3, #1
 8003594:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 8003598:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 800359c:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d3de      	bcc.n	8003562 <Adbms6817_wrpwm+0x62>
		}
		//3
		//cfg_pec = (uint16_t) PEC15_calc(BYTES_IN_REG, &config[current_ic - 1][0]);// calculating the PEC for each ICs configuration register data
		cfg_pec = (uint16_t) PEC10_calc(&config[current_ic - 1][0] , 0, BYTES_IN_REG);
 80035a4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80035a8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 80035ac:	3b01      	subs	r3, #1
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	4413      	add	r3, r2
 80035b4:	4618      	mov	r0, r3
 80035b6:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 80035ba:	461a      	mov	r2, r3
 80035bc:	2100      	movs	r1, #0
 80035be:	f000 fa5b 	bl	8003a78 <PEC10_calc>
 80035c2:	4603      	mov	r3, r0
 80035c4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
		cmd[cmd_index] = (uint8_t) (cfg_pec >> 8);
 80035c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80035cc:	0a1b      	lsrs	r3, r3, #8
 80035ce:	b29a      	uxth	r2, r3
 80035d0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80035d4:	b2d2      	uxtb	r2, r2
 80035d6:	3390      	adds	r3, #144	; 0x90
 80035d8:	443b      	add	r3, r7
 80035da:	f803 2c88 	strb.w	r2, [r3, #-136]
		cmd[cmd_index + 1] = (uint8_t) cfg_pec;
 80035de:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80035e2:	3301      	adds	r3, #1
 80035e4:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	3390      	adds	r3, #144	; 0x90
 80035ec:	443b      	add	r3, r7
 80035ee:	f803 2c88 	strb.w	r2, [r3, #-136]
		cmd_index = cmd_index + 2;
 80035f2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80035f6:	3302      	adds	r3, #2
 80035f8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	for (current_ic = total_ic; current_ic > 0; current_ic--) // executes for each LTC6804 in daisy chain, this loops starts with
 80035fc:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8003600:	3b01      	subs	r3, #1
 8003602:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 8003606:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1a5      	bne.n	800355a <Adbms6817_wrpwm+0x5a>
	}

	//4
	wakeup_idle();
 800360e:	f000 fb09 	bl	8003c24 <wakeup_idle>
	wakeup_idle(); //This will guarantee that the LTC6804 isoSPI port is awake.This command can be removed.
 8003612:	f000 fb07 	bl	8003c24 <wakeup_idle>
	//5
	Adbms6817_CS_low;
 8003616:	2200      	movs	r2, #0
 8003618:	2110      	movs	r1, #16
 800361a:	480a      	ldr	r0, [pc, #40]	; (8003644 <Adbms6817_wrpwm+0x144>)
 800361c:	f005 fa69 	bl	8008af2 <HAL_GPIO_WritePin>
	//delayMicroseconds(3);
	spi_write_array(CMD_LEN, cmd);
 8003620:	f107 0208 	add.w	r2, r7, #8
 8003624:	f897 308b 	ldrb.w	r3, [r7, #139]	; 0x8b
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f000 fb0e 	bl	8003c4c <spi_write_array>
	Adbms6817_CS_high;
 8003630:	2201      	movs	r2, #1
 8003632:	2110      	movs	r1, #16
 8003634:	4803      	ldr	r0, [pc, #12]	; (8003644 <Adbms6817_wrpwm+0x144>)
 8003636:	f005 fa5c 	bl	8008af2 <HAL_GPIO_WritePin>
	//free(cmd);
}
 800363a:	bf00      	nop
 800363c:	3790      	adds	r7, #144	; 0x90
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40010800 	.word	0x40010800

08003648 <Adbms6817_discharge_cell_continuously>:

void Adbms6817_discharge_cell_continuously(uint8_t Sx /* x : adbms6817 Sx Pin Number*/, uint8_t state)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	460a      	mov	r2, r1
 8003652:	71fb      	strb	r3, [r7, #7]
 8003654:	4613      	mov	r3, r2
 8003656:	71bb      	strb	r3, [r7, #6]
	uint8_t data[NUM_OF_ADBMS6817][8];

	printf("Sx : %d state: %d\r\n", Sx, state);
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	79ba      	ldrb	r2, [r7, #6]
 800365c:	4619      	mov	r1, r3
 800365e:	4833      	ldr	r0, [pc, #204]	; (800372c <Adbms6817_discharge_cell_continuously+0xe4>)
 8003660:	f008 fd6e 	bl	800c140 <iprintf>
#if 0
	//do not use S6, S7
	if((Sx == S6) || (Sx == S7))
		return;
#endif
	Adbms6817_rdcfg(NUM_OF_ADBMS6817,REG_GRP_B,data);
 8003664:	f107 0308 	add.w	r3, r7, #8
 8003668:	461a      	mov	r2, r3
 800366a:	2102      	movs	r1, #2
 800366c:	2001      	movs	r0, #1
 800366e:	f7ff fe97 	bl	80033a0 <Adbms6817_rdcfg>
	printf("Adbms6817_rdcfg : ");
 8003672:	482f      	ldr	r0, [pc, #188]	; (8003730 <Adbms6817_discharge_cell_continuously+0xe8>)
 8003674:	f008 fd64 	bl	800c140 <iprintf>
		for(int i=0;i<7;i++)
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	e00b      	b.n	8003696 <Adbms6817_discharge_cell_continuously+0x4e>
		{
			printf("%02X ",data[0][i]);
 800367e:	f107 0208 	add.w	r2, r7, #8
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	4413      	add	r3, r2
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	4619      	mov	r1, r3
 800368a:	482a      	ldr	r0, [pc, #168]	; (8003734 <Adbms6817_discharge_cell_continuously+0xec>)
 800368c:	f008 fd58 	bl	800c140 <iprintf>
		for(int i=0;i<7;i++)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	3301      	adds	r3, #1
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	2b06      	cmp	r3, #6
 800369a:	ddf0      	ble.n	800367e <Adbms6817_discharge_cell_continuously+0x36>
		}
		printf("\r\n");
 800369c:	4826      	ldr	r0, [pc, #152]	; (8003738 <Adbms6817_discharge_cell_continuously+0xf0>)
 800369e:	f008 fdbd 	bl	800c21c <puts>

	if(state)
 80036a2:	79bb      	ldrb	r3, [r7, #6]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00b      	beq.n	80036c0 <Adbms6817_discharge_cell_continuously+0x78>
	{
	  //data[0][3] |= 0xBC;	// Discharge Timer Enable, 60min
	  data[0][4] |= (0x1 << Sx);
 80036a8:	7b3b      	ldrb	r3, [r7, #12]
 80036aa:	b25a      	sxtb	r2, r3
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	2101      	movs	r1, #1
 80036b0:	fa01 f303 	lsl.w	r3, r1, r3
 80036b4:	b25b      	sxtb	r3, r3
 80036b6:	4313      	orrs	r3, r2
 80036b8:	b25b      	sxtb	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	733b      	strb	r3, [r7, #12]
 80036be:	e00b      	b.n	80036d8 <Adbms6817_discharge_cell_continuously+0x90>
	}
	else
	{
	  data[0][4] &= (~0x1 << Sx);
 80036c0:	7b3b      	ldrb	r3, [r7, #12]
 80036c2:	b25a      	sxtb	r2, r3
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	f06f 0101 	mvn.w	r1, #1
 80036ca:	fa01 f303 	lsl.w	r3, r1, r3
 80036ce:	b25b      	sxtb	r3, r3
 80036d0:	4013      	ands	r3, r2
 80036d2:	b25b      	sxtb	r3, r3
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	733b      	strb	r3, [r7, #12]
	}

	printf("Adbms6817_rdcfg : ");
 80036d8:	4815      	ldr	r0, [pc, #84]	; (8003730 <Adbms6817_discharge_cell_continuously+0xe8>)
 80036da:	f008 fd31 	bl	800c140 <iprintf>
	for(int i=0;i<7;i++)
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	e00b      	b.n	80036fc <Adbms6817_discharge_cell_continuously+0xb4>
	{
		printf("%02X ",data[0][i]);
 80036e4:	f107 0208 	add.w	r2, r7, #8
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4413      	add	r3, r2
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	4619      	mov	r1, r3
 80036f0:	4810      	ldr	r0, [pc, #64]	; (8003734 <Adbms6817_discharge_cell_continuously+0xec>)
 80036f2:	f008 fd25 	bl	800c140 <iprintf>
	for(int i=0;i<7;i++)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	3301      	adds	r3, #1
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	2b06      	cmp	r3, #6
 8003700:	ddf0      	ble.n	80036e4 <Adbms6817_discharge_cell_continuously+0x9c>
	}
	printf("\r\n");
 8003702:	480d      	ldr	r0, [pc, #52]	; (8003738 <Adbms6817_discharge_cell_continuously+0xf0>)
 8003704:	f008 fd8a 	bl	800c21c <puts>
	Adbms6817_wrcfg(NUM_OF_ADBMS6817,REG_GRP_B,data);
 8003708:	f107 0308 	add.w	r3, r7, #8
 800370c:	461a      	mov	r2, r3
 800370e:	2102      	movs	r1, #2
 8003710:	2001      	movs	r0, #1
 8003712:	f7ff fd95 	bl	8003240 <Adbms6817_wrcfg>

	Adbms6817_rdcfg(NUM_OF_ADBMS6817,REG_GRP_B,data);
 8003716:	f107 0308 	add.w	r3, r7, #8
 800371a:	461a      	mov	r2, r3
 800371c:	2102      	movs	r1, #2
 800371e:	2001      	movs	r0, #1
 8003720:	f7ff fe3e 	bl	80033a0 <Adbms6817_rdcfg>
}
 8003724:	bf00      	nop
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	0800d560 	.word	0x0800d560
 8003730:	0800d574 	.word	0x0800d574
 8003734:	0800d588 	.word	0x0800d588
 8003738:	0800d558 	.word	0x0800d558

0800373c <Adbms6817_discharge_cell_pwm>:
	spi_write_array(CMD_LEN, cmd);
	Adbms6817_CS_high;
}

void Adbms6817_discharge_cell_pwm(uint8_t Sx /* x : adbms6817 Sx Pin Number*/, uint8_t state)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	460a      	mov	r2, r1
 8003746:	71fb      	strb	r3, [r7, #7]
 8003748:	4613      	mov	r3, r2
 800374a:	71bb      	strb	r3, [r7, #6]
	switch(Sx)
 800374c:	79fb      	ldrb	r3, [r7, #7]
 800374e:	2b07      	cmp	r3, #7
 8003750:	f200 80cc 	bhi.w	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
 8003754:	a201      	add	r2, pc, #4	; (adr r2, 800375c <Adbms6817_discharge_cell_pwm+0x20>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	0800377d 	.word	0x0800377d
 8003760:	080037ab 	.word	0x080037ab
 8003764:	080037d9 	.word	0x080037d9
 8003768:	08003807 	.word	0x08003807
 800376c:	08003835 	.word	0x08003835
 8003770:	08003863 	.word	0x08003863
 8003774:	08003891 	.word	0x08003891
 8003778:	080038bf 	.word	0x080038bf
	{
	case 0x00:
		if(state) Adbms6817.discharge_data[0][0] |= 0x0F;
 800377c:	79bb      	ldrb	r3, [r7, #6]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <Adbms6817_discharge_cell_pwm+0x5a>
 8003782:	4b66      	ldr	r3, [pc, #408]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 8003784:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8003788:	f043 030f 	orr.w	r3, r3, #15
 800378c:	b2da      	uxtb	r2, r3
 800378e:	4b63      	ldr	r3, [pc, #396]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 8003790:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		else			Adbms6817.discharge_data[0][0] &= 0xF0;
		break;
 8003794:	e0aa      	b.n	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
		else			Adbms6817.discharge_data[0][0] &= 0xF0;
 8003796:	4b61      	ldr	r3, [pc, #388]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 8003798:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 800379c:	f023 030f 	bic.w	r3, r3, #15
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	4b5e      	ldr	r3, [pc, #376]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80037a4:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		break;
 80037a8:	e0a0      	b.n	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
	case 0x01:
		if(state)	Adbms6817.discharge_data[0][0] |= 0xF0;
 80037aa:	79bb      	ldrb	r3, [r7, #6]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d009      	beq.n	80037c4 <Adbms6817_discharge_cell_pwm+0x88>
 80037b0:	4b5a      	ldr	r3, [pc, #360]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80037b2:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80037b6:	f063 030f 	orn	r3, r3, #15
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	4b57      	ldr	r3, [pc, #348]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80037be:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		else			Adbms6817.discharge_data[0][0] &= 0x0F;
		break;
 80037c2:	e093      	b.n	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
		else			Adbms6817.discharge_data[0][0] &= 0x0F;
 80037c4:	4b55      	ldr	r3, [pc, #340]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80037c6:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	4b52      	ldr	r3, [pc, #328]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80037d2:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		break;
 80037d6:	e089      	b.n	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
	case 0x02:
		if(state)	Adbms6817.discharge_data[0][1] |= 0x0F;
 80037d8:	79bb      	ldrb	r3, [r7, #6]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d009      	beq.n	80037f2 <Adbms6817_discharge_cell_pwm+0xb6>
 80037de:	4b4f      	ldr	r3, [pc, #316]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80037e0:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 80037e4:	f043 030f 	orr.w	r3, r3, #15
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4b4c      	ldr	r3, [pc, #304]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80037ec:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
		else			Adbms6817.discharge_data[0][1] &= 0xF0;
		break;
 80037f0:	e07c      	b.n	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
		else			Adbms6817.discharge_data[0][1] &= 0xF0;
 80037f2:	4b4a      	ldr	r3, [pc, #296]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80037f4:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 80037f8:	f023 030f 	bic.w	r3, r3, #15
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4b47      	ldr	r3, [pc, #284]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 8003800:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
		break;
 8003804:	e072      	b.n	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
	case 0x03:
		if(state)	Adbms6817.discharge_data[0][1] |= 0xF0;
 8003806:	79bb      	ldrb	r3, [r7, #6]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d009      	beq.n	8003820 <Adbms6817_discharge_cell_pwm+0xe4>
 800380c:	4b43      	ldr	r3, [pc, #268]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 800380e:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8003812:	f063 030f 	orn	r3, r3, #15
 8003816:	b2da      	uxtb	r2, r3
 8003818:	4b40      	ldr	r3, [pc, #256]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 800381a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
		else			Adbms6817.discharge_data[0][1] &= 0x0F;
		break;
 800381e:	e065      	b.n	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
		else			Adbms6817.discharge_data[0][1] &= 0x0F;
 8003820:	4b3e      	ldr	r3, [pc, #248]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 8003822:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	b2da      	uxtb	r2, r3
 800382c:	4b3b      	ldr	r3, [pc, #236]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 800382e:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
		break;
 8003832:	e05b      	b.n	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
	case 0x04:
		if(state)	Adbms6817.discharge_data[0][2] |= 0x0F;
 8003834:	79bb      	ldrb	r3, [r7, #6]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <Adbms6817_discharge_cell_pwm+0x112>
 800383a:	4b38      	ldr	r3, [pc, #224]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 800383c:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8003840:	f043 030f 	orr.w	r3, r3, #15
 8003844:	b2da      	uxtb	r2, r3
 8003846:	4b35      	ldr	r3, [pc, #212]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 8003848:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
		else			Adbms6817.discharge_data[0][2] &= 0xF0;
		break;
 800384c:	e04e      	b.n	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
		else			Adbms6817.discharge_data[0][2] &= 0xF0;
 800384e:	4b33      	ldr	r3, [pc, #204]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 8003850:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8003854:	f023 030f 	bic.w	r3, r3, #15
 8003858:	b2da      	uxtb	r2, r3
 800385a:	4b30      	ldr	r3, [pc, #192]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 800385c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
		break;
 8003860:	e044      	b.n	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
	case 0x05:
		if(state)	Adbms6817.discharge_data[0][2] |= 0xF0;
 8003862:	79bb      	ldrb	r3, [r7, #6]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d009      	beq.n	800387c <Adbms6817_discharge_cell_pwm+0x140>
 8003868:	4b2c      	ldr	r3, [pc, #176]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 800386a:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 800386e:	f063 030f 	orn	r3, r3, #15
 8003872:	b2da      	uxtb	r2, r3
 8003874:	4b29      	ldr	r3, [pc, #164]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 8003876:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
		else			Adbms6817.discharge_data[0][2] &= 0x0F;
		break;
 800387a:	e037      	b.n	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
		else			Adbms6817.discharge_data[0][2] &= 0x0F;
 800387c:	4b27      	ldr	r3, [pc, #156]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 800387e:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8003882:	f003 030f 	and.w	r3, r3, #15
 8003886:	b2da      	uxtb	r2, r3
 8003888:	4b24      	ldr	r3, [pc, #144]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 800388a:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
		break;
 800388e:	e02d      	b.n	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
	case 0x06:
		if(state)	Adbms6817.discharge_data[0][3] |= 0x0F;
 8003890:	79bb      	ldrb	r3, [r7, #6]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <Adbms6817_discharge_cell_pwm+0x16e>
 8003896:	4b21      	ldr	r3, [pc, #132]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 8003898:	f893 343b 	ldrb.w	r3, [r3, #1083]	; 0x43b
 800389c:	f043 030f 	orr.w	r3, r3, #15
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4b1e      	ldr	r3, [pc, #120]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80038a4:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
		else			Adbms6817.discharge_data[0][3] &= 0xF0;
		break;
 80038a8:	e020      	b.n	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
		else			Adbms6817.discharge_data[0][3] &= 0xF0;
 80038aa:	4b1c      	ldr	r3, [pc, #112]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80038ac:	f893 343b 	ldrb.w	r3, [r3, #1083]	; 0x43b
 80038b0:	f023 030f 	bic.w	r3, r3, #15
 80038b4:	b2da      	uxtb	r2, r3
 80038b6:	4b19      	ldr	r3, [pc, #100]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80038b8:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
		break;
 80038bc:	e016      	b.n	80038ec <Adbms6817_discharge_cell_pwm+0x1b0>
	case 0x07:
		if(state)	Adbms6817.discharge_data[0][3] |= 0xF0;
 80038be:	79bb      	ldrb	r3, [r7, #6]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d009      	beq.n	80038d8 <Adbms6817_discharge_cell_pwm+0x19c>
 80038c4:	4b15      	ldr	r3, [pc, #84]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80038c6:	f893 343b 	ldrb.w	r3, [r3, #1083]	; 0x43b
 80038ca:	f063 030f 	orn	r3, r3, #15
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	4b12      	ldr	r3, [pc, #72]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80038d2:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
		else			Adbms6817.discharge_data[0][3] &= 0x0F;
		break;
 80038d6:	e008      	b.n	80038ea <Adbms6817_discharge_cell_pwm+0x1ae>
		else			Adbms6817.discharge_data[0][3] &= 0x0F;
 80038d8:	4b10      	ldr	r3, [pc, #64]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80038da:	f893 343b 	ldrb.w	r3, [r3, #1083]	; 0x43b
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	4b0d      	ldr	r3, [pc, #52]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80038e6:	f883 243b 	strb.w	r2, [r3, #1083]	; 0x43b
		break;
 80038ea:	bf00      	nop
	}

	if(state)	Adbms6817.discharge_state[Sx] = 1;
 80038ec:	79bb      	ldrb	r3, [r7, #6]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d006      	beq.n	8003900 <Adbms6817_discharge_cell_pwm+0x1c4>
 80038f2:	79fb      	ldrb	r3, [r7, #7]
 80038f4:	4a09      	ldr	r2, [pc, #36]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 80038f6:	4413      	add	r3, r2
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 80038fe:	e005      	b.n	800390c <Adbms6817_discharge_cell_pwm+0x1d0>
	else		Adbms6817.discharge_state[Sx] = 0;
 8003900:	79fb      	ldrb	r3, [r7, #7]
 8003902:	4a06      	ldr	r2, [pc, #24]	; (800391c <Adbms6817_discharge_cell_pwm+0x1e0>)
 8003904:	4413      	add	r3, r2
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426

	Adbms6817_wrpwm(NUM_OF_ADBMS6817,	Adbms6817.discharge_data);
 800390c:	4904      	ldr	r1, [pc, #16]	; (8003920 <Adbms6817_discharge_cell_pwm+0x1e4>)
 800390e:	2001      	movs	r0, #1
 8003910:	f7ff fdf6 	bl	8003500 <Adbms6817_wrpwm>
}
 8003914:	bf00      	nop
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000498 	.word	0x20000498
 8003920:	200008d0 	.word	0x200008d0

08003924 <PEC15_Table_initialize>:

void PEC15_Table_initialize()
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
	int16_t remainder;
	int16_t CRC15_POLY = 0x4599;
 800392a:	f244 5399 	movw	r3, #17817	; 0x4599
 800392e:	807b      	strh	r3, [r7, #2]

	for (int i = 0; i < 256; i++)
 8003930:	2300      	movs	r3, #0
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	e025      	b.n	8003982 <PEC15_Table_initialize+0x5e>
	{
		remainder = i << 7;
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	01db      	lsls	r3, r3, #7
 800393a:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 800393c:	2308      	movs	r3, #8
 800393e:	607b      	str	r3, [r7, #4]
 8003940:	e014      	b.n	800396c <PEC15_Table_initialize+0x48>
		{
			if (remainder & 0x4000)
 8003942:	89fb      	ldrh	r3, [r7, #14]
 8003944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <PEC15_Table_initialize+0x3a>
			{
				remainder = ((remainder << 1));
 800394c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	81fb      	strh	r3, [r7, #14]
				remainder = (remainder ^ CRC15_POLY);
 8003954:	89fa      	ldrh	r2, [r7, #14]
 8003956:	887b      	ldrh	r3, [r7, #2]
 8003958:	4053      	eors	r3, r2
 800395a:	81fb      	strh	r3, [r7, #14]
 800395c:	e003      	b.n	8003966 <PEC15_Table_initialize+0x42>
			}
			else
			{
				remainder = ((remainder << 1));
 800395e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3b01      	subs	r3, #1
 800396a:	607b      	str	r3, [r7, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	dce7      	bgt.n	8003942 <PEC15_Table_initialize+0x1e>
			}
		}
		Adbms6817.crc15Table[i] = remainder&0xFFFF;
 8003972:	4908      	ldr	r1, [pc, #32]	; (8003994 <PEC15_Table_initialize+0x70>)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	89fa      	ldrh	r2, [r7, #14]
 8003978:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	3301      	adds	r3, #1
 8003980:	60bb      	str	r3, [r7, #8]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	2bff      	cmp	r3, #255	; 0xff
 8003986:	ddd6      	ble.n	8003936 <PEC15_Table_initialize+0x12>
	}
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	20000498 	.word	0x20000498

08003998 <PEC10_Table_initialize>:

void PEC10_Table_initialize()
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
	int16_t remainder;
	int16_t CRC10_POLY = 0x8F;
 800399e:	238f      	movs	r3, #143	; 0x8f
 80039a0:	807b      	strh	r3, [r7, #2]

	for (int i = 0; i < 256; i++)
 80039a2:	2300      	movs	r3, #0
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	e02a      	b.n	80039fe <PEC10_Table_initialize+0x66>
	{
		remainder = i << 2;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 80039ae:	2308      	movs	r3, #8
 80039b0:	607b      	str	r3, [r7, #4]
 80039b2:	e014      	b.n	80039de <PEC10_Table_initialize+0x46>
		{
			if (remainder & 0x200)
 80039b4:	89fb      	ldrh	r3, [r7, #14]
 80039b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d008      	beq.n	80039d0 <PEC10_Table_initialize+0x38>
			{
				remainder = ((remainder << 1));
 80039be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	81fb      	strh	r3, [r7, #14]
				remainder = (remainder ^ CRC10_POLY);
 80039c6:	89fa      	ldrh	r2, [r7, #14]
 80039c8:	887b      	ldrh	r3, [r7, #2]
 80039ca:	4053      	eors	r3, r2
 80039cc:	81fb      	strh	r3, [r7, #14]
 80039ce:	e003      	b.n	80039d8 <PEC10_Table_initialize+0x40>
			}
			else
			{
				remainder = ((remainder << 1));
 80039d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	81fb      	strh	r3, [r7, #14]
		for (int bit = 8; bit > 0; --bit)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	3b01      	subs	r3, #1
 80039dc:	607b      	str	r3, [r7, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	dce7      	bgt.n	80039b4 <PEC10_Table_initialize+0x1c>
			}
		}
		Adbms6817.crc10Table[i] = remainder&0x3FF;
 80039e4:	89fb      	ldrh	r3, [r7, #14]
 80039e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039ea:	b219      	sxth	r1, r3
 80039ec:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <PEC10_Table_initialize+0x78>)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80039f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 256; i++)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	3301      	adds	r3, #1
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2bff      	cmp	r3, #255	; 0xff
 8003a02:	ddd1      	ble.n	80039a8 <PEC10_Table_initialize+0x10>
	}
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	20000498 	.word	0x20000498

08003a14 <PEC15_calc>:


uint16_t PEC15_calc(uint8_t len, //Number of bytes that will be used to calculate a PEC
		uint8_t *data //Array of data that will be used to calculate  a PEC
		)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	6039      	str	r1, [r7, #0]
 8003a1e:	71fb      	strb	r3, [r7, #7]
	uint16_t remainder, addr;
	uint8_t i;

	remainder = 16; //initialize the PEC
 8003a20:	2310      	movs	r3, #16
 8003a22:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < len; i++) // loops for each byte in data array
 8003a24:	2300      	movs	r3, #0
 8003a26:	737b      	strb	r3, [r7, #13]
 8003a28:	e018      	b.n	8003a5c <PEC15_calc+0x48>
	{
		addr = ((remainder >> 7) ^ data[i]) & 0xff; //calculate PEC table address
 8003a2a:	89fb      	ldrh	r3, [r7, #14]
 8003a2c:	09db      	lsrs	r3, r3, #7
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	7b7b      	ldrb	r3, [r7, #13]
 8003a32:	6839      	ldr	r1, [r7, #0]
 8003a34:	440b      	add	r3, r1
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	4053      	eors	r3, r2
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	817b      	strh	r3, [r7, #10]
		remainder = (remainder << 8) ^ Adbms6817.crc15Table[addr];
 8003a42:	89fb      	ldrh	r3, [r7, #14]
 8003a44:	021b      	lsls	r3, r3, #8
 8003a46:	b21a      	sxth	r2, r3
 8003a48:	897b      	ldrh	r3, [r7, #10]
 8003a4a:	490a      	ldr	r1, [pc, #40]	; (8003a74 <PEC15_calc+0x60>)
 8003a4c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003a50:	4053      	eors	r3, r2
 8003a52:	b21b      	sxth	r3, r3
 8003a54:	81fb      	strh	r3, [r7, #14]
	for (i = 0; i < len; i++) // loops for each byte in data array
 8003a56:	7b7b      	ldrb	r3, [r7, #13]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	737b      	strb	r3, [r7, #13]
 8003a5c:	7b7a      	ldrb	r2, [r7, #13]
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d3e2      	bcc.n	8003a2a <PEC15_calc+0x16>
	}
	return (remainder * 2); //The CRC15 has a 0 in the LSB so the remainder must be multiplied by 2
 8003a64:	89fb      	ldrh	r3, [r7, #14]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	b29b      	uxth	r3, r3
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr
 8003a74:	20000498 	.word	0x20000498

08003a78 <PEC10_calc>:

/* Function to calculate PEC10. When data being processed is data received from device, set bIsRxCmd to true, else set to false*/
uint16_t PEC10_calc(uint8_t *pDataBuf , uint8_t bIsRxCmd, uint8_t nLength)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	460b      	mov	r3, r1
 8003a82:	70fb      	strb	r3, [r7, #3]
 8003a84:	4613      	mov	r3, r2
 8003a86:	70bb      	strb	r3, [r7, #2]
	uint16_t nRemainder = 16u;/* PEC_SEED */
 8003a88:	2310      	movs	r3, #16
 8003a8a:	81fb      	strh	r3, [r7, #14]
	uint16_t nPolynomial = 0x8Fu;/* x10 + x7 + x3 + x2 + x + 1 <- the CRC10 polynomial 100 1000 1111 */
 8003a8c:	238f      	movs	r3, #143	; 0x8f
 8003a8e:	817b      	strh	r3, [r7, #10]
	uint8_t nByteIndex;
	uint8_t nBitIndex;
	uint16_t nTableAddr;
	for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 8003a90:	2300      	movs	r3, #0
 8003a92:	737b      	strb	r3, [r7, #13]
 8003a94:	e01b      	b.n	8003ace <PEC10_calc+0x56>
	{
		/* calculate PEC table address */
		nTableAddr = (uint16_t)((uint16_t)(nRemainder >> 2) ^ (uint8_t)pDataBuf[nByteIndex]) & (uint8_t)0xff;
 8003a96:	89fb      	ldrh	r3, [r7, #14]
 8003a98:	089b      	lsrs	r3, r3, #2
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	7b7b      	ldrb	r3, [r7, #13]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	440b      	add	r3, r1
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	4053      	eors	r3, r2
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	813b      	strh	r3, [r7, #8]
		nRemainder = ((uint16_t)(nRemainder << 8)) ^ Adbms6817.crc10Table[nTableAddr];
 8003aae:	89fb      	ldrh	r3, [r7, #14]
 8003ab0:	021b      	lsls	r3, r3, #8
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	b21a      	sxth	r2, r3
 8003ab6:	893b      	ldrh	r3, [r7, #8]
 8003ab8:	4921      	ldr	r1, [pc, #132]	; (8003b40 <PEC10_calc+0xc8>)
 8003aba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003abe:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003ac2:	4053      	eors	r3, r2
 8003ac4:	b21b      	sxth	r3, r3
 8003ac6:	81fb      	strh	r3, [r7, #14]
	for (nByteIndex = 0u; nByteIndex < nLength; ++nByteIndex)
 8003ac8:	7b7b      	ldrb	r3, [r7, #13]
 8003aca:	3301      	adds	r3, #1
 8003acc:	737b      	strb	r3, [r7, #13]
 8003ace:	7b7a      	ldrb	r2, [r7, #13]
 8003ad0:	78bb      	ldrb	r3, [r7, #2]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d3df      	bcc.n	8003a96 <PEC10_calc+0x1e>
	}
	if (bIsRxCmd == 1) /* If array is from received buffer add command counter to crc calculation */
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d10f      	bne.n	8003afc <PEC10_calc+0x84>
	{
		nRemainder ^= (uint16_t)(((uint16_t)pDataBuf[nLength] & (uint8_t)0xFC) << 2u);
 8003adc:	78bb      	ldrb	r3, [r7, #2]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	b21b      	sxth	r3, r3
 8003aec:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
 8003af0:	b21a      	sxth	r2, r3
 8003af2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003af6:	4053      	eors	r3, r2
 8003af8:	b21b      	sxth	r3, r3
 8003afa:	81fb      	strh	r3, [r7, #14]
	}
	/* Perform modulo-2 division, a bit at a time on rest of the bits */
	for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 8003afc:	2306      	movs	r3, #6
 8003afe:	733b      	strb	r3, [r7, #12]
 8003b00:	e012      	b.n	8003b28 <PEC10_calc+0xb0>
	{
		/* Try to divide the current data bit */
		if ((nRemainder & 0x200u) > 0u)
 8003b02:	89fb      	ldrh	r3, [r7, #14]
 8003b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d007      	beq.n	8003b1c <PEC10_calc+0xa4>
		{
			nRemainder = (uint16_t)((nRemainder << 1u));
 8003b0c:	89fb      	ldrh	r3, [r7, #14]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	81fb      	strh	r3, [r7, #14]
			nRemainder = (uint16_t)(nRemainder ^ nPolynomial);
 8003b12:	89fa      	ldrh	r2, [r7, #14]
 8003b14:	897b      	ldrh	r3, [r7, #10]
 8003b16:	4053      	eors	r3, r2
 8003b18:	81fb      	strh	r3, [r7, #14]
 8003b1a:	e002      	b.n	8003b22 <PEC10_calc+0xaa>
		}
		else
		{
			nRemainder = (uint16_t)((nRemainder << 1u));
 8003b1c:	89fb      	ldrh	r3, [r7, #14]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	81fb      	strh	r3, [r7, #14]
	for (nBitIndex = 6u; nBitIndex > 0u; --nBitIndex)
 8003b22:	7b3b      	ldrb	r3, [r7, #12]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	733b      	strb	r3, [r7, #12]
 8003b28:	7b3b      	ldrb	r3, [r7, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1e9      	bne.n	8003b02 <PEC10_calc+0x8a>
		}
	}
	return ((uint16_t)(nRemainder & 0x3FFu));
 8003b2e:	89fb      	ldrh	r3, [r7, #14]
 8003b30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b34:	b29b      	uxth	r3, r3
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bc80      	pop	{r7}
 8003b3e:	4770      	bx	lr
 8003b40:	20000498 	.word	0x20000498

08003b44 <Adbms6817_read_adc>:
 *  3. Cell Balancing Start : Difference between highest and lowest voltage cell more than 500mV
*/


void Adbms6817_read_adc(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b092      	sub	sp, #72	; 0x48
 8003b48:	af00      	add	r7, sp, #0
	uint8_t data[64], i;
	uint32_t sum_voltage = 0;;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	643b      	str	r3, [r7, #64]	; 0x40

	//Adbms6817_adcvax();
	Adbms6817_adcv();
 8003b4e:	f7ff fa6f 	bl	8003030 <Adbms6817_adcv>
#if 1
	Adbms6817_rdcv_reg(REG_GRP_A, NUM_OF_ADBMS6817, data);
 8003b52:	463b      	mov	r3, r7
 8003b54:	461a      	mov	r2, r3
 8003b56:	2101      	movs	r1, #1
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f7ff fa97 	bl	800308c <Adbms6817_rdcv_reg>
	Adbms6817_rdcv_reg(REG_GRP_B, NUM_OF_ADBMS6817, data);
 8003b5e:	463b      	mov	r3, r7
 8003b60:	461a      	mov	r2, r3
 8003b62:	2101      	movs	r1, #1
 8003b64:	2002      	movs	r0, #2
 8003b66:	f7ff fa91 	bl	800308c <Adbms6817_rdcv_reg>
	Adbms6817_rdcv_reg(REG_GRP_C, NUM_OF_ADBMS6817, data);
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2101      	movs	r1, #1
 8003b70:	2003      	movs	r0, #3
 8003b72:	f7ff fa8b 	bl	800308c <Adbms6817_rdcv_reg>
#else
	Adbms6817_rdcv_reg_ALL(data);
#endif
	for(i=0;i<8;i++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003b7c:	e00f      	b.n	8003b9e <Adbms6817_read_adc+0x5a>
	{
		sum_voltage += Adbms6817.voltage_cell[i];
 8003b7e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b82:	4a13      	ldr	r2, [pc, #76]	; (8003bd0 <Adbms6817_read_adc+0x8c>)
 8003b84:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b90:	4413      	add	r3, r2
 8003b92:	643b      	str	r3, [r7, #64]	; 0x40
	for(i=0;i<8;i++)
 8003b94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003b9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ba2:	2b07      	cmp	r3, #7
 8003ba4:	d9eb      	bls.n	8003b7e <Adbms6817_read_adc+0x3a>
	}

	Bms.Voltage_avg = Adbms6817.voltage_avg = sum_voltage/7;
 8003ba6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <Adbms6817_read_adc+0x90>)
 8003baa:	fba3 1302 	umull	r1, r3, r3, r2
 8003bae:	1ad2      	subs	r2, r2, r3
 8003bb0:	0852      	lsrs	r2, r2, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	089b      	lsrs	r3, r3, #2
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <Adbms6817_read_adc+0x8c>)
 8003bba:	f8a3 2410 	strh.w	r2, [r3, #1040]	; 0x410
 8003bbe:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <Adbms6817_read_adc+0x8c>)
 8003bc0:	f8b3 2410 	ldrh.w	r2, [r3, #1040]	; 0x410
 8003bc4:	4b04      	ldr	r3, [pc, #16]	; (8003bd8 <Adbms6817_read_adc+0x94>)
 8003bc6:	83da      	strh	r2, [r3, #30]
	Adbms6817_adsc(6);
	Adbms6817_rdcd_reg(REG_GRP_A, NUM_OF_ADBMS6817, data);
	Adbms6817_rdcd_reg(REG_GRP_B, NUM_OF_ADBMS6817, data);
	Adbms6817_rdcd_reg(REG_GRP_C, NUM_OF_ADBMS6817, data);
#endif
}
 8003bc8:	bf00      	nop
 8003bca:	3748      	adds	r7, #72	; 0x48
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000498 	.word	0x20000498
 8003bd4:	24924925 	.word	0x24924925
 8003bd8:	20000360 	.word	0x20000360

08003bdc <Adbms6817_init_reg>:

void Adbms6817_init_reg(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
	uint8_t i;

	for(i=0;i<NUM_OF_CELL;i++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	71fb      	strb	r3, [r7, #7]
 8003be6:	e012      	b.n	8003c0e <Adbms6817_init_reg+0x32>
	{
		Adbms6817_discharge_cell_continuously(i, FALSE);
 8003be8:	79fb      	ldrb	r3, [r7, #7]
 8003bea:	2100      	movs	r1, #0
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fd2b 	bl	8003648 <Adbms6817_discharge_cell_continuously>
		Adbms6817_discharge_cell_pwm(i, FALSE);
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff fda0 	bl	800373c <Adbms6817_discharge_cell_pwm>
		Adbms6817.discharge_state[i] = FALSE;
 8003bfc:	79fb      	ldrb	r3, [r7, #7]
 8003bfe:	4a08      	ldr	r2, [pc, #32]	; (8003c20 <Adbms6817_init_reg+0x44>)
 8003c00:	4413      	add	r3, r2
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
	for(i=0;i<NUM_OF_CELL;i++)
 8003c08:	79fb      	ldrb	r3, [r7, #7]
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	71fb      	strb	r3, [r7, #7]
 8003c0e:	79fb      	ldrb	r3, [r7, #7]
 8003c10:	2b06      	cmp	r3, #6
 8003c12:	d9e9      	bls.n	8003be8 <Adbms6817_init_reg+0xc>
	}
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	3708      	adds	r7, #8
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000498 	.word	0x20000498

08003c24 <wakeup_idle>:

void wakeup_idle()
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
	Adbms6817_CS_low
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2110      	movs	r1, #16
 8003c2c:	4806      	ldr	r0, [pc, #24]	; (8003c48 <wakeup_idle+0x24>)
 8003c2e:	f004 ff60 	bl	8008af2 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8003c32:	200a      	movs	r0, #10
 8003c34:	f002 feba 	bl	80069ac <HAL_Delay>
	Adbms6817_CS_high
 8003c38:	2201      	movs	r2, #1
 8003c3a:	2110      	movs	r1, #16
 8003c3c:	4802      	ldr	r0, [pc, #8]	; (8003c48 <wakeup_idle+0x24>)
 8003c3e:	f004 ff58 	bl	8008af2 <HAL_GPIO_WritePin>
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40010800 	.word	0x40010800

08003c4c <spi_write_array>:

void spi_write_array(uint8_t len, // Option: Number of bytes to be written on the SPI port
		uint8_t data[] //Array of bytes to be written on the SPI port
		)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	6039      	str	r1, [r7, #0]
 8003c56:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < len; i++)
 8003c58:	2300      	movs	r3, #0
 8003c5a:	73fb      	strb	r3, [r7, #15]
 8003c5c:	e00b      	b.n	8003c76 <spi_write_array+0x2a>
	{
		//SPI1_ReadWriteByte((uint8_t) data[i]);
		HAL_SPI_Transmit(&hspi1, &data[i], 1, 1000);
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	18d1      	adds	r1, r2, r3
 8003c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c68:	2201      	movs	r2, #1
 8003c6a:	4807      	ldr	r0, [pc, #28]	; (8003c88 <spi_write_array+0x3c>)
 8003c6c:	f005 ffdd 	bl	8009c2a <HAL_SPI_Transmit>
	for (i = 0; i < len; i++)
 8003c70:	7bfb      	ldrb	r3, [r7, #15]
 8003c72:	3301      	adds	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
 8003c76:	7bfa      	ldrb	r2, [r7, #15]
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d3ef      	bcc.n	8003c5e <spi_write_array+0x12>
	}
}
 8003c7e:	bf00      	nop
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	200013c0 	.word	0x200013c0

08003c8c <spi_write_read>:
void spi_write_read(uint8_t tx_Data[], //array of data to be written on SPI port
		uint8_t tx_len, //length of the tx data arry
		uint8_t *rx_data, //Input: array that will store the data read by the SPI port
		uint8_t rx_len //Option: number of bytes to be read from the SPI port
		)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af02      	add	r7, sp, #8
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	607a      	str	r2, [r7, #4]
 8003c96:	461a      	mov	r2, r3
 8003c98:	460b      	mov	r3, r1
 8003c9a:	72fb      	strb	r3, [r7, #11]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	for (i = 0; i < tx_len; i++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	75fb      	strb	r3, [r7, #23]
 8003ca4:	e00b      	b.n	8003cbe <spi_write_read+0x32>
	{
		//SPI1_ReadWriteByte(tx_Data[i]);
		HAL_SPI_Transmit(&hspi1, &tx_Data[i], 1, 1000);
 8003ca6:	7dfb      	ldrb	r3, [r7, #23]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	18d1      	adds	r1, r2, r3
 8003cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	4815      	ldr	r0, [pc, #84]	; (8003d08 <spi_write_read+0x7c>)
 8003cb4:	f005 ffb9 	bl	8009c2a <HAL_SPI_Transmit>
	for (i = 0; i < tx_len; i++)
 8003cb8:	7dfb      	ldrb	r3, [r7, #23]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	75fb      	strb	r3, [r7, #23]
 8003cbe:	7dfa      	ldrb	r2, [r7, #23]
 8003cc0:	7afb      	ldrb	r3, [r7, #11]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d3ef      	bcc.n	8003ca6 <spi_write_read+0x1a>
	}

	for (i = 0; i < rx_len; i++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	75fb      	strb	r3, [r7, #23]
 8003cca:	e014      	b.n	8003cf6 <spi_write_read+0x6a>
	{
		tx_Data[i] = 0x00;
 8003ccc:	7dfb      	ldrb	r3, [r7, #23]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	701a      	strb	r2, [r3, #0]
		HAL_SPI_TransmitReceive(&hspi1, &tx_Data[i], &rx_data[i], 1, 1000);
 8003cd6:	7dfb      	ldrb	r3, [r7, #23]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	18d1      	adds	r1, r2, r3
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	441a      	add	r2, r3
 8003ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	2301      	movs	r3, #1
 8003cea:	4807      	ldr	r0, [pc, #28]	; (8003d08 <spi_write_read+0x7c>)
 8003cec:	f006 f8e0 	bl	8009eb0 <HAL_SPI_TransmitReceive>
	for (i = 0; i < rx_len; i++)
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	75fb      	strb	r3, [r7, #23]
 8003cf6:	7dfa      	ldrb	r2, [r7, #23]
 8003cf8:	7abb      	ldrb	r3, [r7, #10]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d3e6      	bcc.n	8003ccc <spi_write_read+0x40>
	}
}
 8003cfe:	bf00      	nop
 8003d00:	bf00      	nop
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	200013c0 	.word	0x200013c0

08003d0c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d12:	1d3b      	adds	r3, r7, #4
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8003d1c:	4b2e      	ldr	r3, [pc, #184]	; (8003dd8 <MX_ADC1_Init+0xcc>)
 8003d1e:	4a2f      	ldr	r2, [pc, #188]	; (8003ddc <MX_ADC1_Init+0xd0>)
 8003d20:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003d22:	4b2d      	ldr	r3, [pc, #180]	; (8003dd8 <MX_ADC1_Init+0xcc>)
 8003d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003d2a:	4b2b      	ldr	r3, [pc, #172]	; (8003dd8 <MX_ADC1_Init+0xcc>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d30:	4b29      	ldr	r3, [pc, #164]	; (8003dd8 <MX_ADC1_Init+0xcc>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d36:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <MX_ADC1_Init+0xcc>)
 8003d38:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003d3c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d3e:	4b26      	ldr	r3, [pc, #152]	; (8003dd8 <MX_ADC1_Init+0xcc>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8003d44:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <MX_ADC1_Init+0xcc>)
 8003d46:	2204      	movs	r2, #4
 8003d48:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d4a:	4823      	ldr	r0, [pc, #140]	; (8003dd8 <MX_ADC1_Init+0xcc>)
 8003d4c:	f002 fe52 	bl	80069f4 <HAL_ADC_Init>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8003d56:	f001 f906 	bl	8004f66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003d5a:	230c      	movs	r3, #12
 8003d5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8003d62:	2302      	movs	r3, #2
 8003d64:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d66:	1d3b      	adds	r3, r7, #4
 8003d68:	4619      	mov	r1, r3
 8003d6a:	481b      	ldr	r0, [pc, #108]	; (8003dd8 <MX_ADC1_Init+0xcc>)
 8003d6c:	f003 f814 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003d76:	f001 f8f6 	bl	8004f66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003d7a:	230d      	movs	r3, #13
 8003d7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d82:	1d3b      	adds	r3, r7, #4
 8003d84:	4619      	mov	r1, r3
 8003d86:	4814      	ldr	r0, [pc, #80]	; (8003dd8 <MX_ADC1_Init+0xcc>)
 8003d88:	f003 f806 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8003d92:	f001 f8e8 	bl	8004f66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003d96:	2301      	movs	r3, #1
 8003d98:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d9e:	1d3b      	adds	r3, r7, #4
 8003da0:	4619      	mov	r1, r3
 8003da2:	480d      	ldr	r0, [pc, #52]	; (8003dd8 <MX_ADC1_Init+0xcc>)
 8003da4:	f002 fff8 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8003dae:	f001 f8da 	bl	8004f66 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003db2:	230b      	movs	r3, #11
 8003db4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003db6:	2304      	movs	r3, #4
 8003db8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003dba:	1d3b      	adds	r3, r7, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4806      	ldr	r0, [pc, #24]	; (8003dd8 <MX_ADC1_Init+0xcc>)
 8003dc0:	f002 ffea 	bl	8006d98 <HAL_ADC_ConfigChannel>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8003dca:	f001 f8cc 	bl	8004f66 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	200012b8 	.word	0x200012b8
 8003ddc:	40012400 	.word	0x40012400

08003de0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b08a      	sub	sp, #40	; 0x28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003de8:	f107 0318 	add.w	r3, r7, #24
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a33      	ldr	r2, [pc, #204]	; (8003ec8 <HAL_ADC_MspInit+0xe8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d15f      	bne.n	8003ec0 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e00:	4b32      	ldr	r3, [pc, #200]	; (8003ecc <HAL_ADC_MspInit+0xec>)
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	4a31      	ldr	r2, [pc, #196]	; (8003ecc <HAL_ADC_MspInit+0xec>)
 8003e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e0a:	6193      	str	r3, [r2, #24]
 8003e0c:	4b2f      	ldr	r3, [pc, #188]	; (8003ecc <HAL_ADC_MspInit+0xec>)
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e18:	4b2c      	ldr	r3, [pc, #176]	; (8003ecc <HAL_ADC_MspInit+0xec>)
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	4a2b      	ldr	r2, [pc, #172]	; (8003ecc <HAL_ADC_MspInit+0xec>)
 8003e1e:	f043 0310 	orr.w	r3, r3, #16
 8003e22:	6193      	str	r3, [r2, #24]
 8003e24:	4b29      	ldr	r3, [pc, #164]	; (8003ecc <HAL_ADC_MspInit+0xec>)
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e30:	4b26      	ldr	r3, [pc, #152]	; (8003ecc <HAL_ADC_MspInit+0xec>)
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	4a25      	ldr	r2, [pc, #148]	; (8003ecc <HAL_ADC_MspInit+0xec>)
 8003e36:	f043 0304 	orr.w	r3, r3, #4
 8003e3a:	6193      	str	r3, [r2, #24]
 8003e3c:	4b23      	ldr	r3, [pc, #140]	; (8003ecc <HAL_ADC_MspInit+0xec>)
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = aBAT_CURRENT_Pin|aNTC1_Pin|aNTC0_Pin;
 8003e48:	230e      	movs	r3, #14
 8003e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e50:	f107 0318 	add.w	r3, r7, #24
 8003e54:	4619      	mov	r1, r3
 8003e56:	481e      	ldr	r0, [pc, #120]	; (8003ed0 <HAL_ADC_MspInit+0xf0>)
 8003e58:	f004 fcb0 	bl	80087bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = aCT_SENSE_Pin;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e60:	2303      	movs	r3, #3
 8003e62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(aCT_SENSE_GPIO_Port, &GPIO_InitStruct);
 8003e64:	f107 0318 	add.w	r3, r7, #24
 8003e68:	4619      	mov	r1, r3
 8003e6a:	481a      	ldr	r0, [pc, #104]	; (8003ed4 <HAL_ADC_MspInit+0xf4>)
 8003e6c:	f004 fca6 	bl	80087bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003e70:	4b19      	ldr	r3, [pc, #100]	; (8003ed8 <HAL_ADC_MspInit+0xf8>)
 8003e72:	4a1a      	ldr	r2, [pc, #104]	; (8003edc <HAL_ADC_MspInit+0xfc>)
 8003e74:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e76:	4b18      	ldr	r3, [pc, #96]	; (8003ed8 <HAL_ADC_MspInit+0xf8>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e7c:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <HAL_ADC_MspInit+0xf8>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003e82:	4b15      	ldr	r3, [pc, #84]	; (8003ed8 <HAL_ADC_MspInit+0xf8>)
 8003e84:	2280      	movs	r2, #128	; 0x80
 8003e86:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e88:	4b13      	ldr	r3, [pc, #76]	; (8003ed8 <HAL_ADC_MspInit+0xf8>)
 8003e8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e8e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e90:	4b11      	ldr	r3, [pc, #68]	; (8003ed8 <HAL_ADC_MspInit+0xf8>)
 8003e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e96:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003e98:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <HAL_ADC_MspInit+0xf8>)
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003e9e:	4b0e      	ldr	r3, [pc, #56]	; (8003ed8 <HAL_ADC_MspInit+0xf8>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003ea4:	480c      	ldr	r0, [pc, #48]	; (8003ed8 <HAL_ADC_MspInit+0xf8>)
 8003ea6:	f003 ffe7 	bl	8007e78 <HAL_DMA_Init>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8003eb0:	f001 f859 	bl	8004f66 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a08      	ldr	r2, [pc, #32]	; (8003ed8 <HAL_ADC_MspInit+0xf8>)
 8003eb8:	621a      	str	r2, [r3, #32]
 8003eba:	4a07      	ldr	r2, [pc, #28]	; (8003ed8 <HAL_ADC_MspInit+0xf8>)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003ec0:	bf00      	nop
 8003ec2:	3728      	adds	r7, #40	; 0x28
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40012400 	.word	0x40012400
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40011000 	.word	0x40011000
 8003ed4:	40010800 	.word	0x40010800
 8003ed8:	200012e8 	.word	0x200012e8
 8003edc:	40020008 	.word	0x40020008

08003ee0 <BMS_Cell_Balancing>:


#include "main.h"

void BMS_Cell_Balancing(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08a      	sub	sp, #40	; 0x28
 8003ee4:	af00      	add	r7, sp, #0
	uint8_t i, j;
	uint16_t low_voltage = 0xFFFF;
 8003ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003eea:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t sort_cell[2][7] = {0,}, temp_i, temp_voltage;
 8003eec:	1d3b      	adds	r3, r7, #4
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
 8003ef4:	609a      	str	r2, [r3, #8]
 8003ef6:	60da      	str	r2, [r3, #12]
 8003ef8:	611a      	str	r2, [r3, #16]
 8003efa:	615a      	str	r2, [r3, #20]
 8003efc:	619a      	str	r2, [r3, #24]
	}
#endif

	// All Off cell balancing
	//printf("discharge_state : ");
	for(i=0;i<NUM_OF_CELL;i++)
 8003efe:	2300      	movs	r3, #0
 8003f00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f04:	e032      	b.n	8003f6c <BMS_Cell_Balancing+0x8c>
	{
		if(Adbms6817.discharge_state[i])
 8003f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f0a:	4ab5      	ldr	r2, [pc, #724]	; (80041e0 <BMS_Cell_Balancing+0x300>)
 8003f0c:	4413      	add	r3, r2
 8003f0e:	f893 3426 	ldrb.w	r3, [r3, #1062]	; 0x426
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00c      	beq.n	8003f30 <BMS_Cell_Balancing+0x50>
		{
#ifdef USE_CELL_BALANCING_CONTINUOUSLY
			Adbms6817_discharge_cell_continuously(i, FALSE);
 8003f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff fb93 	bl	8003648 <Adbms6817_discharge_cell_continuously>
#endif
#ifdef USE_CELL_BALANCING_PWM
			Adbms6817_discharge_cell_pwm(i, FALSE);
#endif
			Adbms6817.discharge_state[i] = FALSE;
 8003f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f26:	4aae      	ldr	r2, [pc, #696]	; (80041e0 <BMS_Cell_Balancing+0x300>)
 8003f28:	4413      	add	r3, r2
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
		}

		sort_cell[1][i] = i;
 8003f30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f34:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003f38:	b292      	uxth	r2, r2
 8003f3a:	3307      	adds	r3, #7
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	3328      	adds	r3, #40	; 0x28
 8003f40:	443b      	add	r3, r7
 8003f42:	f823 2c24 	strh.w	r2, [r3, #-36]
		sort_cell[0][i] = Adbms6817.voltage_cell[i];
 8003f46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f4e:	49a4      	ldr	r1, [pc, #656]	; (80041e0 <BMS_Cell_Balancing+0x300>)
 8003f50:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8003f54:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	3328      	adds	r3, #40	; 0x28
 8003f5c:	443b      	add	r3, r7
 8003f5e:	f823 2c24 	strh.w	r2, [r3, #-36]
	for(i=0;i<NUM_OF_CELL;i++)
 8003f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f66:	3301      	adds	r3, #1
 8003f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f70:	2b06      	cmp	r3, #6
 8003f72:	d9c8      	bls.n	8003f06 <BMS_Cell_Balancing+0x26>
	}
	// Read ADC for cell voltage
	Adbms6817_read_adc();
 8003f74:	f7ff fde6 	bl	8003b44 <Adbms6817_read_adc>

	// sort for cell voltage
	for(i=0;i<NUM_OF_CELL;i++)
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003f7e:	e068      	b.n	8004052 <BMS_Cell_Balancing+0x172>
	{
		for(j=0;j<NUM_OF_CELL-1;j++)
 8003f80:	2300      	movs	r3, #0
 8003f82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003f86:	e05b      	b.n	8004040 <BMS_Cell_Balancing+0x160>
		{
			if(sort_cell[0][j] < sort_cell[0][j+1])
 8003f88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	3328      	adds	r3, #40	; 0x28
 8003f90:	443b      	add	r3, r7
 8003f92:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003f96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	3328      	adds	r3, #40	; 0x28
 8003fa0:	443b      	add	r3, r7
 8003fa2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d245      	bcs.n	8004036 <BMS_Cell_Balancing+0x156>
			{
				temp_voltage = sort_cell[0][j];
 8003faa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	3328      	adds	r3, #40	; 0x28
 8003fb2:	443b      	add	r3, r7
 8003fb4:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003fb8:	847b      	strh	r3, [r7, #34]	; 0x22
				temp_i = sort_cell[1][j];
 8003fba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003fbe:	3307      	adds	r3, #7
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	3328      	adds	r3, #40	; 0x28
 8003fc4:	443b      	add	r3, r7
 8003fc6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003fca:	843b      	strh	r3, [r7, #32]

				sort_cell[0][j] = sort_cell[0][j+1];
 8003fcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	3328      	adds	r3, #40	; 0x28
 8003fda:	443b      	add	r3, r7
 8003fdc:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003fe0:	0053      	lsls	r3, r2, #1
 8003fe2:	3328      	adds	r3, #40	; 0x28
 8003fe4:	443b      	add	r3, r7
 8003fe6:	460a      	mov	r2, r1
 8003fe8:	f823 2c24 	strh.w	r2, [r3, #-36]
				sort_cell[1][j] = sort_cell[1][j+1];
 8003fec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003ff6:	3307      	adds	r3, #7
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	3328      	adds	r3, #40	; 0x28
 8003ffc:	443b      	add	r3, r7
 8003ffe:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8004002:	1dd3      	adds	r3, r2, #7
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	3328      	adds	r3, #40	; 0x28
 8004008:	443b      	add	r3, r7
 800400a:	460a      	mov	r2, r1
 800400c:	f823 2c24 	strh.w	r2, [r3, #-36]

				sort_cell[0][j+1] = temp_voltage;
 8004010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004014:	3301      	adds	r3, #1
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	3328      	adds	r3, #40	; 0x28
 800401a:	443b      	add	r3, r7
 800401c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800401e:	f823 2c24 	strh.w	r2, [r3, #-36]
				sort_cell[1][j+1] = temp_i;
 8004022:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004026:	3301      	adds	r3, #1
 8004028:	3307      	adds	r3, #7
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	3328      	adds	r3, #40	; 0x28
 800402e:	443b      	add	r3, r7
 8004030:	8c3a      	ldrh	r2, [r7, #32]
 8004032:	f823 2c24 	strh.w	r2, [r3, #-36]
		for(j=0;j<NUM_OF_CELL-1;j++)
 8004036:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800403a:	3301      	adds	r3, #1
 800403c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004040:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004044:	2b05      	cmp	r3, #5
 8004046:	d99f      	bls.n	8003f88 <BMS_Cell_Balancing+0xa8>
	for(i=0;i<NUM_OF_CELL;i++)
 8004048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800404c:	3301      	adds	r3, #1
 800404e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004056:	2b06      	cmp	r3, #6
 8004058:	d992      	bls.n	8003f80 <BMS_Cell_Balancing+0xa0>
			}

		}

	}
	low_voltage = sort_cell[0][6];
 800405a:	8a3b      	ldrh	r3, [r7, #16]
 800405c:	84bb      	strh	r3, [r7, #36]	; 0x24

	// Cell Balancing
	for(i=0;i<NUM_OF_CELL;i++)
 800405e:	2300      	movs	r3, #0
 8004060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004064:	e097      	b.n	8004196 <BMS_Cell_Balancing+0x2b6>
	{
		if((sort_cell[0][i] >= 40000) && (sort_cell[0][i] - low_voltage) > VOLT_BALANCING_THRESHOLD)	// 1mV
 8004066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	3328      	adds	r3, #40	; 0x28
 800406e:	443b      	add	r3, r7
 8004070:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004074:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8004078:	4293      	cmp	r3, r2
 800407a:	f240 8087 	bls.w	800418c <BMS_Cell_Balancing+0x2ac>
 800407e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	3328      	adds	r3, #40	; 0x28
 8004086:	443b      	add	r3, r7
 8004088:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800408c:	461a      	mov	r2, r3
 800408e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b0a      	cmp	r3, #10
 8004094:	dd7a      	ble.n	800418c <BMS_Cell_Balancing+0x2ac>
		{
#ifdef USE_CELL_BALANCING_CONTINUOUSLY
			if(sort_cell[1][i] == 0)
 8004096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800409a:	3307      	adds	r3, #7
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	3328      	adds	r3, #40	; 0x28
 80040a0:	443b      	add	r3, r7
 80040a2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d11c      	bne.n	80040e4 <BMS_Cell_Balancing+0x204>
			{
				if(Adbms6817.discharge_state[sort_cell[1][i] + 1] == 0)
 80040aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040ae:	3307      	adds	r3, #7
 80040b0:	005b      	lsls	r3, r3, #1
 80040b2:	3328      	adds	r3, #40	; 0x28
 80040b4:	443b      	add	r3, r7
 80040b6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80040ba:	3301      	adds	r3, #1
 80040bc:	4a48      	ldr	r2, [pc, #288]	; (80041e0 <BMS_Cell_Balancing+0x300>)
 80040be:	4413      	add	r3, r2
 80040c0:	f893 3426 	ldrb.w	r3, [r3, #1062]	; 0x426
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d10d      	bne.n	80040e4 <BMS_Cell_Balancing+0x204>
					Adbms6817.discharge_state[sort_cell[1][i]] = TRUE;
 80040c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040cc:	3307      	adds	r3, #7
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	3328      	adds	r3, #40	; 0x28
 80040d2:	443b      	add	r3, r7
 80040d4:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80040d8:	461a      	mov	r2, r3
 80040da:	4b41      	ldr	r3, [pc, #260]	; (80041e0 <BMS_Cell_Balancing+0x300>)
 80040dc:	4413      	add	r3, r2
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426

			}
			if(sort_cell[1][i] == 6)
 80040e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040e8:	3307      	adds	r3, #7
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	3328      	adds	r3, #40	; 0x28
 80040ee:	443b      	add	r3, r7
 80040f0:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80040f4:	2b06      	cmp	r3, #6
 80040f6:	d11d      	bne.n	8004134 <BMS_Cell_Balancing+0x254>
			{
				if(Adbms6817.discharge_state[sort_cell[1][i] - 1] == 0)
 80040f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040fc:	3307      	adds	r3, #7
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	3328      	adds	r3, #40	; 0x28
 8004102:	443b      	add	r3, r7
 8004104:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004108:	3b01      	subs	r3, #1
 800410a:	4a35      	ldr	r2, [pc, #212]	; (80041e0 <BMS_Cell_Balancing+0x300>)
 800410c:	4413      	add	r3, r2
 800410e:	f893 3426 	ldrb.w	r3, [r3, #1062]	; 0x426
 8004112:	2b00      	cmp	r3, #0
 8004114:	d13a      	bne.n	800418c <BMS_Cell_Balancing+0x2ac>
					Adbms6817.discharge_state[sort_cell[1][i]] = TRUE;
 8004116:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800411a:	3307      	adds	r3, #7
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	3328      	adds	r3, #40	; 0x28
 8004120:	443b      	add	r3, r7
 8004122:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004126:	461a      	mov	r2, r3
 8004128:	4b2d      	ldr	r3, [pc, #180]	; (80041e0 <BMS_Cell_Balancing+0x300>)
 800412a:	4413      	add	r3, r2
 800412c:	2201      	movs	r2, #1
 800412e:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
 8004132:	e02b      	b.n	800418c <BMS_Cell_Balancing+0x2ac>

			}
			else
			{
				if((Adbms6817.discharge_state[sort_cell[1][i] - 1] == 0) && (Adbms6817.discharge_state[sort_cell[1][i] + 1] == 0))
 8004134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004138:	3307      	adds	r3, #7
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	3328      	adds	r3, #40	; 0x28
 800413e:	443b      	add	r3, r7
 8004140:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004144:	3b01      	subs	r3, #1
 8004146:	4a26      	ldr	r2, [pc, #152]	; (80041e0 <BMS_Cell_Balancing+0x300>)
 8004148:	4413      	add	r3, r2
 800414a:	f893 3426 	ldrb.w	r3, [r3, #1062]	; 0x426
 800414e:	2b00      	cmp	r3, #0
 8004150:	d11c      	bne.n	800418c <BMS_Cell_Balancing+0x2ac>
 8004152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004156:	3307      	adds	r3, #7
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	3328      	adds	r3, #40	; 0x28
 800415c:	443b      	add	r3, r7
 800415e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004162:	3301      	adds	r3, #1
 8004164:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <BMS_Cell_Balancing+0x300>)
 8004166:	4413      	add	r3, r2
 8004168:	f893 3426 	ldrb.w	r3, [r3, #1062]	; 0x426
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10d      	bne.n	800418c <BMS_Cell_Balancing+0x2ac>
					Adbms6817.discharge_state[sort_cell[1][i]] = TRUE;
 8004170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004174:	3307      	adds	r3, #7
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	3328      	adds	r3, #40	; 0x28
 800417a:	443b      	add	r3, r7
 800417c:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004180:	461a      	mov	r2, r3
 8004182:	4b17      	ldr	r3, [pc, #92]	; (80041e0 <BMS_Cell_Balancing+0x300>)
 8004184:	4413      	add	r3, r2
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
	for(i=0;i<NUM_OF_CELL;i++)
 800418c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004190:	3301      	adds	r3, #1
 8004192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800419a:	2b06      	cmp	r3, #6
 800419c:	f67f af63 	bls.w	8004066 <BMS_Cell_Balancing+0x186>
#ifdef USE_CELL_BALANCING_PWM
			Adbms6817.discharge_state[sort_cell[1][i]] = TRUE;
#endif
		}
	}
	for(i=0;i<NUM_OF_CELL;i++)
 80041a0:	2300      	movs	r3, #0
 80041a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80041a6:	e012      	b.n	80041ce <BMS_Cell_Balancing+0x2ee>
	{
		if(Adbms6817.discharge_state[i])
 80041a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041ac:	4a0c      	ldr	r2, [pc, #48]	; (80041e0 <BMS_Cell_Balancing+0x300>)
 80041ae:	4413      	add	r3, r2
 80041b0:	f893 3426 	ldrb.w	r3, [r3, #1062]	; 0x426
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <BMS_Cell_Balancing+0x2e4>
		{
#ifdef USE_CELL_BALANCING_CONTINUOUSLY
			Adbms6817_discharge_cell_continuously(i, TRUE);
 80041b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041bc:	2101      	movs	r1, #1
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fa42 	bl	8003648 <Adbms6817_discharge_cell_continuously>
	for(i=0;i<NUM_OF_CELL;i++)
 80041c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041c8:	3301      	adds	r3, #1
 80041ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80041ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80041d2:	2b06      	cmp	r3, #6
 80041d4:	d9e8      	bls.n	80041a8 <BMS_Cell_Balancing+0x2c8>
			Adbms6817_discharge_cell_pwm(i, TRUE);
#endif
		}
	}

}
 80041d6:	bf00      	nop
 80041d8:	bf00      	nop
 80041da:	3728      	adds	r7, #40	; 0x28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	20000498 	.word	0x20000498

080041e4 <Broadcast_data>:

void Broadcast_data(void)
{
 80041e4:	b590      	push	{r4, r7, lr}
 80041e6:	b093      	sub	sp, #76	; 0x4c
 80041e8:	af00      	add	r7, sp, #0
	uint8_t data[64], size=0, i;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	//broadcast_data.state_avg_voltage.state_avg_voltage = Adbms6817.voltage_avg;
	broadcast_data.AvgVoltage.data = Adbms6817.voltage_avg;
 80041f0:	4b1d      	ldr	r3, [pc, #116]	; (8004268 <Broadcast_data+0x84>)
 80041f2:	f8b3 2410 	ldrh.w	r2, [r3, #1040]	; 0x410
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <Broadcast_data+0x88>)
 80041f8:	801a      	strh	r2, [r3, #0]
	broadcast_data.BatCurrent.data = g_Adc_ct_Amp;
 80041fa:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <Broadcast_data+0x8c>)
 80041fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004200:	4b1a      	ldr	r3, [pc, #104]	; (800426c <Broadcast_data+0x88>)
 8004202:	805a      	strh	r2, [r3, #2]
	broadcast_data.Soc.data = (uint16_t)(Bms.Soc*100);
 8004204:	4b1b      	ldr	r3, [pc, #108]	; (8004274 <Broadcast_data+0x90>)
 8004206:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <Broadcast_data+0x94>)
 8004210:	f7fc f962 	bl	80004d8 <__aeabi_dmul>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4610      	mov	r0, r2
 800421a:	4619      	mov	r1, r3
 800421c:	f7fc fbf6 	bl	8000a0c <__aeabi_d2uiz>
 8004220:	4603      	mov	r3, r0
 8004222:	b29a      	uxth	r2, r3
 8004224:	4b11      	ldr	r3, [pc, #68]	; (800426c <Broadcast_data+0x88>)
 8004226:	809a      	strh	r2, [r3, #4]
	for(i=0;i<8;i++)
 8004228:	2300      	movs	r3, #0
 800422a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800422e:	e012      	b.n	8004256 <Broadcast_data+0x72>
	{
		broadcast_data.CellVoltage[i].data = Adbms6817.voltage_cell[i];
 8004230:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8004234:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004238:	490b      	ldr	r1, [pc, #44]	; (8004268 <Broadcast_data+0x84>)
 800423a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800423e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <Broadcast_data+0x88>)
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	4413      	add	r3, r2
 8004248:	460a      	mov	r2, r1
 800424a:	80da      	strh	r2, [r3, #6]
	for(i=0;i<8;i++)
 800424c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004250:	3301      	adds	r3, #1
 8004252:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004256:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800425a:	2b07      	cmp	r3, #7
 800425c:	d9e8      	bls.n	8004230 <Broadcast_data+0x4c>
	}
	for(i=0;i<2;i++)
 800425e:	2300      	movs	r3, #0
 8004260:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004264:	e03c      	b.n	80042e0 <Broadcast_data+0xfc>
 8004266:	bf00      	nop
 8004268:	20000498 	.word	0x20000498
 800426c:	200009dc 	.word	0x200009dc
 8004270:	20000c40 	.word	0x20000c40
 8004274:	20000360 	.word	0x20000360
 8004278:	40590000 	.word	0x40590000
	{
		broadcast_data.MaxTemperature[i].data = Bms.MaxTemperature[i];
 800427c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004280:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8004284:	49dc      	ldr	r1, [pc, #880]	; (80045f8 <Broadcast_data+0x414>)
 8004286:	3308      	adds	r3, #8
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	440b      	add	r3, r1
 800428c:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8004290:	49da      	ldr	r1, [pc, #872]	; (80045fc <Broadcast_data+0x418>)
 8004292:	f102 0308 	add.w	r3, r2, #8
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	440b      	add	r3, r1
 800429a:	4602      	mov	r2, r0
 800429c:	80da      	strh	r2, [r3, #6]
		broadcast_data.MinTemperature[i].data = Bms.MinTemperature[i];
 800429e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80042a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80042a6:	49d4      	ldr	r1, [pc, #848]	; (80045f8 <Broadcast_data+0x414>)
 80042a8:	320c      	adds	r2, #12
 80042aa:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80042ae:	4ad3      	ldr	r2, [pc, #844]	; (80045fc <Broadcast_data+0x418>)
 80042b0:	330c      	adds	r3, #12
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4413      	add	r3, r2
 80042b6:	460a      	mov	r2, r1
 80042b8:	805a      	strh	r2, [r3, #2]
		broadcast_data.Temperature[i].data = Bms.Temperature[i];
 80042ba:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80042be:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80042c2:	49cd      	ldr	r1, [pc, #820]	; (80045f8 <Broadcast_data+0x414>)
 80042c4:	3208      	adds	r2, #8
 80042c6:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 80042ca:	4acc      	ldr	r2, [pc, #816]	; (80045fc <Broadcast_data+0x418>)
 80042cc:	330c      	adds	r3, #12
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	4413      	add	r3, r2
 80042d2:	460a      	mov	r2, r1
 80042d4:	80da      	strh	r2, [r3, #6]
	for(i=0;i<2;i++)
 80042d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80042da:	3301      	adds	r3, #1
 80042dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80042e0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d9c9      	bls.n	800427c <Broadcast_data+0x98>
	}
	broadcast_data.CoulombCount.data = Bms.CoulumbCount;
 80042e8:	4bc3      	ldr	r3, [pc, #780]	; (80045f8 <Broadcast_data+0x414>)
 80042ea:	f9b3 201c 	ldrsh.w	r2, [r3, #28]
 80042ee:	4bc3      	ldr	r3, [pc, #780]	; (80045fc <Broadcast_data+0x418>)
 80042f0:	845a      	strh	r2, [r3, #34]	; 0x22
	broadcast_data.status.data = Bms.Status.data;
 80042f2:	4bc1      	ldr	r3, [pc, #772]	; (80045f8 <Broadcast_data+0x414>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4ac1      	ldr	r2, [pc, #772]	; (80045fc <Broadcast_data+0x418>)
 80042f8:	6253      	str	r3, [r2, #36]	; 0x24
	}
	printf("\r\n");
#endif
	//printf("%X, %X, %X\r\n", broadcast_data.avg_voltage.voltage, broadcast_data.avg_voltage.byte.high, broadcast_data.avg_voltage.byte.low);

	size = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	//Status 8 Byte
	data[size++] = 0xAA;	// HEAD
 8004300:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800430a:	3348      	adds	r3, #72	; 0x48
 800430c:	443b      	add	r3, r7
 800430e:	22aa      	movs	r2, #170	; 0xaa
 8004310:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = 0x00;	// UART_TYPE_BMS_STATUS
 8004314:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800431e:	3348      	adds	r3, #72	; 0x48
 8004320:	443b      	add	r3, r7
 8004322:	2200      	movs	r2, #0
 8004324:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = 0x01;	// BMS_OK
 8004328:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8004332:	3348      	adds	r3, #72	; 0x48
 8004334:	443b      	add	r3, r7
 8004336:	2201      	movs	r2, #1
 8004338:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = 0x00;	// BMS_FAULT
 800433c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8004346:	3348      	adds	r3, #72	; 0x48
 8004348:	443b      	add	r3, r7
 800434a:	2200      	movs	r2, #0
 800434c:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = IS_EX_CHARGING_RELAY_CHECK;
 8004350:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800435a:	461c      	mov	r4, r3
 800435c:	2140      	movs	r1, #64	; 0x40
 800435e:	48a8      	ldr	r0, [pc, #672]	; (8004600 <Broadcast_data+0x41c>)
 8004360:	f004 fbb0 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8004364:	4603      	mov	r3, r0
 8004366:	461a      	mov	r2, r3
 8004368:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800436c:	443b      	add	r3, r7
 800436e:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = IS_MOTOR_RELAY_CHECK;
 8004372:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800437c:	461c      	mov	r4, r3
 800437e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004382:	48a0      	ldr	r0, [pc, #640]	; (8004604 <Broadcast_data+0x420>)
 8004384:	f004 fb9e 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8004388:	4603      	mov	r3, r0
 800438a:	461a      	mov	r2, r3
 800438c:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8004390:	443b      	add	r3, r7
 8004392:	f803 2c44 	strb.w	r2, [r3, #-68]
	//data[size++] = IS_PRE_CHARGE_CHECK;
	data[size++] = 0;
 8004396:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80043a0:	3348      	adds	r3, #72	; 0x48
 80043a2:	443b      	add	r3, r7
 80043a4:	2200      	movs	r2, #0
 80043a6:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = IS_SMPS_RELAY_CHECK;
 80043aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80043b4:	461c      	mov	r4, r3
 80043b6:	2180      	movs	r1, #128	; 0x80
 80043b8:	4891      	ldr	r0, [pc, #580]	; (8004600 <Broadcast_data+0x41c>)
 80043ba:	f004 fb83 	bl	8008ac4 <HAL_GPIO_ReadPin>
 80043be:	4603      	mov	r3, r0
 80043c0:	461a      	mov	r2, r3
 80043c2:	f104 0348 	add.w	r3, r4, #72	; 0x48
 80043c6:	443b      	add	r3, r7
 80043c8:	f803 2c44 	strb.w	r2, [r3, #-68]

	//Temperature 16 Byte
	data[size++] = 0xAA;	// HEAD
 80043cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80043d6:	3348      	adds	r3, #72	; 0x48
 80043d8:	443b      	add	r3, r7
 80043da:	22aa      	movs	r2, #170	; 0xaa
 80043dc:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = 0x02;	// UART_TYPE_BMS_TEMP
 80043e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80043ea:	3348      	adds	r3, #72	; 0x48
 80043ec:	443b      	add	r3, r7
 80043ee:	2202      	movs	r2, #2
 80043f0:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = broadcast_data.MaxTemperature[0].byte.high;
 80043f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80043fe:	4619      	mov	r1, r3
 8004400:	4b7e      	ldr	r3, [pc, #504]	; (80045fc <Broadcast_data+0x418>)
 8004402:	7dda      	ldrb	r2, [r3, #23]
 8004404:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8004408:	443b      	add	r3, r7
 800440a:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = broadcast_data.MaxTemperature[0].byte.low;
 800440e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8004418:	4619      	mov	r1, r3
 800441a:	4b78      	ldr	r3, [pc, #480]	; (80045fc <Broadcast_data+0x418>)
 800441c:	7d9a      	ldrb	r2, [r3, #22]
 800441e:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8004422:	443b      	add	r3, r7
 8004424:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = broadcast_data.MaxTemperature[1].byte.high;
 8004428:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800442c:	1c5a      	adds	r2, r3, #1
 800442e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8004432:	4619      	mov	r1, r3
 8004434:	4b71      	ldr	r3, [pc, #452]	; (80045fc <Broadcast_data+0x418>)
 8004436:	7e5a      	ldrb	r2, [r3, #25]
 8004438:	f101 0348 	add.w	r3, r1, #72	; 0x48
 800443c:	443b      	add	r3, r7
 800443e:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = broadcast_data.MaxTemperature[1].byte.low;
 8004442:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004446:	1c5a      	adds	r2, r3, #1
 8004448:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800444c:	4619      	mov	r1, r3
 800444e:	4b6b      	ldr	r3, [pc, #428]	; (80045fc <Broadcast_data+0x418>)
 8004450:	7e1a      	ldrb	r2, [r3, #24]
 8004452:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8004456:	443b      	add	r3, r7
 8004458:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = broadcast_data.MinTemperature[0].byte.high;
 800445c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8004466:	4619      	mov	r1, r3
 8004468:	4b64      	ldr	r3, [pc, #400]	; (80045fc <Broadcast_data+0x418>)
 800446a:	7eda      	ldrb	r2, [r3, #27]
 800446c:	f101 0348 	add.w	r3, r1, #72	; 0x48
 8004470:	443b      	add	r3, r7
 8004472:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = broadcast_data.MinTemperature[0].byte.low;
 8004476:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8004480:	4619      	mov	r1, r3
 8004482:	4b5e      	ldr	r3, [pc, #376]	; (80045fc <Broadcast_data+0x418>)
 8004484:	7e9a      	ldrb	r2, [r3, #26]
 8004486:	f101 0348 	add.w	r3, r1, #72	; 0x48
 800448a:	443b      	add	r3, r7
 800448c:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = broadcast_data.MinTemperature[1].byte.high;
 8004490:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800449a:	4619      	mov	r1, r3
 800449c:	4b57      	ldr	r3, [pc, #348]	; (80045fc <Broadcast_data+0x418>)
 800449e:	7f5a      	ldrb	r2, [r3, #29]
 80044a0:	f101 0348 	add.w	r3, r1, #72	; 0x48
 80044a4:	443b      	add	r3, r7
 80044a6:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = broadcast_data.MinTemperature[1].byte.low;
 80044aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80044b4:	4619      	mov	r1, r3
 80044b6:	4b51      	ldr	r3, [pc, #324]	; (80045fc <Broadcast_data+0x418>)
 80044b8:	7f1a      	ldrb	r2, [r3, #28]
 80044ba:	f101 0348 	add.w	r3, r1, #72	; 0x48
 80044be:	443b      	add	r3, r7
 80044c0:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = broadcast_data.Temperature[0].byte.high;
 80044c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80044ce:	4619      	mov	r1, r3
 80044d0:	4b4a      	ldr	r3, [pc, #296]	; (80045fc <Broadcast_data+0x418>)
 80044d2:	7fda      	ldrb	r2, [r3, #31]
 80044d4:	f101 0348 	add.w	r3, r1, #72	; 0x48
 80044d8:	443b      	add	r3, r7
 80044da:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = broadcast_data.Temperature[0].byte.low;
 80044de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 80044e8:	4619      	mov	r1, r3
 80044ea:	4b44      	ldr	r3, [pc, #272]	; (80045fc <Broadcast_data+0x418>)
 80044ec:	7f9a      	ldrb	r2, [r3, #30]
 80044ee:	f101 0348 	add.w	r3, r1, #72	; 0x48
 80044f2:	443b      	add	r3, r7
 80044f4:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = broadcast_data.Temperature[1].byte.high;
 80044f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8004502:	4619      	mov	r1, r3
 8004504:	4b3d      	ldr	r3, [pc, #244]	; (80045fc <Broadcast_data+0x418>)
 8004506:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800450a:	f101 0348 	add.w	r3, r1, #72	; 0x48
 800450e:	443b      	add	r3, r7
 8004510:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = broadcast_data.Temperature[1].byte.low;
 8004514:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800451e:	4619      	mov	r1, r3
 8004520:	4b36      	ldr	r3, [pc, #216]	; (80045fc <Broadcast_data+0x418>)
 8004522:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004526:	f101 0348 	add.w	r3, r1, #72	; 0x48
 800452a:	443b      	add	r3, r7
 800452c:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = 0;	// reserved
 8004530:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800453a:	3348      	adds	r3, #72	; 0x48
 800453c:	443b      	add	r3, r7
 800453e:	2200      	movs	r2, #0
 8004540:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = 0;	// reserved
 8004544:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 800454e:	3348      	adds	r3, #72	; 0x48
 8004550:	443b      	add	r3, r7
 8004552:	2200      	movs	r2, #0
 8004554:	f803 2c44 	strb.w	r2, [r3, #-68]

	//CellVoltage 16 Byte
	data[size++] = 0xAA;	// HEAD
 8004558:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800455c:	1c5a      	adds	r2, r3, #1
 800455e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8004562:	3348      	adds	r3, #72	; 0x48
 8004564:	443b      	add	r3, r7
 8004566:	22aa      	movs	r2, #170	; 0xaa
 8004568:	f803 2c44 	strb.w	r2, [r3, #-68]
	data[size++] = 0x04;	// UART_TYPE_BMS_VOLTAGE_P1
 800456c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
 8004576:	3348      	adds	r3, #72	; 0x48
 8004578:	443b      	add	r3, r7
 800457a:	2204      	movs	r2, #4
 800457c:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i=0;i<7;i++)
 8004580:	2300      	movs	r3, #0
 8004582:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8004586:	e026      	b.n	80045d6 <Broadcast_data+0x3f2>
	{
		data[size++] = broadcast_data.CellVoltage[i].byte.high;
 8004588:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 800458c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004590:	1c59      	adds	r1, r3, #1
 8004592:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
 8004596:	4618      	mov	r0, r3
 8004598:	4918      	ldr	r1, [pc, #96]	; (80045fc <Broadcast_data+0x418>)
 800459a:	0053      	lsls	r3, r2, #1
 800459c:	440b      	add	r3, r1
 800459e:	79da      	ldrb	r2, [r3, #7]
 80045a0:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80045a4:	443b      	add	r3, r7
 80045a6:	f803 2c44 	strb.w	r2, [r3, #-68]
		data[size++] = broadcast_data.CellVoltage[i].byte.low;
 80045aa:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80045ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045b2:	1c59      	adds	r1, r3, #1
 80045b4:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
 80045b8:	4618      	mov	r0, r3
 80045ba:	4910      	ldr	r1, [pc, #64]	; (80045fc <Broadcast_data+0x418>)
 80045bc:	0053      	lsls	r3, r2, #1
 80045be:	440b      	add	r3, r1
 80045c0:	799a      	ldrb	r2, [r3, #6]
 80045c2:	f100 0348 	add.w	r3, r0, #72	; 0x48
 80045c6:	443b      	add	r3, r7
 80045c8:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i=0;i<7;i++)
 80045cc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80045d0:	3301      	adds	r3, #1
 80045d2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80045d6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d9d4      	bls.n	8004588 <Broadcast_data+0x3a4>
	printf("\r\n");
#endif
#endif

	// Transmits
	HAL_UART_Transmit(&huart1, data, size, 100);
 80045de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	1d39      	adds	r1, r7, #4
 80045e6:	2364      	movs	r3, #100	; 0x64
 80045e8:	4807      	ldr	r0, [pc, #28]	; (8004608 <Broadcast_data+0x424>)
 80045ea:	f006 fed1 	bl	800b390 <HAL_UART_Transmit>
		break;
	case CAN:
		break;
	}
#endif
}
 80045ee:	bf00      	nop
 80045f0:	374c      	adds	r7, #76	; 0x4c
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd90      	pop	{r4, r7, pc}
 80045f6:	bf00      	nop
 80045f8:	20000360 	.word	0x20000360
 80045fc:	200009dc 	.word	0x200009dc
 8004600:	40010c00 	.word	0x40010c00
 8004604:	40011000 	.word	0x40011000
 8004608:	20001500 	.word	0x20001500

0800460c <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8004610:	4b17      	ldr	r3, [pc, #92]	; (8004670 <MX_CAN_Init+0x64>)
 8004612:	4a18      	ldr	r2, [pc, #96]	; (8004674 <MX_CAN_Init+0x68>)
 8004614:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8004616:	4b16      	ldr	r3, [pc, #88]	; (8004670 <MX_CAN_Init+0x64>)
 8004618:	2209      	movs	r2, #9
 800461a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800461c:	4b14      	ldr	r3, [pc, #80]	; (8004670 <MX_CAN_Init+0x64>)
 800461e:	2200      	movs	r2, #0
 8004620:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <MX_CAN_Init+0x64>)
 8004624:	2200      	movs	r2, #0
 8004626:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_5TQ;
 8004628:	4b11      	ldr	r3, [pc, #68]	; (8004670 <MX_CAN_Init+0x64>)
 800462a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800462e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8004630:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <MX_CAN_Init+0x64>)
 8004632:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004636:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8004638:	4b0d      	ldr	r3, [pc, #52]	; (8004670 <MX_CAN_Init+0x64>)
 800463a:	2200      	movs	r2, #0
 800463c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800463e:	4b0c      	ldr	r3, [pc, #48]	; (8004670 <MX_CAN_Init+0x64>)
 8004640:	2200      	movs	r2, #0
 8004642:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <MX_CAN_Init+0x64>)
 8004646:	2200      	movs	r2, #0
 8004648:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <MX_CAN_Init+0x64>)
 800464c:	2200      	movs	r2, #0
 800464e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <MX_CAN_Init+0x64>)
 8004652:	2200      	movs	r2, #0
 8004654:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8004656:	4b06      	ldr	r3, [pc, #24]	; (8004670 <MX_CAN_Init+0x64>)
 8004658:	2200      	movs	r2, #0
 800465a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800465c:	4804      	ldr	r0, [pc, #16]	; (8004670 <MX_CAN_Init+0x64>)
 800465e:	f002 fd94 	bl	800718a <HAL_CAN_Init>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8004668:	f000 fc7d 	bl	8004f66 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}
 8004670:	2000132c 	.word	0x2000132c
 8004674:	40006400 	.word	0x40006400

08004678 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004680:	f107 0310 	add.w	r3, r7, #16
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1c      	ldr	r2, [pc, #112]	; (8004704 <HAL_CAN_MspInit+0x8c>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d131      	bne.n	80046fc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004698:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <HAL_CAN_MspInit+0x90>)
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	4a1a      	ldr	r2, [pc, #104]	; (8004708 <HAL_CAN_MspInit+0x90>)
 800469e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046a2:	61d3      	str	r3, [r2, #28]
 80046a4:	4b18      	ldr	r3, [pc, #96]	; (8004708 <HAL_CAN_MspInit+0x90>)
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ac:	60fb      	str	r3, [r7, #12]
 80046ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b0:	4b15      	ldr	r3, [pc, #84]	; (8004708 <HAL_CAN_MspInit+0x90>)
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	4a14      	ldr	r2, [pc, #80]	; (8004708 <HAL_CAN_MspInit+0x90>)
 80046b6:	f043 0304 	orr.w	r3, r3, #4
 80046ba:	6193      	str	r3, [r2, #24]
 80046bc:	4b12      	ldr	r3, [pc, #72]	; (8004708 <HAL_CAN_MspInit+0x90>)
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	f003 0304 	and.w	r3, r3, #4
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80046c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046d6:	f107 0310 	add.w	r3, r7, #16
 80046da:	4619      	mov	r1, r3
 80046dc:	480b      	ldr	r0, [pc, #44]	; (800470c <HAL_CAN_MspInit+0x94>)
 80046de:	f004 f86d 	bl	80087bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80046e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e8:	2302      	movs	r3, #2
 80046ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046ec:	2303      	movs	r3, #3
 80046ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046f0:	f107 0310 	add.w	r3, r7, #16
 80046f4:	4619      	mov	r1, r3
 80046f6:	4805      	ldr	r0, [pc, #20]	; (800470c <HAL_CAN_MspInit+0x94>)
 80046f8:	f004 f860 	bl	80087bc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80046fc:	bf00      	nop
 80046fe:	3720      	adds	r7, #32
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	40006400 	.word	0x40006400
 8004708:	40021000 	.word	0x40021000
 800470c:	40010800 	.word	0x40010800

08004710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004716:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <MX_DMA_Init+0x38>)
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	4a0b      	ldr	r2, [pc, #44]	; (8004748 <MX_DMA_Init+0x38>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	6153      	str	r3, [r2, #20]
 8004722:	4b09      	ldr	r3, [pc, #36]	; (8004748 <MX_DMA_Init+0x38>)
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800472e:	2200      	movs	r2, #0
 8004730:	2100      	movs	r1, #0
 8004732:	200b      	movs	r0, #11
 8004734:	f003 fb69 	bl	8007e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004738:	200b      	movs	r0, #11
 800473a:	f003 fb82 	bl	8007e42 <HAL_NVIC_EnableIRQ>

}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000

0800474c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004752:	f107 0310 	add.w	r3, r7, #16
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	605a      	str	r2, [r3, #4]
 800475c:	609a      	str	r2, [r3, #8]
 800475e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004760:	4b60      	ldr	r3, [pc, #384]	; (80048e4 <MX_GPIO_Init+0x198>)
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	4a5f      	ldr	r2, [pc, #380]	; (80048e4 <MX_GPIO_Init+0x198>)
 8004766:	f043 0310 	orr.w	r3, r3, #16
 800476a:	6193      	str	r3, [r2, #24]
 800476c:	4b5d      	ldr	r3, [pc, #372]	; (80048e4 <MX_GPIO_Init+0x198>)
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004778:	4b5a      	ldr	r3, [pc, #360]	; (80048e4 <MX_GPIO_Init+0x198>)
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	4a59      	ldr	r2, [pc, #356]	; (80048e4 <MX_GPIO_Init+0x198>)
 800477e:	f043 0320 	orr.w	r3, r3, #32
 8004782:	6193      	str	r3, [r2, #24]
 8004784:	4b57      	ldr	r3, [pc, #348]	; (80048e4 <MX_GPIO_Init+0x198>)
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004790:	4b54      	ldr	r3, [pc, #336]	; (80048e4 <MX_GPIO_Init+0x198>)
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	4a53      	ldr	r2, [pc, #332]	; (80048e4 <MX_GPIO_Init+0x198>)
 8004796:	f043 0304 	orr.w	r3, r3, #4
 800479a:	6193      	str	r3, [r2, #24]
 800479c:	4b51      	ldr	r3, [pc, #324]	; (80048e4 <MX_GPIO_Init+0x198>)
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f003 0304 	and.w	r3, r3, #4
 80047a4:	607b      	str	r3, [r7, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047a8:	4b4e      	ldr	r3, [pc, #312]	; (80048e4 <MX_GPIO_Init+0x198>)
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	4a4d      	ldr	r2, [pc, #308]	; (80048e4 <MX_GPIO_Init+0x198>)
 80047ae:	f043 0308 	orr.w	r3, r3, #8
 80047b2:	6193      	str	r3, [r2, #24]
 80047b4:	4b4b      	ldr	r3, [pc, #300]	; (80048e4 <MX_GPIO_Init+0x198>)
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	603b      	str	r3, [r7, #0]
 80047be:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CHARGE_PWR_EN_Pin|DISCHARGE_PWR_EN_Pin, GPIO_PIN_RESET);
 80047c0:	2200      	movs	r2, #0
 80047c2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80047c6:	4848      	ldr	r0, [pc, #288]	; (80048e8 <MX_GPIO_Init+0x19c>)
 80047c8:	f004 f993 	bl	8008af2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_nCS_GPIO_Port, SPI1_nCS_Pin, GPIO_PIN_SET);
 80047cc:	2201      	movs	r2, #1
 80047ce:	2110      	movs	r1, #16
 80047d0:	4846      	ldr	r0, [pc, #280]	; (80048ec <MX_GPIO_Init+0x1a0>)
 80047d2:	f004 f98e 	bl	8008af2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FAN_LOW_SPEED_Pin|PRE_CHARGE_RELAY_EN_Pin|LED1_Pin|LED0_Pin
 80047d6:	2200      	movs	r2, #0
 80047d8:	f240 3133 	movw	r1, #819	; 0x333
 80047dc:	4844      	ldr	r0, [pc, #272]	; (80048f0 <MX_GPIO_Init+0x1a4>)
 80047de:	f004 f988 	bl	8008af2 <HAL_GPIO_WritePin>
                          |RS485_DE_Pin|RS485_nRE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PRE_CHARGE_CHECK_Pin|CHARGER_EN_CHECK_Pin|MOTOR_RELAY_CHECK_Pin;
 80047e2:	f243 0320 	movw	r3, #12320	; 0x3020
 80047e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80047ec:	2302      	movs	r3, #2
 80047ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047f0:	f107 0310 	add.w	r3, r7, #16
 80047f4:	4619      	mov	r1, r3
 80047f6:	483c      	ldr	r0, [pc, #240]	; (80048e8 <MX_GPIO_Init+0x19c>)
 80047f8:	f003 ffe0 	bl	80087bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CHARGE_PWR_EN_Pin|DISCHARGE_PWR_EN_Pin;
 80047fc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004800:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004802:	2301      	movs	r3, #1
 8004804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2300      	movs	r3, #0
 8004808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800480a:	2302      	movs	r3, #2
 800480c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800480e:	f107 0310 	add.w	r3, r7, #16
 8004812:	4619      	mov	r1, r3
 8004814:	4834      	ldr	r0, [pc, #208]	; (80048e8 <MX_GPIO_Init+0x19c>)
 8004816:	f003 ffd1 	bl	80087bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 800481a:	2311      	movs	r3, #17
 800481c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800481e:	2303      	movs	r3, #3
 8004820:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004822:	f107 0310 	add.w	r3, r7, #16
 8004826:	4619      	mov	r1, r3
 8004828:	482f      	ldr	r0, [pc, #188]	; (80048e8 <MX_GPIO_Init+0x19c>)
 800482a:	f003 ffc7 	bl	80087bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800482e:	2301      	movs	r3, #1
 8004830:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004832:	2303      	movs	r3, #3
 8004834:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004836:	f107 0310 	add.w	r3, r7, #16
 800483a:	4619      	mov	r1, r3
 800483c:	482b      	ldr	r0, [pc, #172]	; (80048ec <MX_GPIO_Init+0x1a0>)
 800483e:	f003 ffbd 	bl	80087bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_nCS_Pin;
 8004842:	2310      	movs	r3, #16
 8004844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004846:	2301      	movs	r3, #1
 8004848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800484a:	2301      	movs	r3, #1
 800484c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800484e:	2302      	movs	r3, #2
 8004850:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_nCS_GPIO_Port, &GPIO_InitStruct);
 8004852:	f107 0310 	add.w	r3, r7, #16
 8004856:	4619      	mov	r1, r3
 8004858:	4824      	ldr	r0, [pc, #144]	; (80048ec <MX_GPIO_Init+0x1a0>)
 800485a:	f003 ffaf 	bl	80087bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = FAN_LOW_SPEED_Pin|PRE_CHARGE_RELAY_EN_Pin|LED1_Pin|LED0_Pin
 800485e:	f240 3333 	movw	r3, #819	; 0x333
 8004862:	613b      	str	r3, [r7, #16]
                          |RS485_DE_Pin|RS485_nRE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004864:	2301      	movs	r3, #1
 8004866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004868:	2300      	movs	r3, #0
 800486a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800486c:	2302      	movs	r3, #2
 800486e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004870:	f107 0310 	add.w	r3, r7, #16
 8004874:	4619      	mov	r1, r3
 8004876:	481e      	ldr	r0, [pc, #120]	; (80048f0 <MX_GPIO_Init+0x1a4>)
 8004878:	f003 ffa0 	bl	80087bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800487c:	2304      	movs	r3, #4
 800487e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004880:	2300      	movs	r3, #0
 8004882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004884:	2300      	movs	r3, #0
 8004886:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8004888:	f107 0310 	add.w	r3, r7, #16
 800488c:	4619      	mov	r1, r3
 800488e:	4818      	ldr	r0, [pc, #96]	; (80048f0 <MX_GPIO_Init+0x1a4>)
 8004890:	f003 ff94 	bl	80087bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = CAN_ID1_Pin|CAN_ID2_Pin|CAN_ID4_Pin|CAN_ID8_Pin
 8004894:	f24f 03c0 	movw	r3, #61632	; 0xf0c0
 8004898:	613b      	str	r3, [r7, #16]
                          |EX_CHAG_RLY_CHECK_Pin|SMPS_RELAY_CHECK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800489e:	2302      	movs	r3, #2
 80048a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048a2:	f107 0310 	add.w	r3, r7, #16
 80048a6:	4619      	mov	r1, r3
 80048a8:	4811      	ldr	r0, [pc, #68]	; (80048f0 <MX_GPIO_Init+0x1a4>)
 80048aa:	f003 ff87 	bl	80087bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = COM_SEL0_Pin|COM_SEL1_Pin;
 80048ae:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80048b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048b4:	2300      	movs	r3, #0
 80048b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80048b8:	2302      	movs	r3, #2
 80048ba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048bc:	f107 0310 	add.w	r3, r7, #16
 80048c0:	4619      	mov	r1, r3
 80048c2:	480a      	ldr	r0, [pc, #40]	; (80048ec <MX_GPIO_Init+0x1a0>)
 80048c4:	f003 ff7a 	bl	80087bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80048c8:	2304      	movs	r3, #4
 80048ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048cc:	2303      	movs	r3, #3
 80048ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048d0:	f107 0310 	add.w	r3, r7, #16
 80048d4:	4619      	mov	r1, r3
 80048d6:	4807      	ldr	r0, [pc, #28]	; (80048f4 <MX_GPIO_Init+0x1a8>)
 80048d8:	f003 ff70 	bl	80087bc <HAL_GPIO_Init>

}
 80048dc:	bf00      	nop
 80048de:	3720      	adds	r7, #32
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000
 80048e8:	40011000 	.word	0x40011000
 80048ec:	40010800 	.word	0x40010800
 80048f0:	40010c00 	.word	0x40010c00
 80048f4:	40011400 	.word	0x40011400

080048f8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80048fc:	4b12      	ldr	r3, [pc, #72]	; (8004948 <MX_I2C2_Init+0x50>)
 80048fe:	4a13      	ldr	r2, [pc, #76]	; (800494c <MX_I2C2_Init+0x54>)
 8004900:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8004902:	4b11      	ldr	r3, [pc, #68]	; (8004948 <MX_I2C2_Init+0x50>)
 8004904:	4a12      	ldr	r2, [pc, #72]	; (8004950 <MX_I2C2_Init+0x58>)
 8004906:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <MX_I2C2_Init+0x50>)
 800490a:	2200      	movs	r2, #0
 800490c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800490e:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <MX_I2C2_Init+0x50>)
 8004910:	2200      	movs	r2, #0
 8004912:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <MX_I2C2_Init+0x50>)
 8004916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800491a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800491c:	4b0a      	ldr	r3, [pc, #40]	; (8004948 <MX_I2C2_Init+0x50>)
 800491e:	2200      	movs	r2, #0
 8004920:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <MX_I2C2_Init+0x50>)
 8004924:	2200      	movs	r2, #0
 8004926:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004928:	4b07      	ldr	r3, [pc, #28]	; (8004948 <MX_I2C2_Init+0x50>)
 800492a:	2200      	movs	r2, #0
 800492c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <MX_I2C2_Init+0x50>)
 8004930:	2200      	movs	r2, #0
 8004932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004934:	4804      	ldr	r0, [pc, #16]	; (8004948 <MX_I2C2_Init+0x50>)
 8004936:	f004 f90d 	bl	8008b54 <HAL_I2C_Init>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d001      	beq.n	8004944 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8004940:	f000 fb11 	bl	8004f66 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004944:	bf00      	nop
 8004946:	bd80      	pop	{r7, pc}
 8004948:	20001354 	.word	0x20001354
 800494c:	40005800 	.word	0x40005800
 8004950:	000186a0 	.word	0x000186a0

08004954 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495c:	f107 0310 	add.w	r3, r7, #16
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]
 8004964:	605a      	str	r2, [r3, #4]
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a16      	ldr	r2, [pc, #88]	; (80049c8 <HAL_I2C_MspInit+0x74>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d124      	bne.n	80049be <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004974:	4b15      	ldr	r3, [pc, #84]	; (80049cc <HAL_I2C_MspInit+0x78>)
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	4a14      	ldr	r2, [pc, #80]	; (80049cc <HAL_I2C_MspInit+0x78>)
 800497a:	f043 0308 	orr.w	r3, r3, #8
 800497e:	6193      	str	r3, [r2, #24]
 8004980:	4b12      	ldr	r3, [pc, #72]	; (80049cc <HAL_I2C_MspInit+0x78>)
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 800498c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004990:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004992:	2312      	movs	r3, #18
 8004994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004996:	2303      	movs	r3, #3
 8004998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800499a:	f107 0310 	add.w	r3, r7, #16
 800499e:	4619      	mov	r1, r3
 80049a0:	480b      	ldr	r0, [pc, #44]	; (80049d0 <HAL_I2C_MspInit+0x7c>)
 80049a2:	f003 ff0b 	bl	80087bc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80049a6:	4b09      	ldr	r3, [pc, #36]	; (80049cc <HAL_I2C_MspInit+0x78>)
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	4a08      	ldr	r2, [pc, #32]	; (80049cc <HAL_I2C_MspInit+0x78>)
 80049ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049b0:	61d3      	str	r3, [r2, #28]
 80049b2:	4b06      	ldr	r3, [pc, #24]	; (80049cc <HAL_I2C_MspInit+0x78>)
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ba:	60bb      	str	r3, [r7, #8]
 80049bc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80049be:	bf00      	nop
 80049c0:	3720      	adds	r7, #32
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40005800 	.word	0x40005800
 80049cc:	40021000 	.word	0x40021000
 80049d0:	40010c00 	.word	0x40010c00

080049d4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80049dc:	1d39      	adds	r1, r7, #4
 80049de:	f04f 33ff 	mov.w	r3, #4294967295
 80049e2:	2201      	movs	r2, #1
 80049e4:	4803      	ldr	r0, [pc, #12]	; (80049f4 <__io_putchar+0x20>)
 80049e6:	f006 fcd3 	bl	800b390 <HAL_UART_Transmit>
	return ch;
 80049ea:	687b      	ldr	r3, [r7, #4]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	20001548 	.word	0x20001548

080049f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80049fc:	f001 ff74 	bl	80068e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a00:	f000 f8dc 	bl	8004bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a04:	f7ff fea2 	bl	800474c <MX_GPIO_Init>
  MX_DMA_Init();
 8004a08:	f7ff fe82 	bl	8004710 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8004a0c:	f001 fe1e 	bl	800664c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8004a10:	f7ff f97c 	bl	8003d0c <MX_ADC1_Init>
  MX_CAN_Init();
 8004a14:	f7ff fdfa 	bl	800460c <MX_CAN_Init>
  MX_SPI1_Init();
 8004a18:	f001 fabc 	bl	8005f94 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004a1c:	f001 fdec 	bl	80065f8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8004a20:	f001 fe3e 	bl	80066a0 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8004a24:	f001 fcce 	bl	80063c4 <MX_TIM3_Init>
  MX_I2C2_Init();
 8004a28:	f7ff ff66 	bl	80048f8 <MX_I2C2_Init>
  MX_TIM2_Init();
 8004a2c:	f001 fc7c 	bl	8006328 <MX_TIM2_Init>
  MX_RTC_Init();
 8004a30:	f001 fa70 	bl	8005f14 <MX_RTC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8004a34:	f000 f922 	bl	8004c7c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */

	HAL_Delay(100);
 8004a38:	2064      	movs	r0, #100	; 0x64
 8004a3a:	f001 ffb7 	bl	80069ac <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim2);
 8004a3e:	4849      	ldr	r0, [pc, #292]	; (8004b64 <main+0x16c>)
 8004a40:	f005 fcdc 	bl	800a3fc <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart1, &g_uUart1_Rx_now, 1);
 8004a44:	2201      	movs	r2, #1
 8004a46:	4948      	ldr	r1, [pc, #288]	; (8004b68 <main+0x170>)
 8004a48:	4848      	ldr	r0, [pc, #288]	; (8004b6c <main+0x174>)
 8004a4a:	f006 fd24 	bl	800b496 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &g_uUart2_Rx_now, 1);
 8004a4e:	2201      	movs	r2, #1
 8004a50:	4947      	ldr	r1, [pc, #284]	; (8004b70 <main+0x178>)
 8004a52:	4848      	ldr	r0, [pc, #288]	; (8004b74 <main+0x17c>)
 8004a54:	f006 fd1f 	bl	800b496 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &g_u485_Rx_now, 1);
 8004a58:	2201      	movs	r2, #1
 8004a5a:	4947      	ldr	r1, [pc, #284]	; (8004b78 <main+0x180>)
 8004a5c:	4847      	ldr	r0, [pc, #284]	; (8004b7c <main+0x184>)
 8004a5e:	f006 fd1a 	bl	800b496 <HAL_UART_Receive_IT>

	// Initialize ADBMS6817
	//Adbms6817_Set_default();
	Adbms6817_initialize();
 8004a62:	f7fe facb 	bl	8002ffc <Adbms6817_initialize>
	//ADBMS6817 Init Delay
	Adc_dma_start();						//adc infos
 8004a66:	f000 fb65 	bl	8005134 <Adc_dma_start>
	HAL_Delay(1000);
 8004a6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a6e:	f001 ff9d 	bl	80069ac <HAL_Delay>

	// Debug Test
	//printf("LLINE BMS 64p Start\r\n");
	Setup_default();
 8004a72:	f000 feff 	bl	8005874 <Setup_default>
	Setup_ADC_default();
 8004a76:	f000 fa7b 	bl	8004f70 <Setup_ADC_default>
	Setup_uart_default(); 					//Serial buff reset
 8004a7a:	f7fd fe03 	bl	8002684 <Setup_uart_default>
	Setup_uart485_default();				//485 buff reset
 8004a7e:	f7fe f9b1 	bl	8002de4 <Setup_uart485_default>
	Get_Switch_info();						//user select switch
 8004a82:	f000 ff47 	bl	8005914 <Get_Switch_info>

	HAL_Delay(100);
 8004a86:	2064      	movs	r0, #100	; 0x64
 8004a88:	f001 ff90 	bl	80069ac <HAL_Delay>

	Can_setup_default(Sw_info.g_uOption_id);	//Sw_info.Can_id
 8004a8c:	4b3c      	ldr	r3, [pc, #240]	; (8004b80 <main+0x188>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fc faef 	bl	8001074 <Can_setup_default>

	//Battery read	//
	//Battery ok ? ->relay on
	//Battery Low? -> wait? or low battery display
	Start_Relay_pwm(1);
 8004a96:	2001      	movs	r0, #1
 8004a98:	f000 ffbc 	bl	8005a14 <Start_Relay_pwm>
	//Charge_voltage_open(1);
	//Discharge_voltage_open(1);
	Adbms6817_read_adc();
 8004a9c:	f7ff f852 	bl	8003b44 <Adbms6817_read_adc>
	g_bFlag_5Sec = 1;
 8004aa0:	4b38      	ldr	r3, [pc, #224]	; (8004b84 <main+0x18c>)
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	701a      	strb	r2, [r3, #0]
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("L.LINE Battery Management System\r\n\r\n");
 8004aa6:	4838      	ldr	r0, [pc, #224]	; (8004b88 <main+0x190>)
 8004aa8:	f007 fbb8 	bl	800c21c <puts>
	boot_time_hour = boot_time_min = boot_time_sec = 0;
 8004aac:	4b37      	ldr	r3, [pc, #220]	; (8004b8c <main+0x194>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
 8004ab2:	4b36      	ldr	r3, [pc, #216]	; (8004b8c <main+0x194>)
 8004ab4:	781a      	ldrb	r2, [r3, #0]
 8004ab6:	4b36      	ldr	r3, [pc, #216]	; (8004b90 <main+0x198>)
 8004ab8:	701a      	strb	r2, [r3, #0]
 8004aba:	4b35      	ldr	r3, [pc, #212]	; (8004b90 <main+0x198>)
 8004abc:	781a      	ldrb	r2, [r3, #0]
 8004abe:	4b35      	ldr	r3, [pc, #212]	; (8004b94 <main+0x19c>)
 8004ac0:	701a      	strb	r2, [r3, #0]

#if 1
	while(1)
	{
		//if(g_uUart1_Rx_Flag) Uart1_Cmd_check();
		Uart1_Cmd_check();
 8004ac2:	f7fd fe49 	bl	8002758 <Uart1_Cmd_check>
		if(g_uUart2_Rx_Flag) Uart2_Cmd_check();
 8004ac6:	4b34      	ldr	r3, [pc, #208]	; (8004b98 <main+0x1a0>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d001      	beq.n	8004ad2 <main+0xda>
 8004ace:	f7fd feed 	bl	80028ac <Uart2_Cmd_check>
		if(g_u485_Rx_Flag)	U3_485_Cmd_check();
 8004ad2:	4b32      	ldr	r3, [pc, #200]	; (8004b9c <main+0x1a4>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <main+0xe6>
 8004ada:	f7fe f9c5 	bl	8002e68 <U3_485_Cmd_check>
		if(g_uCan_Rxflag)	Can_Cmd_check();
 8004ade:	4b30      	ldr	r3, [pc, #192]	; (8004ba0 <main+0x1a8>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <main+0xf2>
 8004ae6:	f7fc fafd 	bl	80010e4 <Can_Cmd_check>

#if defined(DEBUG_SERIAL) && defined(DEBUG_SERIAL_TEST_BSH)
		Check_Debug_Serial();
 8004aea:	f7fd ff57 	bl	800299c <Check_Debug_Serial>
#endif
		if(g_bFlag_100ms)
 8004aee:	4b2d      	ldr	r3, [pc, #180]	; (8004ba4 <main+0x1ac>)
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d011      	beq.n	8004b1a <main+0x122>
		{
			// �???��?�� 교수 루틴
			EKF_Algorithm_Main();
 8004af6:	f7fc fb67 	bl	80011c8 <EKF_Algorithm_Main>
			Bms.Soc = ed_EKF_SOC*100;
 8004afa:	4b2b      	ldr	r3, [pc, #172]	; (8004ba8 <main+0x1b0>)
 8004afc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	4b29      	ldr	r3, [pc, #164]	; (8004bac <main+0x1b4>)
 8004b06:	f7fb fce7 	bl	80004d8 <__aeabi_dmul>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4928      	ldr	r1, [pc, #160]	; (8004bb0 <main+0x1b8>)
 8004b10:	e9c1 2302 	strd	r2, r3, [r1, #8]
			g_bFlag_100ms = FALSE;
 8004b14:	4b23      	ldr	r3, [pc, #140]	; (8004ba4 <main+0x1ac>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	701a      	strb	r2, [r3, #0]
		}
		if(g_bFlag_1Sec)
 8004b1a:	4b26      	ldr	r3, [pc, #152]	; (8004bb4 <main+0x1bc>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d018      	beq.n	8004b54 <main+0x15c>
			//Adbms6817_discharge_cell_continuously(0, FALSE);
			//Adbms6817_discharge_cell_continuously(0, TRUE);
			//BMS_Cell_Balancing();
			//Calc_SOC_Voltage();
			//Calc_SOC_Current();
			Check_Relay_Contorl();
 8004b22:	f001 f88b 	bl	8005c3c <Check_Relay_Contorl>

			if(Bms.EnableBalancing)
 8004b26:	4b22      	ldr	r3, [pc, #136]	; (8004bb0 <main+0x1b8>)
 8004b28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <main+0x13e>
				BMS_Cell_Balancing();
 8004b30:	f7ff f9d6 	bl	8003ee0 <BMS_Cell_Balancing>
 8004b34:	e001      	b.n	8004b3a <main+0x142>
			else
				Adbms6817_read_adc();
 8004b36:	f7ff f805 	bl	8003b44 <Adbms6817_read_adc>

			//printf("Bms.Voltage_avg: %d\r\n", Bms.Voltage_avg);
			//Adbms6817_adcv();
			Read_DMA_Current_n_Temperature();
 8004b3a:	f000 fb09 	bl	8005150 <Read_DMA_Current_n_Temperature>
			Broadcast_data();	// Broadcast to uart1
 8004b3e:	f7ff fb51 	bl	80041e4 <Broadcast_data>
#if defined(DEBUG_SERIAL) && defined(DEBUG_SERIAL_TEST_BSH)
			Print_Cell_Voltage();
 8004b42:	f7fe f9d9 	bl	8002ef8 <Print_Cell_Voltage>
			//printf("txtxtxtx\r\n");
			#endif
#endif
			//if(Err.g_uOver_Current_flag || Err.g_uOver_Charge_flag || Err.g_uOver_Temp_flag) Charge_Discharge_control();

			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8004b46:	2110      	movs	r1, #16
 8004b48:	481b      	ldr	r0, [pc, #108]	; (8004bb8 <main+0x1c0>)
 8004b4a:	f003 ffea 	bl	8008b22 <HAL_GPIO_TogglePin>
			g_bFlag_1Sec = 0;
 8004b4e:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <main+0x1bc>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	701a      	strb	r2, [r3, #0]
		}

		if(g_bFlag_5Sec)
 8004b54:	4b0b      	ldr	r3, [pc, #44]	; (8004b84 <main+0x18c>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0b2      	beq.n	8004ac2 <main+0xca>
			//Fan_pwm_control();
			if(Bms.EnableBalancing)
			{
				//BMS_Cell_Balancing();
			}
			g_bFlag_5Sec = 0;
 8004b5c:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <main+0x18c>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
		Uart1_Cmd_check();
 8004b62:	e7ae      	b.n	8004ac2 <main+0xca>
 8004b64:	20001470 	.word	0x20001470
 8004b68:	200011e7 	.word	0x200011e7
 8004b6c:	20001500 	.word	0x20001500
 8004b70:	200011e5 	.word	0x200011e5
 8004b74:	20001548 	.word	0x20001548
 8004b78:	2000108c 	.word	0x2000108c
 8004b7c:	200014b8 	.word	0x200014b8
 8004b80:	20000e78 	.word	0x20000e78
 8004b84:	20001418 	.word	0x20001418
 8004b88:	0800d5a0 	.word	0x0800d5a0
 8004b8c:	200013a9 	.word	0x200013a9
 8004b90:	200013a8 	.word	0x200013a8
 8004b94:	200013aa 	.word	0x200013aa
 8004b98:	200011e4 	.word	0x200011e4
 8004b9c:	20000b12 	.word	0x20000b12
 8004ba0:	20000391 	.word	0x20000391
 8004ba4:	20001419 	.word	0x20001419
 8004ba8:	200000c0 	.word	0x200000c0
 8004bac:	40590000 	.word	0x40590000
 8004bb0:	20000360 	.word	0x20000360
 8004bb4:	20001420 	.word	0x20001420
 8004bb8:	40010c00 	.word	0x40010c00

08004bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b094      	sub	sp, #80	; 0x50
 8004bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bc6:	2228      	movs	r2, #40	; 0x28
 8004bc8:	2100      	movs	r1, #0
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f007 fc26 	bl	800c41c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004bd0:	f107 0314 	add.w	r3, r7, #20
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	605a      	str	r2, [r3, #4]
 8004bda:	609a      	str	r2, [r3, #8]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004be0:	1d3b      	adds	r3, r7, #4
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	605a      	str	r2, [r3, #4]
 8004be8:	609a      	str	r2, [r3, #8]
 8004bea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8004bec:	2309      	movs	r3, #9
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004c02:	2302      	movs	r3, #2
 8004c04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004c0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004c10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004c16:	4618      	mov	r0, r3
 8004c18:	f004 f8fe 	bl	8008e18 <HAL_RCC_OscConfig>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8004c22:	f000 f9a0 	bl	8004f66 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004c26:	230f      	movs	r3, #15
 8004c28:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c36:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004c3c:	f107 0314 	add.w	r3, r7, #20
 8004c40:	2102      	movs	r1, #2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f004 fb6a 	bl	800931c <HAL_RCC_ClockConfig>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004c4e:	f000 f98a 	bl	8004f66 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8004c52:	2303      	movs	r3, #3
 8004c54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004c56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c5a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8004c5c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004c60:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c62:	1d3b      	adds	r3, r7, #4
 8004c64:	4618      	mov	r0, r3
 8004c66:	f004 fce7 	bl	8009638 <HAL_RCCEx_PeriphCLKConfig>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8004c70:	f000 f979 	bl	8004f66 <Error_Handler>
  }
}
 8004c74:	bf00      	nop
 8004c76:	3750      	adds	r7, #80	; 0x50
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* USB_LP_CAN1_RX0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004c80:	2200      	movs	r2, #0
 8004c82:	2100      	movs	r1, #0
 8004c84:	2014      	movs	r0, #20
 8004c86:	f003 f8c0 	bl	8007e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004c8a:	2014      	movs	r0, #20
 8004c8c:	f003 f8d9 	bl	8007e42 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004c90:	2200      	movs	r2, #0
 8004c92:	2100      	movs	r1, #0
 8004c94:	2025      	movs	r0, #37	; 0x25
 8004c96:	f003 f8b8 	bl	8007e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c9a:	2025      	movs	r0, #37	; 0x25
 8004c9c:	f003 f8d1 	bl	8007e42 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	2026      	movs	r0, #38	; 0x26
 8004ca6:	f003 f8b0 	bl	8007e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004caa:	2026      	movs	r0, #38	; 0x26
 8004cac:	f003 f8c9 	bl	8007e42 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	2027      	movs	r0, #39	; 0x27
 8004cb6:	f003 f8a8 	bl	8007e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004cba:	2027      	movs	r0, #39	; 0x27
 8004cbc:	f003 f8c1 	bl	8007e42 <HAL_NVIC_EnableIRQ>
}
 8004cc0:	bf00      	nop
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
			}
		}
		HAL_UART_Receive_IT(&huart1, &g_uUart1_Rx_now, 1);
	}
#endif
	if (huart->Instance == USART1)	//
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a50      	ldr	r2, [pc, #320]	; (8004e14 <HAL_UART_RxCpltCallback+0x150>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d110      	bne.n	8004cf8 <HAL_UART_RxCpltCallback+0x34>
	{
		g_uUart1_Rx_buffer[g_uUart1_Rx_head++] =	g_uUart1_Rx_now;
 8004cd6:	4b50      	ldr	r3, [pc, #320]	; (8004e18 <HAL_UART_RxCpltCallback+0x154>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	b2d1      	uxtb	r1, r2
 8004cde:	4a4e      	ldr	r2, [pc, #312]	; (8004e18 <HAL_UART_RxCpltCallback+0x154>)
 8004ce0:	7011      	strb	r1, [r2, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	4b4d      	ldr	r3, [pc, #308]	; (8004e1c <HAL_UART_RxCpltCallback+0x158>)
 8004ce6:	7819      	ldrb	r1, [r3, #0]
 8004ce8:	4b4d      	ldr	r3, [pc, #308]	; (8004e20 <HAL_UART_RxCpltCallback+0x15c>)
 8004cea:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart1, &g_uUart1_Rx_now, 1);
 8004cec:	2201      	movs	r2, #1
 8004cee:	494b      	ldr	r1, [pc, #300]	; (8004e1c <HAL_UART_RxCpltCallback+0x158>)
 8004cf0:	484c      	ldr	r0, [pc, #304]	; (8004e24 <HAL_UART_RxCpltCallback+0x160>)
 8004cf2:	f006 fbd0 	bl	800b496 <HAL_UART_Receive_IT>
				}
			}
		}
		HAL_UART_Receive_IT(&huart3, &g_u485_Rx_now, 1);
	}
}
 8004cf6:	e089      	b.n	8004e0c <HAL_UART_RxCpltCallback+0x148>
	else if (huart->Instance == USART2)	//
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a4a      	ldr	r2, [pc, #296]	; (8004e28 <HAL_UART_RxCpltCallback+0x164>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d145      	bne.n	8004d8e <HAL_UART_RxCpltCallback+0xca>
		g_uUart2_Rx_prev = g_uUart2_Rx_buffer[g_uUart2_Rx_head-1];
 8004d02:	4b4a      	ldr	r3, [pc, #296]	; (8004e2c <HAL_UART_RxCpltCallback+0x168>)
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	4a49      	ldr	r2, [pc, #292]	; (8004e30 <HAL_UART_RxCpltCallback+0x16c>)
 8004d0a:	5cd2      	ldrb	r2, [r2, r3]
 8004d0c:	4b49      	ldr	r3, [pc, #292]	; (8004e34 <HAL_UART_RxCpltCallback+0x170>)
 8004d0e:	701a      	strb	r2, [r3, #0]
		g_uUart2_Rx_buffer[g_uUart2_Rx_head++] =	g_uUart2_Rx_now;
 8004d10:	4b46      	ldr	r3, [pc, #280]	; (8004e2c <HAL_UART_RxCpltCallback+0x168>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	b2d1      	uxtb	r1, r2
 8004d18:	4a44      	ldr	r2, [pc, #272]	; (8004e2c <HAL_UART_RxCpltCallback+0x168>)
 8004d1a:	7011      	strb	r1, [r2, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4b46      	ldr	r3, [pc, #280]	; (8004e38 <HAL_UART_RxCpltCallback+0x174>)
 8004d20:	7819      	ldrb	r1, [r3, #0]
 8004d22:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <HAL_UART_RxCpltCallback+0x16c>)
 8004d24:	5499      	strb	r1, [r3, r2]
		g_uDebug_Rx_buffer[g_uDebug_Rx_head++] =	g_uUart2_Rx_now;
 8004d26:	4b45      	ldr	r3, [pc, #276]	; (8004e3c <HAL_UART_RxCpltCallback+0x178>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	b2d1      	uxtb	r1, r2
 8004d2e:	4a43      	ldr	r2, [pc, #268]	; (8004e3c <HAL_UART_RxCpltCallback+0x178>)
 8004d30:	7011      	strb	r1, [r2, #0]
 8004d32:	461a      	mov	r2, r3
 8004d34:	4b40      	ldr	r3, [pc, #256]	; (8004e38 <HAL_UART_RxCpltCallback+0x174>)
 8004d36:	7819      	ldrb	r1, [r3, #0]
 8004d38:	4b41      	ldr	r3, [pc, #260]	; (8004e40 <HAL_UART_RxCpltCallback+0x17c>)
 8004d3a:	5499      	strb	r1, [r3, r2]
		if(g_uUart2_Rx_now == '\n')
 8004d3c:	4b3e      	ldr	r3, [pc, #248]	; (8004e38 <HAL_UART_RxCpltCallback+0x174>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b0a      	cmp	r3, #10
 8004d42:	d11e      	bne.n	8004d82 <HAL_UART_RxCpltCallback+0xbe>
			if(g_uUart2_Rx_prev == '\r')
 8004d44:	4b3b      	ldr	r3, [pc, #236]	; (8004e34 <HAL_UART_RxCpltCallback+0x170>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	2b0d      	cmp	r3, #13
 8004d4a:	d11a      	bne.n	8004d82 <HAL_UART_RxCpltCallback+0xbe>
				uint8_t i=0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	73fb      	strb	r3, [r7, #15]
				g_uUart2_Rx_Flag = 1;
 8004d50:	4b3c      	ldr	r3, [pc, #240]	; (8004e44 <HAL_UART_RxCpltCallback+0x180>)
 8004d52:	2201      	movs	r2, #1
 8004d54:	701a      	strb	r2, [r3, #0]
				while(g_uUart2_Rx_head != g_uUart2_Rx_tail)
 8004d56:	e00e      	b.n	8004d76 <HAL_UART_RxCpltCallback+0xb2>
					g_uUart2_Rx_Cmd[i++] = g_uUart2_Rx_buffer[g_uUart2_Rx_tail++];
 8004d58:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <HAL_UART_RxCpltCallback+0x184>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	b2d1      	uxtb	r1, r2
 8004d60:	4a39      	ldr	r2, [pc, #228]	; (8004e48 <HAL_UART_RxCpltCallback+0x184>)
 8004d62:	7011      	strb	r1, [r2, #0]
 8004d64:	4619      	mov	r1, r3
 8004d66:	7bfb      	ldrb	r3, [r7, #15]
 8004d68:	1c5a      	adds	r2, r3, #1
 8004d6a:	73fa      	strb	r2, [r7, #15]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4b30      	ldr	r3, [pc, #192]	; (8004e30 <HAL_UART_RxCpltCallback+0x16c>)
 8004d70:	5c59      	ldrb	r1, [r3, r1]
 8004d72:	4b36      	ldr	r3, [pc, #216]	; (8004e4c <HAL_UART_RxCpltCallback+0x188>)
 8004d74:	5499      	strb	r1, [r3, r2]
				while(g_uUart2_Rx_head != g_uUart2_Rx_tail)
 8004d76:	4b2d      	ldr	r3, [pc, #180]	; (8004e2c <HAL_UART_RxCpltCallback+0x168>)
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	4b33      	ldr	r3, [pc, #204]	; (8004e48 <HAL_UART_RxCpltCallback+0x184>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d1ea      	bne.n	8004d58 <HAL_UART_RxCpltCallback+0x94>
		HAL_UART_Receive_IT(&huart2, &g_uUart2_Rx_now, 1);
 8004d82:	2201      	movs	r2, #1
 8004d84:	492c      	ldr	r1, [pc, #176]	; (8004e38 <HAL_UART_RxCpltCallback+0x174>)
 8004d86:	4832      	ldr	r0, [pc, #200]	; (8004e50 <HAL_UART_RxCpltCallback+0x18c>)
 8004d88:	f006 fb85 	bl	800b496 <HAL_UART_Receive_IT>
}
 8004d8c:	e03e      	b.n	8004e0c <HAL_UART_RxCpltCallback+0x148>
	else if (huart->Instance == USART3)	//
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a30      	ldr	r2, [pc, #192]	; (8004e54 <HAL_UART_RxCpltCallback+0x190>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d139      	bne.n	8004e0c <HAL_UART_RxCpltCallback+0x148>
		g_u485_Rx_prev = g_u485_Rx_buffer[g_u485_Rx_head-1];
 8004d98:	4b2f      	ldr	r3, [pc, #188]	; (8004e58 <HAL_UART_RxCpltCallback+0x194>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	4a2f      	ldr	r2, [pc, #188]	; (8004e5c <HAL_UART_RxCpltCallback+0x198>)
 8004da0:	5cd2      	ldrb	r2, [r2, r3]
 8004da2:	4b2f      	ldr	r3, [pc, #188]	; (8004e60 <HAL_UART_RxCpltCallback+0x19c>)
 8004da4:	701a      	strb	r2, [r3, #0]
		g_u485_Rx_buffer[g_u485_Rx_head++] =g_u485_Rx_now;
 8004da6:	4b2c      	ldr	r3, [pc, #176]	; (8004e58 <HAL_UART_RxCpltCallback+0x194>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	b2d1      	uxtb	r1, r2
 8004dae:	4a2a      	ldr	r2, [pc, #168]	; (8004e58 <HAL_UART_RxCpltCallback+0x194>)
 8004db0:	7011      	strb	r1, [r2, #0]
 8004db2:	461a      	mov	r2, r3
 8004db4:	4b2b      	ldr	r3, [pc, #172]	; (8004e64 <HAL_UART_RxCpltCallback+0x1a0>)
 8004db6:	7819      	ldrb	r1, [r3, #0]
 8004db8:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <HAL_UART_RxCpltCallback+0x198>)
 8004dba:	5499      	strb	r1, [r3, r2]
		if(g_u485_Rx_now == '\n')
 8004dbc:	4b29      	ldr	r3, [pc, #164]	; (8004e64 <HAL_UART_RxCpltCallback+0x1a0>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b0a      	cmp	r3, #10
 8004dc2:	d11e      	bne.n	8004e02 <HAL_UART_RxCpltCallback+0x13e>
			if(g_u485_Rx_prev == '\r')
 8004dc4:	4b26      	ldr	r3, [pc, #152]	; (8004e60 <HAL_UART_RxCpltCallback+0x19c>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b0d      	cmp	r3, #13
 8004dca:	d11a      	bne.n	8004e02 <HAL_UART_RxCpltCallback+0x13e>
				uint8_t i=0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73bb      	strb	r3, [r7, #14]
				g_u485_Rx_Flag = 1;
 8004dd0:	4b25      	ldr	r3, [pc, #148]	; (8004e68 <HAL_UART_RxCpltCallback+0x1a4>)
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	701a      	strb	r2, [r3, #0]
				while(g_u485_Rx_head != g_u485_Rx_tail)
 8004dd6:	e00e      	b.n	8004df6 <HAL_UART_RxCpltCallback+0x132>
					g_u485_Rx_Cmd[i++] = g_u485_Rx_buffer[g_u485_Rx_tail++];
 8004dd8:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <HAL_UART_RxCpltCallback+0x1a8>)
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	b2d1      	uxtb	r1, r2
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <HAL_UART_RxCpltCallback+0x1a8>)
 8004de2:	7011      	strb	r1, [r2, #0]
 8004de4:	4619      	mov	r1, r3
 8004de6:	7bbb      	ldrb	r3, [r7, #14]
 8004de8:	1c5a      	adds	r2, r3, #1
 8004dea:	73ba      	strb	r2, [r7, #14]
 8004dec:	461a      	mov	r2, r3
 8004dee:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <HAL_UART_RxCpltCallback+0x198>)
 8004df0:	5c59      	ldrb	r1, [r3, r1]
 8004df2:	4b1f      	ldr	r3, [pc, #124]	; (8004e70 <HAL_UART_RxCpltCallback+0x1ac>)
 8004df4:	5499      	strb	r1, [r3, r2]
				while(g_u485_Rx_head != g_u485_Rx_tail)
 8004df6:	4b18      	ldr	r3, [pc, #96]	; (8004e58 <HAL_UART_RxCpltCallback+0x194>)
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <HAL_UART_RxCpltCallback+0x1a8>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d1ea      	bne.n	8004dd8 <HAL_UART_RxCpltCallback+0x114>
		HAL_UART_Receive_IT(&huart3, &g_u485_Rx_now, 1);
 8004e02:	2201      	movs	r2, #1
 8004e04:	4917      	ldr	r1, [pc, #92]	; (8004e64 <HAL_UART_RxCpltCallback+0x1a0>)
 8004e06:	481b      	ldr	r0, [pc, #108]	; (8004e74 <HAL_UART_RxCpltCallback+0x1b0>)
 8004e08:	f006 fb45 	bl	800b496 <HAL_UART_Receive_IT>
}
 8004e0c:	bf00      	nop
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	40013800 	.word	0x40013800
 8004e18:	20000497 	.word	0x20000497
 8004e1c:	200011e7 	.word	0x200011e7
 8004e20:	20000a10 	.word	0x20000a10
 8004e24:	20001500 	.word	0x20001500
 8004e28:	40004400 	.word	0x40004400
 8004e2c:	200009d8 	.word	0x200009d8
 8004e30:	20000f8c 	.word	0x20000f8c
 8004e34:	20000d44 	.word	0x20000d44
 8004e38:	200011e5 	.word	0x200011e5
 8004e3c:	20001198 	.word	0x20001198
 8004e40:	20000394 	.word	0x20000394
 8004e44:	200011e4 	.word	0x200011e4
 8004e48:	20000390 	.word	0x20000390
 8004e4c:	20000d78 	.word	0x20000d78
 8004e50:	20001548 	.word	0x20001548
 8004e54:	40004800 	.word	0x40004800
 8004e58:	200011b0 	.word	0x200011b0
 8004e5c:	20001090 	.word	0x20001090
 8004e60:	20000f88 	.word	0x20000f88
 8004e64:	2000108c 	.word	0x2000108c
 8004e68:	20000b12 	.word	0x20000b12
 8004e6c:	200011e6 	.word	0x200011e6
 8004e70:	200008d8 	.word	0x200008d8
 8004e74:	200014b8 	.word	0x200014b8

08004e78 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
//void CAN1_RX1_IRQHandler(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	/* Get RX message */
	if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &g_Can_RxHeader, g_uCan_RxData) != HAL_OK)
 8004e80:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8004e82:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8004e84:	2100      	movs	r1, #0
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f002 fb87 	bl	800759a <HAL_CAN_GetRxMessage>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
	{
		/* Reception Error */
		Error_Handler();
 8004e92:	f000 f868 	bl	8004f66 <Error_Handler>
	}
	g_uCan_Rxflag = 1;
 8004e96:	4b05      	ldr	r3, [pc, #20]	; (8004eac <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	701a      	strb	r2, [r3, #0]
	//printf("StdID: %04lx, IDE: %ld, DLC: %ld\r\n", g_Can_RxHeader.StdId, g_Can_RxHeader.IDE, g_Can_RxHeader.DLC);
	//printf("%04lx Data: %d %d %d %d %d %d %d %d\r\n", g_uCan_RxData[0], g_uCan_RxData[1], g_uCan_RxData[2], g_uCan_RxData[3], g_uCan_RxData[4], g_uCan_RxData[5], g_uCan_RxData[6], g_uCan_RxData[7]);
}
 8004e9c:	bf00      	nop
 8004e9e:	3708      	adds	r7, #8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20001190 	.word	0x20001190
 8004ea8:	20000d54 	.word	0x20000d54
 8004eac:	20000391 	.word	0x20000391

08004eb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim2.Instance)	//Timer 100ms
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	4b1b      	ldr	r3, [pc, #108]	; (8004f2c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d12f      	bne.n	8004f24 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		tickCnt_100ms++;
 8004ec4:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	4a19      	ldr	r2, [pc, #100]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004ecc:	6013      	str	r3, [r2, #0]
		g_bFlag_100ms = TRUE;
 8004ece:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	701a      	strb	r2, [r3, #0]
		if(tickCnt_100ms %10 == 0)
 8004ed4:	4b16      	ldr	r3, [pc, #88]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8004ed6:	6819      	ldr	r1, [r3, #0]
 8004ed8:	4b17      	ldr	r3, [pc, #92]	; (8004f38 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004eda:	fba3 2301 	umull	r2, r3, r3, r1
 8004ede:	08da      	lsrs	r2, r3, #3
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	1aca      	subs	r2, r1, r3
 8004eea:	2a00      	cmp	r2, #0
 8004eec:	d11a      	bne.n	8004f24 <HAL_TIM_PeriodElapsedCallback+0x74>
		{
			g_bFlag_1Sec = TRUE;
 8004eee:	4b13      	ldr	r3, [pc, #76]	; (8004f3c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]
			tickCnt_1s++;
 8004ef4:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3301      	adds	r3, #1
 8004efa:	4a11      	ldr	r2, [pc, #68]	; (8004f40 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004efc:	6013      	str	r3, [r2, #0]
			calc_boot_time();
 8004efe:	f000 fed1 	bl	8005ca4 <calc_boot_time>
			if(tickCnt_1s%5 == FALSE)	g_bFlag_5Sec = TRUE;
 8004f02:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004f04:	6819      	ldr	r1, [r3, #0]
 8004f06:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004f08:	fba3 2301 	umull	r2, r3, r3, r1
 8004f0c:	089a      	lsrs	r2, r3, #2
 8004f0e:	4613      	mov	r3, r2
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	4413      	add	r3, r2
 8004f14:	1aca      	subs	r2, r1, r3
 8004f16:	2a00      	cmp	r2, #0
 8004f18:	d102      	bne.n	8004f20 <HAL_TIM_PeriodElapsedCallback+0x70>
 8004f1a:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	701a      	strb	r2, [r3, #0]

			Check_bms_error();
 8004f20:	f000 fe2a 	bl	8005b78 <Check_bms_error>
		}


	}
}
 8004f24:	bf00      	nop
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20001470 	.word	0x20001470
 8004f30:	2000141c 	.word	0x2000141c
 8004f34:	20001419 	.word	0x20001419
 8004f38:	cccccccd 	.word	0xcccccccd
 8004f3c:	20001420 	.word	0x20001420
 8004f40:	20001424 	.word	0x20001424
 8004f44:	20001418 	.word	0x20001418

08004f48 <HAL_CAN_ErrorCallback>:

// CAN Error 콜백
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
	//printf("HAL_CAN_ErrorCallback\r\n");
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bc80      	pop	{r7}
 8004f58:	4770      	bx	lr

08004f5a <HAL_PWR_PVDCallback>:

// PVD Callback
void HAL_PWR_PVDCallback()
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	af00      	add	r7, sp, #0

}
 8004f5e:	bf00      	nop
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bc80      	pop	{r7}
 8004f64:	4770      	bx	lr

08004f66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f66:	b480      	push	{r7}
 8004f68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f6a:	b672      	cpsid	i
}
 8004f6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8004f6e:	e7fe      	b.n	8004f6e <Error_Handler+0x8>

08004f70 <Setup_ADC_default>:

//adc function
// mcu 4 adc ch

void Setup_ADC_default()
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b0d0      	sub	sp, #320	; 0x140
 8004f74:	af00      	add	r7, sp, #0
	float voltage_fix;
	uint16_t adc_arr_2[ADC_SAMPLE] = {0,};
 8004f76:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004f7a:	223c      	movs	r2, #60	; 0x3c
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f007 fa4c 	bl	800c41c <memset>

	uint32_t adc_value=0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	float adc_v_cur_ct;
	uint16_t adc_dma_copy[ADC_CH_CNT*ADC_SAMPLE] = {0,};
 8004f8a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004f8e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004f92:	4618      	mov	r0, r3
 8004f94:	23f0      	movs	r3, #240	; 0xf0
 8004f96:	461a      	mov	r2, r3
 8004f98:	2100      	movs	r1, #0
 8004f9a:	f007 fa3f 	bl	800c41c <memset>
	memcpy(adc_dma_copy,g_uAdc_dma_Data,sizeof(adc_dma_copy));
 8004f9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004fa2:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004fa6:	4a5c      	ldr	r2, [pc, #368]	; (8005118 <Setup_ADC_default+0x1a8>)
 8004fa8:	4618      	mov	r0, r3
 8004faa:	4611      	mov	r1, r2
 8004fac:	23f0      	movs	r3, #240	; 0xf0
 8004fae:	461a      	mov	r2, r3
 8004fb0:	f007 faae 	bl	800c510 <memcpy>

	for(int i=0; i<ADC_SAMPLE; i++)
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004fba:	e016      	b.n	8004fea <Setup_ADC_default+0x7a>
	{
		adc_arr_2[i]=  adc_dma_copy[ADC_CH_CNT*i+2];
 8004fbc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	1c9a      	adds	r2, r3, #2
 8004fc4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8004fc8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004fcc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004fd0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004fd4:	005b      	lsls	r3, r3, #1
 8004fd6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004fda:	443b      	add	r3, r7
 8004fdc:	f823 2c50 	strh.w	r2, [r3, #-80]
	for(int i=0; i<ADC_SAMPLE; i++)
 8004fe0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004fea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8004fee:	2b1d      	cmp	r3, #29
 8004ff0:	dde4      	ble.n	8004fbc <Setup_ADC_default+0x4c>
	}
	quickSort(adc_arr_2, 0, ADC_SAMPLE-1);
 8004ff2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8004ff6:	221d      	movs	r2, #29
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fbca 	bl	8005794 <quickSort>

	for(int i=ADC_NOT_USE; i<ADC_SAMPLE-ADC_NOT_USE; i++)	// 0~9 버림 // 10~19 사용	//20~29 버림
 8005000:	230a      	movs	r3, #10
 8005002:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8005006:	e012      	b.n	800502e <Setup_ADC_default+0xbe>
	{
		adc_value +=  adc_arr_2[i];
 8005008:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005012:	443b      	add	r3, r7
 8005014:	f833 3c50 	ldrh.w	r3, [r3, #-80]
 8005018:	461a      	mov	r2, r3
 800501a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800501e:	4413      	add	r3, r2
 8005020:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	for(int i=ADC_NOT_USE; i<ADC_SAMPLE-ADC_NOT_USE; i++)	// 0~9 버림 // 10~19 사용	//20~29 버림
 8005024:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005028:	3301      	adds	r3, #1
 800502a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800502e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005032:	2b13      	cmp	r3, #19
 8005034:	dde8      	ble.n	8005008 <Setup_ADC_default+0x98>
	}
	adc_v_cur_ct=(adc_value/10 * 3.30/4095.0);	//ct sensor		= voltage
 8005036:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800503a:	4a38      	ldr	r2, [pc, #224]	; (800511c <Setup_ADC_default+0x1ac>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	08db      	lsrs	r3, r3, #3
 8005042:	4618      	mov	r0, r3
 8005044:	f7fb f9ce 	bl	80003e4 <__aeabi_ui2d>
 8005048:	a32f      	add	r3, pc, #188	; (adr r3, 8005108 <Setup_ADC_default+0x198>)
 800504a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504e:	f7fb fa43 	bl	80004d8 <__aeabi_dmul>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4610      	mov	r0, r2
 8005058:	4619      	mov	r1, r3
 800505a:	a32d      	add	r3, pc, #180	; (adr r3, 8005110 <Setup_ADC_default+0x1a0>)
 800505c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005060:	f7fb fb64 	bl	800072c <__aeabi_ddiv>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4610      	mov	r0, r2
 800506a:	4619      	mov	r1, r3
 800506c:	f7fb fcee 	bl	8000a4c <__aeabi_d2f>
 8005070:	4603      	mov	r3, r0
 8005072:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	CT.uR1 		= 7150;
 8005076:	4b2a      	ldr	r3, [pc, #168]	; (8005120 <Setup_ADC_default+0x1b0>)
 8005078:	f641 32ee 	movw	r2, #7150	; 0x1bee
 800507c:	801a      	strh	r2, [r3, #0]
	CT.uR2 		= 10000;
 800507e:	4b28      	ldr	r3, [pc, #160]	; (8005120 <Setup_ADC_default+0x1b0>)
 8005080:	f242 7210 	movw	r2, #10000	; 0x2710
 8005084:	805a      	strh	r2, [r3, #2]
	CT.fStep_1A 	= 20;									//5V base -> 1A = 20mv
 8005086:	4b26      	ldr	r3, [pc, #152]	; (8005120 <Setup_ADC_default+0x1b0>)
 8005088:	4a26      	ldr	r2, [pc, #152]	; (8005124 <Setup_ADC_default+0x1b4>)
 800508a:	605a      	str	r2, [r3, #4]

	//voltage_fix = (double)CT.R2/(CT.R1+CT.R2);		//0.5830 ->	fix to 0.626(Real test vlaue)
	voltage_fix = 0.626;
 800508c:	4b26      	ldr	r3, [pc, #152]	; (8005128 <Setup_ADC_default+0x1b8>)
 800508e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	//CT.Step_1A 	= CT.Step_1A * CT.R2/(CT.R1+CT.R2);		//base voltage down -> 1A= 11.x mv
	CT.fStep_1A 	= CT.fStep_1A * voltage_fix;				//base voltage down -> 1A= 12.52 mv
 8005092:	4b23      	ldr	r3, [pc, #140]	; (8005120 <Setup_ADC_default+0x1b0>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f8d7 112c 	ldr.w	r1, [r7, #300]	; 0x12c
 800509a:	4618      	mov	r0, r3
 800509c:	f7fb fe34 	bl	8000d08 <__aeabi_fmul>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	4b1e      	ldr	r3, [pc, #120]	; (8005120 <Setup_ADC_default+0x1b0>)
 80050a6:	605a      	str	r2, [r3, #4]
	CT.fStep_01A	= CT.fStep_1A/10;
 80050a8:	4b1d      	ldr	r3, [pc, #116]	; (8005120 <Setup_ADC_default+0x1b0>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	491f      	ldr	r1, [pc, #124]	; (800512c <Setup_ADC_default+0x1bc>)
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fb fede 	bl	8000e70 <__aeabi_fdiv>
 80050b4:	4603      	mov	r3, r0
 80050b6:	461a      	mov	r2, r3
 80050b8:	4b19      	ldr	r3, [pc, #100]	; (8005120 <Setup_ADC_default+0x1b0>)
 80050ba:	609a      	str	r2, [r3, #8]
	//CT.Vmax		=(double)5*CT.R2/(CT.R1+CT.R2);		//2.9x voltage
	CT.fVmax		= 5 * voltage_fix;						//5v in -> 2.9x voltage //5v in ->(Real test vlaue 3.13)
 80050bc:	491c      	ldr	r1, [pc, #112]	; (8005130 <Setup_ADC_default+0x1c0>)
 80050be:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80050c2:	f7fb fe21 	bl	8000d08 <__aeabi_fmul>
 80050c6:	4603      	mov	r3, r0
 80050c8:	461a      	mov	r2, r3
 80050ca:	4b15      	ldr	r3, [pc, #84]	; (8005120 <Setup_ADC_default+0x1b0>)
 80050cc:	60da      	str	r2, [r3, #12]
	CT.fVmax_half =	CT.fVmax/2;
 80050ce:	4b14      	ldr	r3, [pc, #80]	; (8005120 <Setup_ADC_default+0x1b0>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fb feca 	bl	8000e70 <__aeabi_fdiv>
 80050dc:	4603      	mov	r3, r0
 80050de:	461a      	mov	r2, r3
 80050e0:	4b0f      	ldr	r3, [pc, #60]	; (8005120 <Setup_ADC_default+0x1b0>)
 80050e2:	611a      	str	r2, [r3, #16]
	//CT.Vmax_half 	=	CT.Vmax/2 - 0.1716;			//default value offset	0.1716
	CT.fOffset_v		= 	CT.fVmax_half - adc_v_cur_ct;
 80050e4:	4b0e      	ldr	r3, [pc, #56]	; (8005120 <Setup_ADC_default+0x1b0>)
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fb fd01 	bl	8000af4 <__aeabi_fsub>
 80050f2:	4603      	mov	r3, r0
 80050f4:	461a      	mov	r2, r3
 80050f6:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <Setup_ADC_default+0x1b0>)
 80050f8:	615a      	str	r2, [r3, #20]
}
 80050fa:	bf00      	nop
 80050fc:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	f3af 8000 	nop.w
 8005108:	66666666 	.word	0x66666666
 800510c:	400a6666 	.word	0x400a6666
 8005110:	00000000 	.word	0x00000000
 8005114:	40affe00 	.word	0x40affe00
 8005118:	20000e7c 	.word	0x20000e7c
 800511c:	cccccccd 	.word	0xcccccccd
 8005120:	20000f70 	.word	0x20000f70
 8005124:	41a00000 	.word	0x41a00000
 8005128:	3f204189 	.word	0x3f204189
 800512c:	41200000 	.word	0x41200000
 8005130:	40a00000 	.word	0x40a00000

08005134 <Adc_dma_start>:

void Adc_dma_start()
{
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)g_uAdc_dma_Data, ADC_CH_CNT * ADC_SAMPLE);
 8005138:	2278      	movs	r2, #120	; 0x78
 800513a:	4903      	ldr	r1, [pc, #12]	; (8005148 <Adc_dma_start+0x14>)
 800513c:	4803      	ldr	r0, [pc, #12]	; (800514c <Adc_dma_start+0x18>)
 800513e:	f001 fd31 	bl	8006ba4 <HAL_ADC_Start_DMA>
}
 8005142:	bf00      	nop
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000e7c 	.word	0x20000e7c
 800514c:	200012b8 	.word	0x200012b8

08005150 <Read_DMA_Current_n_Temperature>:
{
	HAL_ADC_Stop_DMA(&hadc1);
}

void Read_DMA_Current_n_Temperature()
{
 8005150:	b580      	push	{r7, lr}
 8005152:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005156:	af00      	add	r7, sp, #0
	uint32_t adc_value[ADC_CH_CNT] = {0,};
 8005158:	f507 73f0 	add.w	r3, r7, #480	; 0x1e0
 800515c:	2200      	movs	r2, #0
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	605a      	str	r2, [r3, #4]
 8005162:	609a      	str	r2, [r3, #8]
 8005164:	60da      	str	r2, [r3, #12]
	uint16_t adc_dma_copy[ADC_CH_CNT*ADC_SAMPLE] = {0,};
 8005166:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800516a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800516e:	4618      	mov	r0, r3
 8005170:	23f0      	movs	r3, #240	; 0xf0
 8005172:	461a      	mov	r2, r3
 8005174:	2100      	movs	r1, #0
 8005176:	f007 f951 	bl	800c41c <memset>
	uint16_t adc_arr_0[ADC_SAMPLE] = {0,};
 800517a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800517e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005182:	4618      	mov	r0, r3
 8005184:	233c      	movs	r3, #60	; 0x3c
 8005186:	461a      	mov	r2, r3
 8005188:	2100      	movs	r1, #0
 800518a:	f007 f947 	bl	800c41c <memset>
	uint16_t adc_arr_1[ADC_SAMPLE] = {0,};
 800518e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005192:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005196:	4618      	mov	r0, r3
 8005198:	233c      	movs	r3, #60	; 0x3c
 800519a:	461a      	mov	r2, r3
 800519c:	2100      	movs	r1, #0
 800519e:	f007 f93d 	bl	800c41c <memset>
	uint16_t adc_arr_2[ADC_SAMPLE] = {0,};
 80051a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051a6:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80051aa:	4618      	mov	r0, r3
 80051ac:	233c      	movs	r3, #60	; 0x3c
 80051ae:	461a      	mov	r2, r3
 80051b0:	2100      	movs	r1, #0
 80051b2:	f007 f933 	bl	800c41c <memset>
	uint16_t adc_arr_3[ADC_SAMPLE] = {0,};
 80051b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ba:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 80051be:	4618      	mov	r0, r3
 80051c0:	233c      	movs	r3, #60	; 0x3c
 80051c2:	461a      	mov	r2, r3
 80051c4:	2100      	movs	r1, #0
 80051c6:	f007 f929 	bl	800c41c <memset>
	float adc_v_cur;
	float adc_v_cur_ct;
	float adc_v_ntc0;
	float adc_v_ntc1;

	memcpy(adc_dma_copy,g_uAdc_dma_Data,sizeof(adc_dma_copy));
 80051ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80051d2:	4a3d      	ldr	r2, [pc, #244]	; (80052c8 <Read_DMA_Current_n_Temperature+0x178>)
 80051d4:	4618      	mov	r0, r3
 80051d6:	4611      	mov	r1, r2
 80051d8:	23f0      	movs	r3, #240	; 0xf0
 80051da:	461a      	mov	r2, r3
 80051dc:	f007 f998 	bl	800c510 <memcpy>

	for(int i=0; i<ADC_SAMPLE; i++)
 80051e0:	2300      	movs	r3, #0
 80051e2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80051e6:	e04b      	b.n	8005280 <Read_DMA_Current_n_Temperature+0x130>
	{
		adc_arr_0[i]=  adc_dma_copy[ADC_CH_CNT*i];
 80051e8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80051ec:	009a      	lsls	r2, r3, #2
 80051ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051f2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80051f6:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80051fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005202:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8005206:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		adc_arr_1[i]=  adc_dma_copy[ADC_CH_CNT*i+1];
 800520a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	1c5a      	adds	r2, r3, #1
 8005212:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005216:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800521a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800521e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005222:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8005226:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800522a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		adc_arr_2[i]=  adc_dma_copy[ADC_CH_CNT*i+2];
 800522e:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	1c9a      	adds	r2, r3, #2
 8005236:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800523a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800523e:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8005242:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005246:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800524a:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800524e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		adc_arr_3[i]=  adc_dma_copy[ADC_CH_CNT*i+3];
 8005252:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	1cda      	adds	r2, r3, #3
 800525a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800525e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005262:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8005266:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800526a:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 800526e:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8005272:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(int i=0; i<ADC_SAMPLE; i++)
 8005276:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800527a:	3301      	adds	r3, #1
 800527c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8005280:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8005284:	2b1d      	cmp	r3, #29
 8005286:	ddaf      	ble.n	80051e8 <Read_DMA_Current_n_Temperature+0x98>
	}

	quickSort(adc_arr_0, 0, ADC_SAMPLE-1);
 8005288:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800528c:	221d      	movs	r2, #29
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fa7f 	bl	8005794 <quickSort>
	quickSort(adc_arr_1, 0, ADC_SAMPLE-1);
 8005296:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800529a:	221d      	movs	r2, #29
 800529c:	2100      	movs	r1, #0
 800529e:	4618      	mov	r0, r3
 80052a0:	f000 fa78 	bl	8005794 <quickSort>
	quickSort(adc_arr_2, 0, ADC_SAMPLE-1);
 80052a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80052a8:	221d      	movs	r2, #29
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fa71 	bl	8005794 <quickSort>
	quickSort(adc_arr_3, 0, ADC_SAMPLE-1);
 80052b2:	463b      	mov	r3, r7
 80052b4:	221d      	movs	r2, #29
 80052b6:	2100      	movs	r1, #0
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fa6b 	bl	8005794 <quickSort>

	for(int i=ADC_NOT_USE; i<ADC_SAMPLE-ADC_NOT_USE; i++)	// 0~9 버림 // 10~19 사용	//20~29 버림
 80052be:	230a      	movs	r3, #10
 80052c0:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 80052c4:	e03b      	b.n	800533e <Read_DMA_Current_n_Temperature+0x1ee>
 80052c6:	bf00      	nop
 80052c8:	20000e7c 	.word	0x20000e7c
	{
		adc_value[0] +=  adc_arr_0[i];		//중간 10개값 저장
 80052cc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80052d0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80052d4:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
 80052d8:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 80052dc:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80052e0:	4413      	add	r3, r2
 80052e2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
		adc_value[1] +=  adc_arr_1[i];
 80052e6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80052ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80052ee:	f5a2 72c8 	sub.w	r2, r2, #400	; 0x190
 80052f2:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 80052f6:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80052fa:	4413      	add	r3, r2
 80052fc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
		adc_value[2] +=  adc_arr_2[i];
 8005300:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8005304:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005308:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800530c:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 8005310:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8005314:	4413      	add	r3, r2
 8005316:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
		adc_value[3] +=  adc_arr_3[i];
 800531a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800531e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005322:	f5a2 7202 	sub.w	r2, r2, #520	; 0x208
 8005326:	f8d7 1200 	ldr.w	r1, [r7, #512]	; 0x200
 800532a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800532e:	4413      	add	r3, r2
 8005330:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
	for(int i=ADC_NOT_USE; i<ADC_SAMPLE-ADC_NOT_USE; i++)	// 0~9 버림 // 10~19 사용	//20~29 버림
 8005334:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005338:	3301      	adds	r3, #1
 800533a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 800533e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005342:	2b13      	cmp	r3, #19
 8005344:	ddc2      	ble.n	80052cc <Read_DMA_Current_n_Temperature+0x17c>
	}

	adc_v_ntc1	=(adc_value[0]/10 * 3.30/4095.0);	//nct1			= voltage
 8005346:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800534a:	4a85      	ldr	r2, [pc, #532]	; (8005560 <Read_DMA_Current_n_Temperature+0x410>)
 800534c:	fba2 2303 	umull	r2, r3, r2, r3
 8005350:	08db      	lsrs	r3, r3, #3
 8005352:	4618      	mov	r0, r3
 8005354:	f7fb f846 	bl	80003e4 <__aeabi_ui2d>
 8005358:	a37d      	add	r3, pc, #500	; (adr r3, 8005550 <Read_DMA_Current_n_Temperature+0x400>)
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	f7fb f8bb 	bl	80004d8 <__aeabi_dmul>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	4610      	mov	r0, r2
 8005368:	4619      	mov	r1, r3
 800536a:	a37b      	add	r3, pc, #492	; (adr r3, 8005558 <Read_DMA_Current_n_Temperature+0x408>)
 800536c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005370:	f7fb f9dc 	bl	800072c <__aeabi_ddiv>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4610      	mov	r0, r2
 800537a:	4619      	mov	r1, r3
 800537c:	f7fb fb66 	bl	8000a4c <__aeabi_d2f>
 8005380:	4603      	mov	r3, r0
 8005382:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	adc_v_ntc0	=(adc_value[1]/10)* 3.30/4095.0;	//nct0			= voltage
 8005386:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800538a:	4a75      	ldr	r2, [pc, #468]	; (8005560 <Read_DMA_Current_n_Temperature+0x410>)
 800538c:	fba2 2303 	umull	r2, r3, r2, r3
 8005390:	08db      	lsrs	r3, r3, #3
 8005392:	4618      	mov	r0, r3
 8005394:	f7fb f826 	bl	80003e4 <__aeabi_ui2d>
 8005398:	a36d      	add	r3, pc, #436	; (adr r3, 8005550 <Read_DMA_Current_n_Temperature+0x400>)
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	f7fb f89b 	bl	80004d8 <__aeabi_dmul>
 80053a2:	4602      	mov	r2, r0
 80053a4:	460b      	mov	r3, r1
 80053a6:	4610      	mov	r0, r2
 80053a8:	4619      	mov	r1, r3
 80053aa:	a36b      	add	r3, pc, #428	; (adr r3, 8005558 <Read_DMA_Current_n_Temperature+0x408>)
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f7fb f9bc 	bl	800072c <__aeabi_ddiv>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4610      	mov	r0, r2
 80053ba:	4619      	mov	r1, r3
 80053bc:	f7fb fb46 	bl	8000a4c <__aeabi_d2f>
 80053c0:	4603      	mov	r3, r0
 80053c2:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	adc_v_cur_ct=(adc_value[2]/10 * 3.30/4095.0);	//ct sensor		= voltage
 80053c6:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80053ca:	4a65      	ldr	r2, [pc, #404]	; (8005560 <Read_DMA_Current_n_Temperature+0x410>)
 80053cc:	fba2 2303 	umull	r2, r3, r2, r3
 80053d0:	08db      	lsrs	r3, r3, #3
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fb f806 	bl	80003e4 <__aeabi_ui2d>
 80053d8:	a35d      	add	r3, pc, #372	; (adr r3, 8005550 <Read_DMA_Current_n_Temperature+0x400>)
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	f7fb f87b 	bl	80004d8 <__aeabi_dmul>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4610      	mov	r0, r2
 80053e8:	4619      	mov	r1, r3
 80053ea:	a35b      	add	r3, pc, #364	; (adr r3, 8005558 <Read_DMA_Current_n_Temperature+0x408>)
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f7fb f99c 	bl	800072c <__aeabi_ddiv>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4610      	mov	r0, r2
 80053fa:	4619      	mov	r1, r3
 80053fc:	f7fb fb26 	bl	8000a4c <__aeabi_d2f>
 8005400:	4603      	mov	r3, r0
 8005402:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	adc_v_cur	=(adc_value[3]/10 * 3.30/4095.0);	//PCB current	= voltage
 8005406:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800540a:	4a55      	ldr	r2, [pc, #340]	; (8005560 <Read_DMA_Current_n_Temperature+0x410>)
 800540c:	fba2 2303 	umull	r2, r3, r2, r3
 8005410:	08db      	lsrs	r3, r3, #3
 8005412:	4618      	mov	r0, r3
 8005414:	f7fa ffe6 	bl	80003e4 <__aeabi_ui2d>
 8005418:	a34d      	add	r3, pc, #308	; (adr r3, 8005550 <Read_DMA_Current_n_Temperature+0x400>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f7fb f85b 	bl	80004d8 <__aeabi_dmul>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4610      	mov	r0, r2
 8005428:	4619      	mov	r1, r3
 800542a:	a34b      	add	r3, pc, #300	; (adr r3, 8005558 <Read_DMA_Current_n_Temperature+0x408>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f7fb f97c 	bl	800072c <__aeabi_ddiv>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4610      	mov	r0, r2
 800543a:	4619      	mov	r1, r3
 800543c:	f7fb fb06 	bl	8000a4c <__aeabi_d2f>
 8005440:	4603      	mov	r3, r0
 8005442:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0

	g_Adc_temp1 	= Adc_to_temperature(adc_v_ntc1);
 8005446:	f8d7 01fc 	ldr.w	r0, [r7, #508]	; 0x1fc
 800544a:	f7fa ffed 	bl	8000428 <__aeabi_f2d>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	4610      	mov	r0, r2
 8005454:	4619      	mov	r1, r3
 8005456:	f000 f923 	bl	80056a0 <Adc_to_temperature>
 800545a:	4603      	mov	r3, r0
 800545c:	461a      	mov	r2, r3
 800545e:	4b41      	ldr	r3, [pc, #260]	; (8005564 <Read_DMA_Current_n_Temperature+0x414>)
 8005460:	801a      	strh	r2, [r3, #0]
	g_Adc_temp0 	= Adc_to_temperature(adc_v_ntc0);
 8005462:	f8d7 01f8 	ldr.w	r0, [r7, #504]	; 0x1f8
 8005466:	f7fa ffdf 	bl	8000428 <__aeabi_f2d>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4610      	mov	r0, r2
 8005470:	4619      	mov	r1, r3
 8005472:	f000 f915 	bl	80056a0 <Adc_to_temperature>
 8005476:	4603      	mov	r3, r0
 8005478:	461a      	mov	r2, r3
 800547a:	4b3b      	ldr	r3, [pc, #236]	; (8005568 <Read_DMA_Current_n_Temperature+0x418>)
 800547c:	801a      	strh	r2, [r3, #0]
	g_Adc_ct_Amp 	= Calc_CT_sensor(adc_v_cur_ct);
 800547e:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 8005482:	f7fa ffd1 	bl	8000428 <__aeabi_f2d>
 8005486:	4602      	mov	r2, r0
 8005488:	460b      	mov	r3, r1
 800548a:	4610      	mov	r0, r2
 800548c:	4619      	mov	r1, r3
 800548e:	f000 f8c5 	bl	800561c <Calc_CT_sensor>
 8005492:	4603      	mov	r3, r0
 8005494:	461a      	mov	r2, r3
 8005496:	4b35      	ldr	r3, [pc, #212]	; (800556c <Read_DMA_Current_n_Temperature+0x41c>)
 8005498:	801a      	strh	r2, [r3, #0]
	g_Adc_pcb_Amp = Calc_PCB_current(adc_v_cur);
 800549a:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 800549e:	f000 f86f 	bl	8005580 <Calc_PCB_current>
 80054a2:	4603      	mov	r3, r0
 80054a4:	461a      	mov	r2, r3
 80054a6:	4b32      	ldr	r3, [pc, #200]	; (8005570 <Read_DMA_Current_n_Temperature+0x420>)
 80054a8:	801a      	strh	r2, [r3, #0]

	Bms.Current = (double)(g_Adc_ct_Amp / 10.);
 80054aa:	4b30      	ldr	r3, [pc, #192]	; (800556c <Read_DMA_Current_n_Temperature+0x41c>)
 80054ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fa ffa7 	bl	8000404 <__aeabi_i2d>
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	4b2e      	ldr	r3, [pc, #184]	; (8005574 <Read_DMA_Current_n_Temperature+0x424>)
 80054bc:	f7fb f936 	bl	800072c <__aeabi_ddiv>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	492c      	ldr	r1, [pc, #176]	; (8005578 <Read_DMA_Current_n_Temperature+0x428>)
 80054c6:	e9c1 2308 	strd	r2, r3, [r1, #32]

	Bms.Temperature[0] = g_Adc_temp0;
 80054ca:	4b27      	ldr	r3, [pc, #156]	; (8005568 <Read_DMA_Current_n_Temperature+0x418>)
 80054cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80054d0:	4b29      	ldr	r3, [pc, #164]	; (8005578 <Read_DMA_Current_n_Temperature+0x428>)
 80054d2:	821a      	strh	r2, [r3, #16]
	Bms.Temperature[1] = g_Adc_temp1;
 80054d4:	4b23      	ldr	r3, [pc, #140]	; (8005564 <Read_DMA_Current_n_Temperature+0x414>)
 80054d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80054da:	4b27      	ldr	r3, [pc, #156]	; (8005578 <Read_DMA_Current_n_Temperature+0x428>)
 80054dc:	825a      	strh	r2, [r3, #18]

	if(Bms.MaxTemperature[0] < g_Adc_temp0)
 80054de:	4b26      	ldr	r3, [pc, #152]	; (8005578 <Read_DMA_Current_n_Temperature+0x428>)
 80054e0:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80054e4:	4b20      	ldr	r3, [pc, #128]	; (8005568 <Read_DMA_Current_n_Temperature+0x418>)
 80054e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	da04      	bge.n	80054f8 <Read_DMA_Current_n_Temperature+0x3a8>
	{
		Bms.MaxTemperature[0] = g_Adc_temp0;
 80054ee:	4b1e      	ldr	r3, [pc, #120]	; (8005568 <Read_DMA_Current_n_Temperature+0x418>)
 80054f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80054f4:	4b20      	ldr	r3, [pc, #128]	; (8005578 <Read_DMA_Current_n_Temperature+0x428>)
 80054f6:	829a      	strh	r2, [r3, #20]
	}
	if(Bms.MaxTemperature[1] < g_Adc_temp1)
 80054f8:	4b1f      	ldr	r3, [pc, #124]	; (8005578 <Read_DMA_Current_n_Temperature+0x428>)
 80054fa:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 80054fe:	4b19      	ldr	r3, [pc, #100]	; (8005564 <Read_DMA_Current_n_Temperature+0x414>)
 8005500:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005504:	429a      	cmp	r2, r3
 8005506:	da04      	bge.n	8005512 <Read_DMA_Current_n_Temperature+0x3c2>
	{
		Bms.MaxTemperature[1] = g_Adc_temp1;
 8005508:	4b16      	ldr	r3, [pc, #88]	; (8005564 <Read_DMA_Current_n_Temperature+0x414>)
 800550a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800550e:	4b1a      	ldr	r3, [pc, #104]	; (8005578 <Read_DMA_Current_n_Temperature+0x428>)
 8005510:	82da      	strh	r2, [r3, #22]
	}

	if(Bms.MinTemperature[0] > g_Adc_temp0)
 8005512:	4b19      	ldr	r3, [pc, #100]	; (8005578 <Read_DMA_Current_n_Temperature+0x428>)
 8005514:	f9b3 2018 	ldrsh.w	r2, [r3, #24]
 8005518:	4b13      	ldr	r3, [pc, #76]	; (8005568 <Read_DMA_Current_n_Temperature+0x418>)
 800551a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800551e:	429a      	cmp	r2, r3
 8005520:	dd04      	ble.n	800552c <Read_DMA_Current_n_Temperature+0x3dc>
	{
		Bms.MinTemperature[0] = g_Adc_temp0;
 8005522:	4b11      	ldr	r3, [pc, #68]	; (8005568 <Read_DMA_Current_n_Temperature+0x418>)
 8005524:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005528:	4b13      	ldr	r3, [pc, #76]	; (8005578 <Read_DMA_Current_n_Temperature+0x428>)
 800552a:	831a      	strh	r2, [r3, #24]
	}
	if(Bms.MinTemperature[1] > g_Adc_temp1)
 800552c:	4b12      	ldr	r3, [pc, #72]	; (8005578 <Read_DMA_Current_n_Temperature+0x428>)
 800552e:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
 8005532:	4b0c      	ldr	r3, [pc, #48]	; (8005564 <Read_DMA_Current_n_Temperature+0x414>)
 8005534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005538:	429a      	cmp	r2, r3
 800553a:	dd04      	ble.n	8005546 <Read_DMA_Current_n_Temperature+0x3f6>
	{
		Bms.MinTemperature[1] = g_Adc_temp1;
 800553c:	4b09      	ldr	r3, [pc, #36]	; (8005564 <Read_DMA_Current_n_Temperature+0x414>)
 800553e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8005542:	4b0d      	ldr	r3, [pc, #52]	; (8005578 <Read_DMA_Current_n_Temperature+0x428>)
 8005544:	835a      	strh	r2, [r3, #26]
	}
}
 8005546:	bf00      	nop
 8005548:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	66666666 	.word	0x66666666
 8005554:	400a6666 	.word	0x400a6666
 8005558:	00000000 	.word	0x00000000
 800555c:	40affe00 	.word	0x40affe00
 8005560:	cccccccd 	.word	0xcccccccd
 8005564:	20000a0c 	.word	0x20000a0c
 8005568:	2000119a 	.word	0x2000119a
 800556c:	20000c40 	.word	0x20000c40
 8005570:	200011e2 	.word	0x200011e2
 8005574:	40240000 	.word	0x40240000
 8005578:	20000360 	.word	0x20000360
 800557c:	00000000 	.word	0x00000000

08005580 <Calc_PCB_current>:

int16_t Calc_PCB_current(float Adc_bat)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	float Adc_bat_Cur = Adc_bat * 5 / 3.3;
 8005588:	4921      	ldr	r1, [pc, #132]	; (8005610 <Calc_PCB_current+0x90>)
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fb fbbc 	bl	8000d08 <__aeabi_fmul>
 8005590:	4603      	mov	r3, r0
 8005592:	4618      	mov	r0, r3
 8005594:	f7fa ff48 	bl	8000428 <__aeabi_f2d>
 8005598:	a319      	add	r3, pc, #100	; (adr r3, 8005600 <Calc_PCB_current+0x80>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f7fb f8c5 	bl	800072c <__aeabi_ddiv>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4610      	mov	r0, r2
 80055a8:	4619      	mov	r1, r3
 80055aa:	f7fb fa4f 	bl	8000a4c <__aeabi_d2f>
 80055ae:	4603      	mov	r3, r0
 80055b0:	60fb      	str	r3, [r7, #12]

	Adc_bat_Cur = Adc_bat_Cur-2.5;
 80055b2:	4918      	ldr	r1, [pc, #96]	; (8005614 <Calc_PCB_current+0x94>)
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f7fb fa9d 	bl	8000af4 <__aeabi_fsub>
 80055ba:	4603      	mov	r3, r0
 80055bc:	60fb      	str	r3, [r7, #12]
	Adc_bat_Cur = Adc_bat_Cur*1000 / 6.67;	//1A = 6.67mv //Amp 로 변환	//2.5v = 0A 기준	//4.5v = 300A
 80055be:	4916      	ldr	r1, [pc, #88]	; (8005618 <Calc_PCB_current+0x98>)
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7fb fba1 	bl	8000d08 <__aeabi_fmul>
 80055c6:	4603      	mov	r3, r0
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fa ff2d 	bl	8000428 <__aeabi_f2d>
 80055ce:	a30e      	add	r3, pc, #56	; (adr r3, 8005608 <Calc_PCB_current+0x88>)
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f7fb f8aa 	bl	800072c <__aeabi_ddiv>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	4610      	mov	r0, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	f7fb fa34 	bl	8000a4c <__aeabi_d2f>
 80055e4:	4603      	mov	r3, r0
 80055e6:	60fb      	str	r3, [r7, #12]
	return (int16_t)Adc_bat_Cur;
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7fb fcdd 	bl	8000fa8 <__aeabi_f2iz>
 80055ee:	4603      	mov	r3, r0
 80055f0:	b21b      	sxth	r3, r3
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	f3af 8000 	nop.w
 8005600:	66666666 	.word	0x66666666
 8005604:	400a6666 	.word	0x400a6666
 8005608:	7ae147ae 	.word	0x7ae147ae
 800560c:	401aae14 	.word	0x401aae14
 8005610:	40a00000 	.word	0x40a00000
 8005614:	40200000 	.word	0x40200000
 8005618:	447a0000 	.word	0x447a0000

0800561c <Calc_CT_sensor>:
	Adc_bat_Cur += 6;
	return (int16_t)Adc_bat_Cur;
}
#else
int16_t Calc_CT_sensor(double Adc_bat)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	e9c7 0100 	strd	r0, r1, [r7]
	//double Adc_bat_Cur = Adc_bat * 5 / 3.3;
	float Adc_bat_Cur;

	Adc_bat +=CT.fOffset_v;
 8005626:	4b1c      	ldr	r3, [pc, #112]	; (8005698 <Calc_CT_sensor+0x7c>)
 8005628:	695b      	ldr	r3, [r3, #20]
 800562a:	4618      	mov	r0, r3
 800562c:	f7fa fefc 	bl	8000428 <__aeabi_f2d>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005638:	f7fa fd98 	bl	800016c <__adddf3>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	e9c7 2300 	strd	r2, r3, [r7]
	Adc_bat_Cur = Adc_bat - CT.fVmax_half;	// - base voltge
 8005644:	4b14      	ldr	r3, [pc, #80]	; (8005698 <Calc_CT_sensor+0x7c>)
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	4618      	mov	r0, r3
 800564a:	f7fa feed 	bl	8000428 <__aeabi_f2d>
 800564e:	4602      	mov	r2, r0
 8005650:	460b      	mov	r3, r1
 8005652:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005656:	f7fa fd87 	bl	8000168 <__aeabi_dsub>
 800565a:	4602      	mov	r2, r0
 800565c:	460b      	mov	r3, r1
 800565e:	4610      	mov	r0, r2
 8005660:	4619      	mov	r1, r3
 8005662:	f7fb f9f3 	bl	8000a4c <__aeabi_d2f>
 8005666:	4603      	mov	r3, r0
 8005668:	60fb      	str	r3, [r7, #12]
	//Adc_bat_Cur = Adc_bat_Cur*1000 / CT.fStep_1A;
	Adc_bat_Cur = Adc_bat_Cur*1000 / CT.fStep_01A;
 800566a:	490c      	ldr	r1, [pc, #48]	; (800569c <Calc_CT_sensor+0x80>)
 800566c:	68f8      	ldr	r0, [r7, #12]
 800566e:	f7fb fb4b 	bl	8000d08 <__aeabi_fmul>
 8005672:	4603      	mov	r3, r0
 8005674:	461a      	mov	r2, r3
 8005676:	4b08      	ldr	r3, [pc, #32]	; (8005698 <Calc_CT_sensor+0x7c>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f7fb fbf7 	bl	8000e70 <__aeabi_fdiv>
 8005682:	4603      	mov	r3, r0
 8005684:	60fb      	str	r3, [r7, #12]

	return (int16_t)Adc_bat_Cur;
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f7fb fc8e 	bl	8000fa8 <__aeabi_f2iz>
 800568c:	4603      	mov	r3, r0
 800568e:	b21b      	sxth	r3, r3
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}
 8005698:	20000f70 	.word	0x20000f70
 800569c:	447a0000 	.word	0x447a0000

080056a0 <Adc_to_temperature>:
#endif

int16_t Adc_to_temperature(double adc_v)
{
 80056a0:	b5b0      	push	{r4, r5, r7, lr}
 80056a2:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	f107 0308 	add.w	r3, r7, #8
 80056ac:	e943 0102 	strd	r0, r1, [r3, #-8]
	int i = 0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
	double Rth_KOhm = 0;
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 80056c2:	e9c1 2300 	strd	r2, r3, [r1]
	int16_t pullup_resistor = 10;	//10k
 80056c6:	230a      	movs	r3, #10
 80056c8:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656

//Rth_table -50 ~ 150도
	double Rth_table[201] ={			670.1,	630.42,	590.74,	551.06,	511.38,	471.7,
 80056cc:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 80056d0:	f5a3 63cc 	sub.w	r3, r3, #1632	; 0x660
 80056d4:	4a2e      	ldr	r2, [pc, #184]	; (8005790 <Adc_to_temperature+0xf0>)
 80056d6:	4618      	mov	r0, r3
 80056d8:	4611      	mov	r1, r2
 80056da:	f44f 63c9 	mov.w	r3, #1608	; 0x648
 80056de:	461a      	mov	r2, r3
 80056e0:	f006 ff16 	bl	800c510 <memcpy>
	0.3335,	0.3253,	0.3172,	0.3090,	0.3009,	0.2938,	0.2867,	0.2796,	0.2725,	0.2654,
	0.2592,	0.2531,	0.2470,	0.2409,	0.2348,	0.2295,	0.2242,	0.2189,	0.2136,	0.2083,
	0.2037,	0.1991,	0.1945,	0.1899,	0.1853	};

	//Rth_KOhm = (double)(adc_temp * pullup_resistor) /(4096 - adc_temp);
	Rth_KOhm = (double)(adc_v * pullup_resistor) /(3.3 - adc_v);
 80056e4:	f9b7 3656 	ldrsh.w	r3, [r7, #1622]	; 0x656
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fa fe8b 	bl	8000404 <__aeabi_i2d>
 80056ee:	f107 0308 	add.w	r3, r7, #8
 80056f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80056f6:	f7fa feef 	bl	80004d8 <__aeabi_dmul>
 80056fa:	4602      	mov	r2, r0
 80056fc:	460b      	mov	r3, r1
 80056fe:	4614      	mov	r4, r2
 8005700:	461d      	mov	r5, r3
 8005702:	f107 0308 	add.w	r3, r7, #8
 8005706:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800570a:	a11f      	add	r1, pc, #124	; (adr r1, 8005788 <Adc_to_temperature+0xe8>)
 800570c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005710:	f7fa fd2a 	bl	8000168 <__aeabi_dsub>
 8005714:	4602      	mov	r2, r0
 8005716:	460b      	mov	r3, r1
 8005718:	4620      	mov	r0, r4
 800571a:	4629      	mov	r1, r5
 800571c:	f7fb f806 	bl	800072c <__aeabi_ddiv>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8005728:	e9c1 2300 	strd	r2, r3, [r1]

	for( i = 0 ;i < 201 ;i++)
 800572c:	2300      	movs	r3, #0
 800572e:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8005732:	e017      	b.n	8005764 <Adc_to_temperature+0xc4>
	{
		if(Rth_KOhm >= Rth_table[i])	break;
 8005734:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 8005738:	f5a3 62cc 	sub.w	r2, r3, #1632	; 0x660
 800573c:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	4413      	add	r3, r2
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 800574c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005750:	f7fb f948 	bl	80009e4 <__aeabi_dcmpge>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <Adc_to_temperature+0xce>
	for( i = 0 ;i < 201 ;i++)
 800575a:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 800575e:	3301      	adds	r3, #1
 8005760:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8005764:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8005768:	2bc8      	cmp	r3, #200	; 0xc8
 800576a:	dde3      	ble.n	8005734 <Adc_to_temperature+0x94>
 800576c:	e000      	b.n	8005770 <Adc_to_temperature+0xd0>
		if(Rth_KOhm >= Rth_table[i])	break;
 800576e:	bf00      	nop
	}
	return i-50;
 8005770:	f8d7 3664 	ldr.w	r3, [r7, #1636]	; 0x664
 8005774:	b29b      	uxth	r3, r3
 8005776:	3b32      	subs	r3, #50	; 0x32
 8005778:	b29b      	uxth	r3, r3
 800577a:	b21b      	sxth	r3, r3
}
 800577c:	4618      	mov	r0, r3
 800577e:	f507 67cd 	add.w	r7, r7, #1640	; 0x668
 8005782:	46bd      	mov	sp, r7
 8005784:	bdb0      	pop	{r4, r5, r7, pc}
 8005786:	bf00      	nop
 8005788:	66666666 	.word	0x66666666
 800578c:	400a6666 	.word	0x400a6666
 8005790:	0800d5c8 	.word	0x0800d5c8

08005794 <quickSort>:

void quickSort(uint16_t arr[], uint16_t left, uint16_t right) {
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	807b      	strh	r3, [r7, #2]
 80057a0:	4613      	mov	r3, r2
 80057a2:	803b      	strh	r3, [r7, #0]
	int i = left, j = right;
 80057a4:	887b      	ldrh	r3, [r7, #2]
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	883b      	ldrh	r3, [r7, #0]
 80057aa:	613b      	str	r3, [r7, #16]
	int pivot = arr[(left + right) / 2];
 80057ac:	887a      	ldrh	r2, [r7, #2]
 80057ae:	883b      	ldrh	r3, [r7, #0]
 80057b0:	4413      	add	r3, r2
 80057b2:	0fda      	lsrs	r2, r3, #31
 80057b4:	4413      	add	r3, r2
 80057b6:	105b      	asrs	r3, r3, #1
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	4413      	add	r3, r2
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	60fb      	str	r3, [r7, #12]
	int temp;

	while (i <= j)
 80057c2:	e039      	b.n	8005838 <quickSort+0xa4>
	{
		while (arr[i] < pivot)	i++; // arr[i] ≥ pivot 일 때까지, left에서 오른쪽 방향으로 탐색
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	3301      	adds	r3, #1
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	4413      	add	r3, r2
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4293      	cmp	r3, r2
 80057da:	dcf3      	bgt.n	80057c4 <quickSort+0x30>
		while (arr[j] > pivot)	j--; // arr[j] ≤ pivot 일 때까지, right에서 왼쪽 방향으로 탐색
 80057dc:	e002      	b.n	80057e4 <quickSort+0x50>
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	3b01      	subs	r3, #1
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	4413      	add	r3, r2
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4293      	cmp	r3, r2
 80057f4:	dbf3      	blt.n	80057de <quickSort+0x4a>

		if (i <= j) // 큰 값이 작은 값보다 왼쪽에 있으면
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	dc1c      	bgt.n	8005838 <quickSort+0xa4>
		{
			// SWAP(arr[i], arr[j])
			temp = arr[i];
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	4413      	add	r3, r2
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	60bb      	str	r3, [r7, #8]
			arr[i] = arr[j];
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	005b      	lsls	r3, r3, #1
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	441a      	add	r2, r3
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	440b      	add	r3, r1
 800581a:	8812      	ldrh	r2, [r2, #0]
 800581c:	801a      	strh	r2, [r3, #0]
			arr[j] = temp;
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	4413      	add	r3, r2
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	b292      	uxth	r2, r2
 800582a:	801a      	strh	r2, [r3, #0]

			i++;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	3301      	adds	r3, #1
 8005830:	617b      	str	r3, [r7, #20]
			j--;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	3b01      	subs	r3, #1
 8005836:	613b      	str	r3, [r7, #16]
	while (i <= j)
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	429a      	cmp	r2, r3
 800583e:	ddc4      	ble.n	80057ca <quickSort+0x36>
		}
	}

	if (left < j)	quickSort(arr, left, j);
 8005840:	887b      	ldrh	r3, [r7, #2]
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	429a      	cmp	r2, r3
 8005846:	dd06      	ble.n	8005856 <quickSort+0xc2>
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	b29a      	uxth	r2, r3
 800584c:	887b      	ldrh	r3, [r7, #2]
 800584e:	4619      	mov	r1, r3
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f7ff ff9f 	bl	8005794 <quickSort>
	if (i < right)	quickSort(arr, i, right);
 8005856:	883b      	ldrh	r3, [r7, #0]
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	429a      	cmp	r2, r3
 800585c:	da06      	bge.n	800586c <quickSort+0xd8>
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	b29b      	uxth	r3, r3
 8005862:	883a      	ldrh	r2, [r7, #0]
 8005864:	4619      	mov	r1, r3
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7ff ff94 	bl	8005794 <quickSort>
}
 800586c:	bf00      	nop
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <Setup_default>:
#define EEPROM_ADDR 0xA0

uint8_t boot_time_sec, boot_time_min, boot_time_hour;

void Setup_default()
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
	tickCnt_100ms = 0;
 8005878:	4b1e      	ldr	r3, [pc, #120]	; (80058f4 <Setup_default+0x80>)
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
	tickCnt_1s = 0;
 800587e:	4b1e      	ldr	r3, [pc, #120]	; (80058f8 <Setup_default+0x84>)
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]
	g_bFlag_1Sec = 0;
 8005884:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <Setup_default+0x88>)
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
	g_bFlag_5Sec = 0;
 800588a:	4b1d      	ldr	r3, [pc, #116]	; (8005900 <Setup_default+0x8c>)
 800588c:	2200      	movs	r2, #0
 800588e:	701a      	strb	r2, [r3, #0]

	// PWM Init
	TIM3->CCR1 =TIM3->CCR2 = TIM3->CCR3 = TIM3->CCR4 = 0;
 8005890:	4a1c      	ldr	r2, [pc, #112]	; (8005904 <Setup_default+0x90>)
 8005892:	2300      	movs	r3, #0
 8005894:	6413      	str	r3, [r2, #64]	; 0x40
 8005896:	4a1b      	ldr	r2, [pc, #108]	; (8005904 <Setup_default+0x90>)
 8005898:	63d3      	str	r3, [r2, #60]	; 0x3c
 800589a:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <Setup_default+0x90>)
 800589c:	6393      	str	r3, [r2, #56]	; 0x38
 800589e:	4a19      	ldr	r2, [pc, #100]	; (8005904 <Setup_default+0x90>)
 80058a0:	6353      	str	r3, [r2, #52]	; 0x34

	// Min/Max Temp Init
	Bms.MaxTemperature[0] = 0;
 80058a2:	4b19      	ldr	r3, [pc, #100]	; (8005908 <Setup_default+0x94>)
 80058a4:	2200      	movs	r2, #0
 80058a6:	829a      	strh	r2, [r3, #20]
	Bms.MaxTemperature[1] = 0;
 80058a8:	4b17      	ldr	r3, [pc, #92]	; (8005908 <Setup_default+0x94>)
 80058aa:	2200      	movs	r2, #0
 80058ac:	82da      	strh	r2, [r3, #22]
	Bms.MinTemperature[0] = 0x7FFF;
 80058ae:	4b16      	ldr	r3, [pc, #88]	; (8005908 <Setup_default+0x94>)
 80058b0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80058b4:	831a      	strh	r2, [r3, #24]
	Bms.MinTemperature[1] = 0x7FFF;
 80058b6:	4b14      	ldr	r3, [pc, #80]	; (8005908 <Setup_default+0x94>)
 80058b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80058bc:	835a      	strh	r2, [r3, #26]

	memset(&Err,0x00,sizeof(struct Error));
 80058be:	220b      	movs	r2, #11
 80058c0:	2100      	movs	r1, #0
 80058c2:	4812      	ldr	r0, [pc, #72]	; (800590c <Setup_default+0x98>)
 80058c4:	f006 fdaa 	bl	800c41c <memset>

	// Fan On
	TIM3->CCR4 = 100;
 80058c8:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <Setup_default+0x90>)
 80058ca:	2264      	movs	r2, #100	; 0x64
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80058ce:	210c      	movs	r1, #12
 80058d0:	480f      	ldr	r0, [pc, #60]	; (8005910 <Setup_default+0x9c>)
 80058d2:	f004 fe3d 	bl	800a550 <HAL_TIM_PWM_Start>

	// Relays On
	PWM_Toggle_Relay(PWM_MOTOR, ON);
 80058d6:	2101      	movs	r1, #1
 80058d8:	2000      	movs	r0, #0
 80058da:	f000 f8f1 	bl	8005ac0 <PWM_Toggle_Relay>
	PWM_Toggle_Relay(PWM_EX_CHARGE, ON);
 80058de:	2101      	movs	r1, #1
 80058e0:	2004      	movs	r0, #4
 80058e2:	f000 f8ed 	bl	8005ac0 <PWM_Toggle_Relay>
	PWM_Toggle_Relay(PWM_SMPS_CHARGE, ON);
 80058e6:	2101      	movs	r1, #1
 80058e8:	2008      	movs	r0, #8
 80058ea:	f000 f8e9 	bl	8005ac0 <PWM_Toggle_Relay>
}
 80058ee:	bf00      	nop
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	2000141c 	.word	0x2000141c
 80058f8:	20001424 	.word	0x20001424
 80058fc:	20001420 	.word	0x20001420
 8005900:	20001418 	.word	0x20001418
 8005904:	40000400 	.word	0x40000400
 8005908:	20000360 	.word	0x20000360
 800590c:	20000d48 	.word	0x20000d48
 8005910:	20001428 	.word	0x20001428

08005914 <Get_Switch_info>:

void Get_Switch_info()
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
	//read
	uint8_t state;

	Sw_info.g_uOption_id = 0;
 800591a:	4b29      	ldr	r3, [pc, #164]	; (80059c0 <Get_Switch_info+0xac>)
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
	Sw_info.g_uCom_sel = 0;
 8005920:	4b27      	ldr	r3, [pc, #156]	; (80059c0 <Get_Switch_info+0xac>)
 8005922:	2200      	movs	r2, #0
 8005924:	705a      	strb	r2, [r3, #1]

	state = HAL_GPIO_ReadPin( CAN_ID8_GPIO_Port,CAN_ID8_Pin );
 8005926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800592a:	4826      	ldr	r0, [pc, #152]	; (80059c4 <Get_Switch_info+0xb0>)
 800592c:	f003 f8ca 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8005930:	4603      	mov	r3, r0
 8005932:	71fb      	strb	r3, [r7, #7]
	state = state<<1;
 8005934:	79fb      	ldrb	r3, [r7, #7]
 8005936:	005b      	lsls	r3, r3, #1
 8005938:	71fb      	strb	r3, [r7, #7]
	state += HAL_GPIO_ReadPin( CAN_ID4_GPIO_Port,CAN_ID4_Pin );
 800593a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800593e:	4821      	ldr	r0, [pc, #132]	; (80059c4 <Get_Switch_info+0xb0>)
 8005940:	f003 f8c0 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	79fb      	ldrb	r3, [r7, #7]
 800594a:	4413      	add	r3, r2
 800594c:	71fb      	strb	r3, [r7, #7]
	state = state<<1;
 800594e:	79fb      	ldrb	r3, [r7, #7]
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	71fb      	strb	r3, [r7, #7]
	state += HAL_GPIO_ReadPin( CAN_ID2_GPIO_Port,CAN_ID2_Pin );
 8005954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005958:	481a      	ldr	r0, [pc, #104]	; (80059c4 <Get_Switch_info+0xb0>)
 800595a:	f003 f8b3 	bl	8008ac4 <HAL_GPIO_ReadPin>
 800595e:	4603      	mov	r3, r0
 8005960:	461a      	mov	r2, r3
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	4413      	add	r3, r2
 8005966:	71fb      	strb	r3, [r7, #7]
	state = state<<1;
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	71fb      	strb	r3, [r7, #7]
	state += HAL_GPIO_ReadPin( CAN_ID1_GPIO_Port,CAN_ID1_Pin );
 800596e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005972:	4814      	ldr	r0, [pc, #80]	; (80059c4 <Get_Switch_info+0xb0>)
 8005974:	f003 f8a6 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8005978:	4603      	mov	r3, r0
 800597a:	461a      	mov	r2, r3
 800597c:	79fb      	ldrb	r3, [r7, #7]
 800597e:	4413      	add	r3, r2
 8005980:	71fb      	strb	r3, [r7, #7]

	Sw_info.g_uOption_id = state;
 8005982:	4a0f      	ldr	r2, [pc, #60]	; (80059c0 <Get_Switch_info+0xac>)
 8005984:	79fb      	ldrb	r3, [r7, #7]
 8005986:	7013      	strb	r3, [r2, #0]


	state = HAL_GPIO_ReadPin( COM_SEL1_GPIO_Port,COM_SEL1_Pin );
 8005988:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800598c:	480e      	ldr	r0, [pc, #56]	; (80059c8 <Get_Switch_info+0xb4>)
 800598e:	f003 f899 	bl	8008ac4 <HAL_GPIO_ReadPin>
 8005992:	4603      	mov	r3, r0
 8005994:	71fb      	strb	r3, [r7, #7]
	state = state<<1;
 8005996:	79fb      	ldrb	r3, [r7, #7]
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	71fb      	strb	r3, [r7, #7]
	state += HAL_GPIO_ReadPin( COM_SEL0_GPIO_Port,COM_SEL0_Pin );
 800599c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059a0:	4809      	ldr	r0, [pc, #36]	; (80059c8 <Get_Switch_info+0xb4>)
 80059a2:	f003 f88f 	bl	8008ac4 <HAL_GPIO_ReadPin>
 80059a6:	4603      	mov	r3, r0
 80059a8:	461a      	mov	r2, r3
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	4413      	add	r3, r2
 80059ae:	71fb      	strb	r3, [r7, #7]

	Sw_info.g_uCom_sel = state;
 80059b0:	4a03      	ldr	r2, [pc, #12]	; (80059c0 <Get_Switch_info+0xac>)
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	7053      	strb	r3, [r2, #1]
}
 80059b6:	bf00      	nop
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000e78 	.word	0x20000e78
 80059c4:	40010c00 	.word	0x40010c00
 80059c8:	40010800 	.word	0x40010800

080059cc <Charge_voltage_open>:

void Charge_voltage_open(uint8_t state)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	4603      	mov	r3, r0
 80059d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CHARGE_PWR_EN_GPIO_Port, CHARGE_PWR_EN_Pin, state);
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	461a      	mov	r2, r3
 80059da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059de:	4803      	ldr	r0, [pc, #12]	; (80059ec <Charge_voltage_open+0x20>)
 80059e0:	f003 f887 	bl	8008af2 <HAL_GPIO_WritePin>
}
 80059e4:	bf00      	nop
 80059e6:	3708      	adds	r7, #8
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	40011000 	.word	0x40011000

080059f0 <Discharge_voltage_open>:

void Discharge_voltage_open(uint8_t state)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CHARGE_PWR_EN_GPIO_Port, CHARGE_PWR_EN_Pin, state);
 80059fa:	79fb      	ldrb	r3, [r7, #7]
 80059fc:	461a      	mov	r2, r3
 80059fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a02:	4803      	ldr	r0, [pc, #12]	; (8005a10 <Discharge_voltage_open+0x20>)
 8005a04:	f003 f875 	bl	8008af2 <HAL_GPIO_WritePin>
}
 8005a08:	bf00      	nop
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40011000 	.word	0x40011000

08005a14 <Start_Relay_pwm>:
		//Send Message over Temperature Error
	}
}

void Start_Relay_pwm(uint8_t pwm_state)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	71fb      	strb	r3, [r7, #7]
	//TIM_CHANNEL_1 smps charge open
	//TIM_CHANNEL_2 Ex chag charge open
	//TIM_CHANNEL_3 Motor Relay
	if(pwm_state == 1)	// on
 8005a1e:	79fb      	ldrb	r3, [r7, #7]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d12e      	bne.n	8005a82 <Start_Relay_pwm+0x6e>
	{
		//first precharge open	//after 100ms -> open Motor Relay
		HAL_GPIO_WritePin(PRE_CHARGE_RELAY_EN_GPIO_Port, PRE_CHARGE_RELAY_EN_Pin, GPIO_PIN_SET);
 8005a24:	2201      	movs	r2, #1
 8005a26:	2102      	movs	r1, #2
 8005a28:	4822      	ldr	r0, [pc, #136]	; (8005ab4 <Start_Relay_pwm+0xa0>)
 8005a2a:	f003 f862 	bl	8008af2 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8005a2e:	2064      	movs	r0, #100	; 0x64
 8005a30:	f000 ffbc 	bl	80069ac <HAL_Delay>
		TIM3->CCR1 =  100;	//smps charge open
 8005a34:	4b20      	ldr	r3, [pc, #128]	; (8005ab8 <Start_Relay_pwm+0xa4>)
 8005a36:	2264      	movs	r2, #100	; 0x64
 8005a38:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 =  100;	//Ex chag charge open
 8005a3a:	4b1f      	ldr	r3, [pc, #124]	; (8005ab8 <Start_Relay_pwm+0xa4>)
 8005a3c:	2264      	movs	r2, #100	; 0x64
 8005a3e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 =  100;	//Motor Relay
 8005a40:	4b1d      	ldr	r3, [pc, #116]	; (8005ab8 <Start_Relay_pwm+0xa4>)
 8005a42:	2264      	movs	r2, #100	; 0x64
 8005a44:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005a46:	2100      	movs	r1, #0
 8005a48:	481c      	ldr	r0, [pc, #112]	; (8005abc <Start_Relay_pwm+0xa8>)
 8005a4a:	f004 fd81 	bl	800a550 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005a4e:	2104      	movs	r1, #4
 8005a50:	481a      	ldr	r0, [pc, #104]	; (8005abc <Start_Relay_pwm+0xa8>)
 8005a52:	f004 fd7d 	bl	800a550 <HAL_TIM_PWM_Start>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8005a56:	2108      	movs	r1, #8
 8005a58:	4818      	ldr	r0, [pc, #96]	; (8005abc <Start_Relay_pwm+0xa8>)
 8005a5a:	f004 fd79 	bl	800a550 <HAL_TIM_PWM_Start>
		HAL_Delay(100);
 8005a5e:	2064      	movs	r0, #100	; 0x64
 8005a60:	f000 ffa4 	bl	80069ac <HAL_Delay>
		TIM3->CCR1 =  35;
 8005a64:	4b14      	ldr	r3, [pc, #80]	; (8005ab8 <Start_Relay_pwm+0xa4>)
 8005a66:	2223      	movs	r2, #35	; 0x23
 8005a68:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 =  35;
 8005a6a:	4b13      	ldr	r3, [pc, #76]	; (8005ab8 <Start_Relay_pwm+0xa4>)
 8005a6c:	2223      	movs	r2, #35	; 0x23
 8005a6e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR3 =  35;
 8005a70:	4b11      	ldr	r3, [pc, #68]	; (8005ab8 <Start_Relay_pwm+0xa4>)
 8005a72:	2223      	movs	r2, #35	; 0x23
 8005a74:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(PRE_CHARGE_RELAY_EN_GPIO_Port, PRE_CHARGE_RELAY_EN_Pin, GPIO_PIN_RESET);
 8005a76:	2200      	movs	r2, #0
 8005a78:	2102      	movs	r1, #2
 8005a7a:	480e      	ldr	r0, [pc, #56]	; (8005ab4 <Start_Relay_pwm+0xa0>)
 8005a7c:	f003 f839 	bl	8008af2 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
		HAL_GPIO_WritePin(PRE_CHARGE_RELAY_EN_GPIO_Port, PRE_CHARGE_RELAY_EN_Pin, GPIO_PIN_RESET);
	}
}
 8005a80:	e013      	b.n	8005aaa <Start_Relay_pwm+0x96>
	else if(pwm_state == 0)	//off
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d110      	bne.n	8005aaa <Start_Relay_pwm+0x96>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8005a88:	2100      	movs	r1, #0
 8005a8a:	480c      	ldr	r0, [pc, #48]	; (8005abc <Start_Relay_pwm+0xa8>)
 8005a8c:	f004 fe02 	bl	800a694 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8005a90:	2104      	movs	r1, #4
 8005a92:	480a      	ldr	r0, [pc, #40]	; (8005abc <Start_Relay_pwm+0xa8>)
 8005a94:	f004 fdfe 	bl	800a694 <HAL_TIM_PWM_Stop>
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 8005a98:	2108      	movs	r1, #8
 8005a9a:	4808      	ldr	r0, [pc, #32]	; (8005abc <Start_Relay_pwm+0xa8>)
 8005a9c:	f004 fdfa 	bl	800a694 <HAL_TIM_PWM_Stop>
		HAL_GPIO_WritePin(PRE_CHARGE_RELAY_EN_GPIO_Port, PRE_CHARGE_RELAY_EN_Pin, GPIO_PIN_RESET);
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2102      	movs	r1, #2
 8005aa4:	4803      	ldr	r0, [pc, #12]	; (8005ab4 <Start_Relay_pwm+0xa0>)
 8005aa6:	f003 f824 	bl	8008af2 <HAL_GPIO_WritePin>
}
 8005aaa:	bf00      	nop
 8005aac:	3708      	adds	r7, #8
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	40010c00 	.word	0x40010c00
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	20001428 	.word	0x20001428

08005ac0 <PWM_Toggle_Relay>:

void PWM_Toggle_Relay(uint8_t nRelay, uint8_t state)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	460a      	mov	r2, r1
 8005aca:	71fb      	strb	r3, [r7, #7]
 8005acc:	4613      	mov	r3, r2
 8005ace:	71bb      	strb	r3, [r7, #6]
	if(state)
 8005ad0:	79bb      	ldrb	r3, [r7, #6]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d040      	beq.n	8005b58 <PWM_Toggle_Relay+0x98>
	{
		switch (nRelay)
 8005ad6:	79fb      	ldrb	r3, [r7, #7]
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d006      	beq.n	8005aea <PWM_Toggle_Relay+0x2a>
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	dc18      	bgt.n	8005b12 <PWM_Toggle_Relay+0x52>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <PWM_Toggle_Relay+0x3a>
 8005ae4:	2b04      	cmp	r3, #4
 8005ae6:	d004      	beq.n	8005af2 <PWM_Toggle_Relay+0x32>
 8005ae8:	e013      	b.n	8005b12 <PWM_Toggle_Relay+0x52>
		{
		case PWM_SMPS_CHARGE:
			TIM3->CCR3 =  100;	//smps charge open
 8005aea:	4b20      	ldr	r3, [pc, #128]	; (8005b6c <PWM_Toggle_Relay+0xac>)
 8005aec:	2264      	movs	r2, #100	; 0x64
 8005aee:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8005af0:	e00f      	b.n	8005b12 <PWM_Toggle_Relay+0x52>
		case PWM_EX_CHARGE:
			TIM3->CCR2 =  100;	//Ex charge open
 8005af2:	4b1e      	ldr	r3, [pc, #120]	; (8005b6c <PWM_Toggle_Relay+0xac>)
 8005af4:	2264      	movs	r2, #100	; 0x64
 8005af6:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8005af8:	e00b      	b.n	8005b12 <PWM_Toggle_Relay+0x52>
		case PWM_MOTOR:
			// pre-charge 100ms
			HAL_GPIO_WritePin(PRE_CHARGE_RELAY_EN_GPIO_Port, PRE_CHARGE_RELAY_EN_Pin, GPIO_PIN_SET);
 8005afa:	2201      	movs	r2, #1
 8005afc:	2102      	movs	r1, #2
 8005afe:	481c      	ldr	r0, [pc, #112]	; (8005b70 <PWM_Toggle_Relay+0xb0>)
 8005b00:	f002 fff7 	bl	8008af2 <HAL_GPIO_WritePin>
			HAL_Delay(100);
 8005b04:	2064      	movs	r0, #100	; 0x64
 8005b06:	f000 ff51 	bl	80069ac <HAL_Delay>
			TIM3->CCR1 =  100;	//Motor Relay
 8005b0a:	4b18      	ldr	r3, [pc, #96]	; (8005b6c <PWM_Toggle_Relay+0xac>)
 8005b0c:	2264      	movs	r2, #100	; 0x64
 8005b0e:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8005b10:	bf00      	nop
		}
		HAL_TIM_PWM_Start(&htim3, nRelay);
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	4619      	mov	r1, r3
 8005b16:	4817      	ldr	r0, [pc, #92]	; (8005b74 <PWM_Toggle_Relay+0xb4>)
 8005b18:	f004 fd1a 	bl	800a550 <HAL_TIM_PWM_Start>
		HAL_Delay(100);
 8005b1c:	2064      	movs	r0, #100	; 0x64
 8005b1e:	f000 ff45 	bl	80069ac <HAL_Delay>
		switch (nRelay)
 8005b22:	79fb      	ldrb	r3, [r7, #7]
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d006      	beq.n	8005b36 <PWM_Toggle_Relay+0x76>
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	dc1b      	bgt.n	8005b64 <PWM_Toggle_Relay+0xa4>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <PWM_Toggle_Relay+0x86>
 8005b30:	2b04      	cmp	r3, #4
 8005b32:	d004      	beq.n	8005b3e <PWM_Toggle_Relay+0x7e>
	}
	else
	{
		HAL_TIM_PWM_Stop(&htim3, nRelay);
	}
}
 8005b34:	e016      	b.n	8005b64 <PWM_Toggle_Relay+0xa4>
			TIM3->CCR3 =  35;	//smps charge open
 8005b36:	4b0d      	ldr	r3, [pc, #52]	; (8005b6c <PWM_Toggle_Relay+0xac>)
 8005b38:	2223      	movs	r2, #35	; 0x23
 8005b3a:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8005b3c:	e012      	b.n	8005b64 <PWM_Toggle_Relay+0xa4>
			TIM3->CCR2 =  35;	//Ex charge open
 8005b3e:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <PWM_Toggle_Relay+0xac>)
 8005b40:	2223      	movs	r2, #35	; 0x23
 8005b42:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8005b44:	e00e      	b.n	8005b64 <PWM_Toggle_Relay+0xa4>
			HAL_GPIO_WritePin(PRE_CHARGE_RELAY_EN_GPIO_Port, PRE_CHARGE_RELAY_EN_Pin, GPIO_PIN_RESET);
 8005b46:	2200      	movs	r2, #0
 8005b48:	2102      	movs	r1, #2
 8005b4a:	4809      	ldr	r0, [pc, #36]	; (8005b70 <PWM_Toggle_Relay+0xb0>)
 8005b4c:	f002 ffd1 	bl	8008af2 <HAL_GPIO_WritePin>
			TIM3->CCR1 =  35;	//Motor Relay
 8005b50:	4b06      	ldr	r3, [pc, #24]	; (8005b6c <PWM_Toggle_Relay+0xac>)
 8005b52:	2223      	movs	r2, #35	; 0x23
 8005b54:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8005b56:	e005      	b.n	8005b64 <PWM_Toggle_Relay+0xa4>
		HAL_TIM_PWM_Stop(&htim3, nRelay);
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	4805      	ldr	r0, [pc, #20]	; (8005b74 <PWM_Toggle_Relay+0xb4>)
 8005b5e:	f004 fd99 	bl	800a694 <HAL_TIM_PWM_Stop>
}
 8005b62:	e7ff      	b.n	8005b64 <PWM_Toggle_Relay+0xa4>
 8005b64:	bf00      	nop
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	40000400 	.word	0x40000400
 8005b70:	40010c00 	.word	0x40010c00
 8005b74:	20001428 	.word	0x20001428

08005b78 <Check_bms_error>:
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
	}
}

void Check_bms_error(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
	if (g_Adc_ct_Amp > OVER_CURRENT)	//over 60A discharg
 8005b7c:	4b2b      	ldr	r3, [pc, #172]	; (8005c2c <Check_bms_error+0xb4>)
 8005b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b82:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005b86:	dd10      	ble.n	8005baa <Check_bms_error+0x32>
	{
		Err.g_uOver_Current_cnt++;
 8005b88:	4b29      	ldr	r3, [pc, #164]	; (8005c30 <Check_bms_error+0xb8>)
 8005b8a:	795b      	ldrb	r3, [r3, #5]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	4b27      	ldr	r3, [pc, #156]	; (8005c30 <Check_bms_error+0xb8>)
 8005b92:	715a      	strb	r2, [r3, #5]
		if(Err.g_uOver_Current_cnt > ERROR_TIME)
 8005b94:	4b26      	ldr	r3, [pc, #152]	; (8005c30 <Check_bms_error+0xb8>)
 8005b96:	795b      	ldrb	r3, [r3, #5]
 8005b98:	2b06      	cmp	r3, #6
 8005b9a:	d909      	bls.n	8005bb0 <Check_bms_error+0x38>
		{
			Err.g_uOver_Current_flag = 1;
 8005b9c:	4b24      	ldr	r3, [pc, #144]	; (8005c30 <Check_bms_error+0xb8>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	721a      	strb	r2, [r3, #8]
			Err.g_uOver_Current_cnt =0;
 8005ba2:	4b23      	ldr	r3, [pc, #140]	; (8005c30 <Check_bms_error+0xb8>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	715a      	strb	r2, [r3, #5]
 8005ba8:	e002      	b.n	8005bb0 <Check_bms_error+0x38>
		}
	}
	else	Err.g_uOver_Current_cnt = 0;
 8005baa:	4b21      	ldr	r3, [pc, #132]	; (8005c30 <Check_bms_error+0xb8>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	715a      	strb	r2, [r3, #5]

	if (g_Adc_ct_Amp < OVER_CHARGE)	//over 60A charge
 8005bb0:	4b1e      	ldr	r3, [pc, #120]	; (8005c2c <Check_bms_error+0xb4>)
 8005bb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bb6:	f513 7f16 	cmn.w	r3, #600	; 0x258
 8005bba:	da10      	bge.n	8005bde <Check_bms_error+0x66>
	{
		Err.g_uOver_Charge_cnt++;
 8005bbc:	4b1c      	ldr	r3, [pc, #112]	; (8005c30 <Check_bms_error+0xb8>)
 8005bbe:	799b      	ldrb	r3, [r3, #6]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <Check_bms_error+0xb8>)
 8005bc6:	719a      	strb	r2, [r3, #6]
		if(Err.g_uOver_Charge_cnt > ERROR_TIME)
 8005bc8:	4b19      	ldr	r3, [pc, #100]	; (8005c30 <Check_bms_error+0xb8>)
 8005bca:	799b      	ldrb	r3, [r3, #6]
 8005bcc:	2b06      	cmp	r3, #6
 8005bce:	d909      	bls.n	8005be4 <Check_bms_error+0x6c>
		{
			Err.g_uOver_Charge_flag = 1;
 8005bd0:	4b17      	ldr	r3, [pc, #92]	; (8005c30 <Check_bms_error+0xb8>)
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	725a      	strb	r2, [r3, #9]
			Err.g_uOver_Charge_cnt = 0;
 8005bd6:	4b16      	ldr	r3, [pc, #88]	; (8005c30 <Check_bms_error+0xb8>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	719a      	strb	r2, [r3, #6]
 8005bdc:	e002      	b.n	8005be4 <Check_bms_error+0x6c>
		}
	}
	else	Err.g_uOver_Charge_cnt = 0;
 8005bde:	4b14      	ldr	r3, [pc, #80]	; (8005c30 <Check_bms_error+0xb8>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	719a      	strb	r2, [r3, #6]

	if ((g_Adc_temp1 <= OVER_TEMP_50 ) || (g_Adc_temp0 <= OVER_TEMP_50 ))	//Temperature 50 over
 8005be4:	4b13      	ldr	r3, [pc, #76]	; (8005c34 <Check_bms_error+0xbc>)
 8005be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bea:	2b32      	cmp	r3, #50	; 0x32
 8005bec:	dd04      	ble.n	8005bf8 <Check_bms_error+0x80>
 8005bee:	4b12      	ldr	r3, [pc, #72]	; (8005c38 <Check_bms_error+0xc0>)
 8005bf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bf4:	2b32      	cmp	r3, #50	; 0x32
 8005bf6:	dc10      	bgt.n	8005c1a <Check_bms_error+0xa2>
	{
		Err.g_uOver_Temp_cnt++;
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <Check_bms_error+0xb8>)
 8005bfa:	79db      	ldrb	r3, [r3, #7]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <Check_bms_error+0xb8>)
 8005c02:	71da      	strb	r2, [r3, #7]
		if(Err.g_uOver_Temp_cnt > ERROR_TIME)
 8005c04:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <Check_bms_error+0xb8>)
 8005c06:	79db      	ldrb	r3, [r3, #7]
 8005c08:	2b06      	cmp	r3, #6
 8005c0a:	d90a      	bls.n	8005c22 <Check_bms_error+0xaa>
		{
			Err.g_uOver_Temp_flag = 1;
 8005c0c:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <Check_bms_error+0xb8>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	729a      	strb	r2, [r3, #10]
			Err.g_uOver_Temp_cnt = 0;
 8005c12:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <Check_bms_error+0xb8>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	71da      	strb	r2, [r3, #7]
		if(Err.g_uOver_Temp_cnt > ERROR_TIME)
 8005c18:	e003      	b.n	8005c22 <Check_bms_error+0xaa>
		}
	}
	else	Err.g_uOver_Temp_cnt = 0;
 8005c1a:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <Check_bms_error+0xb8>)
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	71da      	strb	r2, [r3, #7]
}
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	20000c40 	.word	0x20000c40
 8005c30:	20000d48 	.word	0x20000d48
 8005c34:	20000a0c 	.word	0x20000a0c
 8005c38:	2000119a 	.word	0x2000119a

08005c3c <Check_Relay_Contorl>:

void Check_Relay_Contorl(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
	static uint8_t cnt_Vup = 0, cnt_Vdown = 0;
	// SMPS off under 3.5V
	if(Bms.Voltage_avg < 35000)	// 3.5V
 8005c40:	4b15      	ldr	r3, [pc, #84]	; (8005c98 <Check_Relay_Contorl+0x5c>)
 8005c42:	8bdb      	ldrh	r3, [r3, #30]
 8005c44:	f648 02b7 	movw	r2, #34999	; 0x88b7
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d811      	bhi.n	8005c70 <Check_Relay_Contorl+0x34>
	{
		cnt_Vdown++;
 8005c4c:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <Check_Relay_Contorl+0x60>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	3301      	adds	r3, #1
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <Check_Relay_Contorl+0x60>)
 8005c56:	701a      	strb	r2, [r3, #0]
		cnt_Vup = 0;
 8005c58:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <Check_Relay_Contorl+0x64>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	701a      	strb	r2, [r3, #0]
		if(cnt_Vdown > 60)	// 1 min
 8005c5e:	4b0f      	ldr	r3, [pc, #60]	; (8005c9c <Check_Relay_Contorl+0x60>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b3c      	cmp	r3, #60	; 0x3c
 8005c64:	d915      	bls.n	8005c92 <Check_Relay_Contorl+0x56>
		{
			PWM_Toggle_Relay(PWM_SMPS_CHARGE, FALSE);
 8005c66:	2100      	movs	r1, #0
 8005c68:	2008      	movs	r0, #8
 8005c6a:	f7ff ff29 	bl	8005ac0 <PWM_Toggle_Relay>
		if(cnt_Vup > 60)	// 1 min
		{
			PWM_Toggle_Relay(PWM_SMPS_CHARGE, TRUE);
		}
	}
}
 8005c6e:	e010      	b.n	8005c92 <Check_Relay_Contorl+0x56>
		cnt_Vdown = 0;
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <Check_Relay_Contorl+0x60>)
 8005c72:	2200      	movs	r2, #0
 8005c74:	701a      	strb	r2, [r3, #0]
		cnt_Vup++;
 8005c76:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <Check_Relay_Contorl+0x64>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	b2da      	uxtb	r2, r3
 8005c7e:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <Check_Relay_Contorl+0x64>)
 8005c80:	701a      	strb	r2, [r3, #0]
		if(cnt_Vup > 60)	// 1 min
 8005c82:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <Check_Relay_Contorl+0x64>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b3c      	cmp	r3, #60	; 0x3c
 8005c88:	d903      	bls.n	8005c92 <Check_Relay_Contorl+0x56>
			PWM_Toggle_Relay(PWM_SMPS_CHARGE, TRUE);
 8005c8a:	2101      	movs	r1, #1
 8005c8c:	2008      	movs	r0, #8
 8005c8e:	f7ff ff17 	bl	8005ac0 <PWM_Toggle_Relay>
}
 8005c92:	bf00      	nop
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000360 	.word	0x20000360
 8005c9c:	200000df 	.word	0x200000df
 8005ca0:	200000e0 	.word	0x200000e0

08005ca4 <calc_boot_time>:
	error = HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDR, MemAddress, 1, pData, DataSize, 100);
	return error;
}

void calc_boot_time(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
	boot_time_sec++;
 8005ca8:	4b11      	ldr	r3, [pc, #68]	; (8005cf0 <calc_boot_time+0x4c>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	3301      	adds	r3, #1
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <calc_boot_time+0x4c>)
 8005cb2:	701a      	strb	r2, [r3, #0]

	if(boot_time_sec>59)
 8005cb4:	4b0e      	ldr	r3, [pc, #56]	; (8005cf0 <calc_boot_time+0x4c>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b3b      	cmp	r3, #59	; 0x3b
 8005cba:	d908      	bls.n	8005cce <calc_boot_time+0x2a>
	{
		boot_time_min++;
 8005cbc:	4b0d      	ldr	r3, [pc, #52]	; (8005cf4 <calc_boot_time+0x50>)
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <calc_boot_time+0x50>)
 8005cc6:	701a      	strb	r2, [r3, #0]
		boot_time_sec = 0;
 8005cc8:	4b09      	ldr	r3, [pc, #36]	; (8005cf0 <calc_boot_time+0x4c>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	701a      	strb	r2, [r3, #0]
	}
	if(boot_time_min > 59)
 8005cce:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <calc_boot_time+0x50>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b3b      	cmp	r3, #59	; 0x3b
 8005cd4:	d908      	bls.n	8005ce8 <calc_boot_time+0x44>
	{
		boot_time_hour++;
 8005cd6:	4b08      	ldr	r3, [pc, #32]	; (8005cf8 <calc_boot_time+0x54>)
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	4b06      	ldr	r3, [pc, #24]	; (8005cf8 <calc_boot_time+0x54>)
 8005ce0:	701a      	strb	r2, [r3, #0]
		boot_time_min = 0;
 8005ce2:	4b04      	ldr	r3, [pc, #16]	; (8005cf4 <calc_boot_time+0x50>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	701a      	strb	r2, [r3, #0]
	}
}
 8005ce8:	bf00      	nop
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bc80      	pop	{r7}
 8005cee:	4770      	bx	lr
 8005cf0:	200013a9 	.word	0x200013a9
 8005cf4:	200013a8 	.word	0x200013a8
 8005cf8:	200013aa 	.word	0x200013aa

08005cfc <flash_read>:

//#define StartAddr ((uint32_t) 0x0800FC00)
//#define EndAddr ((uint32_t) 0x0800FCFF)

void flash_read(uint32_t addr, uint8_t* data, uint16_t size)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	4613      	mov	r3, r2
 8005d08:	80fb      	strh	r3, [r7, #6]
			//printf("\r\n");
	}
	printf("\r\n");
#endif

	for(i=0;i<size;i++)
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	82fb      	strh	r3, [r7, #22]
 8005d0e:	e00f      	b.n	8005d30 <flash_read+0x34>
	{
		data[i] = *((__IO uint8_t*)STARTADDR+addr+i);
 8005d10:	8afa      	ldrh	r2, [r7, #22]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4413      	add	r3, r2
 8005d16:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8005d1a:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8005d1e:	8afa      	ldrh	r2, [r7, #22]
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	440a      	add	r2, r1
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	7013      	strb	r3, [r2, #0]
	for(i=0;i<size;i++)
 8005d2a:	8afb      	ldrh	r3, [r7, #22]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	82fb      	strh	r3, [r7, #22]
 8005d30:	8afa      	ldrh	r2, [r7, #22]
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d3eb      	bcc.n	8005d10 <flash_read+0x14>
	}
}
 8005d38:	bf00      	nop
 8005d3a:	bf00      	nop
 8005d3c:	371c      	adds	r7, #28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr

08005d44 <flash_write>:

void flash_write(uint32_t addr, uint8_t* data, uint16_t size)
{
 8005d44:	b5b0      	push	{r4, r5, r7, lr}
 8005d46:	f5ad 6d86 	sub.w	sp, sp, #1072	; 0x430
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8005d50:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8005d54:	6018      	str	r0, [r3, #0]
 8005d56:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8005d5a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8005d5e:	6019      	str	r1, [r3, #0]
 8005d60:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8005d64:	f2a3 432a 	subw	r3, r3, #1066	; 0x42a
 8005d68:	801a      	strh	r2, [r3, #0]
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint16_t i;
	uint32_t PageError, program_data;
	uint8_t page[1024];

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	EraseInitStruct.PageAddress = STARTADDR;
 8005d70:	4b62      	ldr	r3, [pc, #392]	; (8005efc <flash_write+0x1b8>)
 8005d72:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
	EraseInitStruct.NbPages = 1;
 8005d76:	2301      	movs	r3, #1
 8005d78:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424

	if((STARTADDR + addr + size - 1) > ENDADDR)
 8005d7c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8005d80:	f2a3 432a 	subw	r3, r3, #1066	; 0x42a
 8005d84:	881a      	ldrh	r2, [r3, #0]
 8005d86:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8005d8a:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	441a      	add	r2, r3
 8005d92:	4b5b      	ldr	r3, [pc, #364]	; (8005f00 <flash_write+0x1bc>)
 8005d94:	4413      	add	r3, r2
 8005d96:	4a5b      	ldr	r2, [pc, #364]	; (8005f04 <flash_write+0x1c0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d903      	bls.n	8005da4 <flash_write+0x60>
	{
		printf("flash write size over error\r\n");
 8005d9c:	485a      	ldr	r0, [pc, #360]	; (8005f08 <flash_write+0x1c4>)
 8005d9e:	f006 fa3d 	bl	800c21c <puts>
		return;
 8005da2:	e0a7      	b.n	8005ef4 <flash_write+0x1b0>
	}

	// page read
	for(i=0;i<PAGE_SIZE;i++)
 8005da4:	2300      	movs	r3, #0
 8005da6:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
 8005daa:	e014      	b.n	8005dd6 <flash_write+0x92>
	{
		page[i] = *((__IO uint32_t*)STARTADDR+i);
 8005dac:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8005db6:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8005dc0:	b2d1      	uxtb	r1, r2
 8005dc2:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8005dc6:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8005dca:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<PAGE_SIZE;i++)
 8005dcc:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
 8005dd6:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8005dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dde:	d3e5      	bcc.n	8005dac <flash_write+0x68>
	}

	for(i=0;i<size;i++)
 8005de0:	2300      	movs	r3, #0
 8005de2:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
 8005de6:	e01a      	b.n	8005e1e <flash_write+0xda>
	{
		page[addr+i] = data[i];
 8005de8:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8005dec:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8005df0:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
 8005df4:	6812      	ldr	r2, [r2, #0]
 8005df6:	441a      	add	r2, r3
 8005df8:	f8b7 142e 	ldrh.w	r1, [r7, #1070]	; 0x42e
 8005dfc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8005e00:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	440b      	add	r3, r1
 8005e08:	7811      	ldrb	r1, [r2, #0]
 8005e0a:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8005e0e:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8005e12:	54d1      	strb	r1, [r2, r3]
	for(i=0;i<size;i++)
 8005e14:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8005e18:	3301      	adds	r3, #1
 8005e1a:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
 8005e1e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8005e22:	f2a3 432a 	subw	r3, r3, #1066	; 0x42a
 8005e26:	f8b7 242e 	ldrh.w	r2, [r7, #1070]	; 0x42e
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d3db      	bcc.n	8005de8 <flash_write+0xa4>
	}

	// Flash Unlock
	HAL_FLASH_Unlock();
 8005e30:	f002 fb34 	bl	800849c <HAL_FLASH_Unlock>

	// Flash Erase
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8005e34:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8005e38:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f002 fc14 	bl	800866c <HAL_FLASHEx_Erase>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <flash_write+0x10e>
	{
		printf("Flash Erase Error\r\n");
 8005e4a:	4830      	ldr	r0, [pc, #192]	; (8005f0c <flash_write+0x1c8>)
 8005e4c:	f006 f9e6 	bl	800c21c <puts>
		return;
 8005e50:	e050      	b.n	8005ef4 <flash_write+0x1b0>
	}

	// program page
	for(i=0;i<PAGE_SIZE;i=i+4)
 8005e52:	2300      	movs	r3, #0
 8005e54:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
 8005e58:	e045      	b.n	8005ee6 <flash_write+0x1a2>
	{
		program_data = (page[i+3] << 24) | (page[i+2] << 16) | (page[i+1] << 8) | (page[i+0] << 0);
 8005e5a:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8005e5e:	3303      	adds	r3, #3
 8005e60:	f507 6286 	add.w	r2, r7, #1072	; 0x430
 8005e64:	f2a2 421c 	subw	r2, r2, #1052	; 0x41c
 8005e68:	5cd3      	ldrb	r3, [r2, r3]
 8005e6a:	061a      	lsls	r2, r3, #24
 8005e6c:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8005e70:	3302      	adds	r3, #2
 8005e72:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8005e76:	f2a1 411c 	subw	r1, r1, #1052	; 0x41c
 8005e7a:	5ccb      	ldrb	r3, [r1, r3]
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8005e84:	3301      	adds	r3, #1
 8005e86:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8005e8a:	f2a1 411c 	subw	r1, r1, #1052	; 0x41c
 8005e8e:	5ccb      	ldrb	r3, [r1, r3]
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f8b7 242e 	ldrh.w	r2, [r7, #1070]	; 0x42e
 8005e98:	f507 6186 	add.w	r1, r7, #1072	; 0x430
 8005e9c:	f2a1 411c 	subw	r1, r1, #1052	; 0x41c
 8005ea0:	5c8a      	ldrb	r2, [r1, r2]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
		if(HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, STARTADDR+i, program_data)  != HAL_OK)
 8005ea8:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8005eac:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8005eb0:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 8005eb4:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8005eb8:	2200      	movs	r2, #0
 8005eba:	461c      	mov	r4, r3
 8005ebc:	4615      	mov	r5, r2
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	462b      	mov	r3, r5
 8005ec2:	2002      	movs	r0, #2
 8005ec4:	f002 fa7a 	bl	80083bc <HAL_FLASH_Program>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d006      	beq.n	8005edc <flash_write+0x198>
		{
			printf("Flash Program Error %d\r\n", i);
 8005ece:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	480e      	ldr	r0, [pc, #56]	; (8005f10 <flash_write+0x1cc>)
 8005ed6:	f006 f933 	bl	800c140 <iprintf>
			return;
 8005eda:	e00b      	b.n	8005ef4 <flash_write+0x1b0>
	for(i=0;i<PAGE_SIZE;i=i+4)
 8005edc:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	f8a7 342e 	strh.w	r3, [r7, #1070]	; 0x42e
 8005ee6:	f8b7 342e 	ldrh.w	r3, [r7, #1070]	; 0x42e
 8005eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eee:	d3b4      	bcc.n	8005e5a <flash_write+0x116>
		}
	}

	// Flash Lock
	HAL_FLASH_Lock();
 8005ef0:	f002 fafa 	bl	80084e8 <HAL_FLASH_Lock>

}
 8005ef4:	f507 6786 	add.w	r7, r7, #1072	; 0x430
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bdb0      	pop	{r4, r5, r7, pc}
 8005efc:	0800fc00 	.word	0x0800fc00
 8005f00:	0800fbff 	.word	0x0800fbff
 8005f04:	0800ffff 	.word	0x0800ffff
 8005f08:	0800dc3c 	.word	0x0800dc3c
 8005f0c:	0800dc5c 	.word	0x0800dc5c
 8005f10:	0800dc70 	.word	0x0800dc70

08005f14 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <MX_RTC_Init+0x30>)
 8005f1a:	4a0b      	ldr	r2, [pc, #44]	; (8005f48 <MX_RTC_Init+0x34>)
 8005f1c:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8005f1e:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <MX_RTC_Init+0x30>)
 8005f20:	f04f 32ff 	mov.w	r2, #4294967295
 8005f24:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8005f26:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <MX_RTC_Init+0x30>)
 8005f28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005f2c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005f2e:	4805      	ldr	r0, [pc, #20]	; (8005f44 <MX_RTC_Init+0x30>)
 8005f30:	f003 fcee 	bl	8009910 <HAL_RTC_Init>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <MX_RTC_Init+0x2a>
  {
    Error_Handler();
 8005f3a:	f7ff f814 	bl	8004f66 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005f3e:	bf00      	nop
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	200013ac 	.word	0x200013ac
 8005f48:	40002800 	.word	0x40002800

08005f4c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a0b      	ldr	r2, [pc, #44]	; (8005f88 <HAL_RTC_MspInit+0x3c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d110      	bne.n	8005f80 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8005f5e:	f002 ff3d 	bl	8008ddc <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8005f62:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <HAL_RTC_MspInit+0x40>)
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	4a09      	ldr	r2, [pc, #36]	; (8005f8c <HAL_RTC_MspInit+0x40>)
 8005f68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f6c:	61d3      	str	r3, [r2, #28]
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <HAL_RTC_MspInit+0x40>)
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005f7a:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <HAL_RTC_MspInit+0x44>)
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8005f80:	bf00      	nop
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	40002800 	.word	0x40002800
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	4242043c 	.word	0x4242043c

08005f94 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8005f98:	4b17      	ldr	r3, [pc, #92]	; (8005ff8 <MX_SPI1_Init+0x64>)
 8005f9a:	4a18      	ldr	r2, [pc, #96]	; (8005ffc <MX_SPI1_Init+0x68>)
 8005f9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005f9e:	4b16      	ldr	r3, [pc, #88]	; (8005ff8 <MX_SPI1_Init+0x64>)
 8005fa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005fa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <MX_SPI1_Init+0x64>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005fac:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <MX_SPI1_Init+0x64>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fb2:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <MX_SPI1_Init+0x64>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005fb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ff8 <MX_SPI1_Init+0x64>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005fbe:	4b0e      	ldr	r3, [pc, #56]	; (8005ff8 <MX_SPI1_Init+0x64>)
 8005fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005fc6:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <MX_SPI1_Init+0x64>)
 8005fc8:	2228      	movs	r2, #40	; 0x28
 8005fca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	; (8005ff8 <MX_SPI1_Init+0x64>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005fd2:	4b09      	ldr	r3, [pc, #36]	; (8005ff8 <MX_SPI1_Init+0x64>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fd8:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <MX_SPI1_Init+0x64>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005fde:	4b06      	ldr	r3, [pc, #24]	; (8005ff8 <MX_SPI1_Init+0x64>)
 8005fe0:	220a      	movs	r2, #10
 8005fe2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005fe4:	4804      	ldr	r0, [pc, #16]	; (8005ff8 <MX_SPI1_Init+0x64>)
 8005fe6:	f003 fd9c 	bl	8009b22 <HAL_SPI_Init>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005ff0:	f7fe ffb9 	bl	8004f66 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005ff4:	bf00      	nop
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	200013c0 	.word	0x200013c0
 8005ffc:	40013000 	.word	0x40013000

08006000 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006008:	f107 0310 	add.w	r3, r7, #16
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	609a      	str	r2, [r3, #8]
 8006014:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a1b      	ldr	r2, [pc, #108]	; (8006088 <HAL_SPI_MspInit+0x88>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d12f      	bne.n	8006080 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006020:	4b1a      	ldr	r3, [pc, #104]	; (800608c <HAL_SPI_MspInit+0x8c>)
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	4a19      	ldr	r2, [pc, #100]	; (800608c <HAL_SPI_MspInit+0x8c>)
 8006026:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800602a:	6193      	str	r3, [r2, #24]
 800602c:	4b17      	ldr	r3, [pc, #92]	; (800608c <HAL_SPI_MspInit+0x8c>)
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006034:	60fb      	str	r3, [r7, #12]
 8006036:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006038:	4b14      	ldr	r3, [pc, #80]	; (800608c <HAL_SPI_MspInit+0x8c>)
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	4a13      	ldr	r2, [pc, #76]	; (800608c <HAL_SPI_MspInit+0x8c>)
 800603e:	f043 0304 	orr.w	r3, r3, #4
 8006042:	6193      	str	r3, [r2, #24]
 8006044:	4b11      	ldr	r3, [pc, #68]	; (800608c <HAL_SPI_MspInit+0x8c>)
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	60bb      	str	r3, [r7, #8]
 800604e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8006050:	23a0      	movs	r3, #160	; 0xa0
 8006052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006054:	2302      	movs	r3, #2
 8006056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006058:	2303      	movs	r3, #3
 800605a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800605c:	f107 0310 	add.w	r3, r7, #16
 8006060:	4619      	mov	r1, r3
 8006062:	480b      	ldr	r0, [pc, #44]	; (8006090 <HAL_SPI_MspInit+0x90>)
 8006064:	f002 fbaa 	bl	80087bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006068:	2340      	movs	r3, #64	; 0x40
 800606a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800606c:	2300      	movs	r3, #0
 800606e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006070:	2300      	movs	r3, #0
 8006072:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006074:	f107 0310 	add.w	r3, r7, #16
 8006078:	4619      	mov	r1, r3
 800607a:	4805      	ldr	r0, [pc, #20]	; (8006090 <HAL_SPI_MspInit+0x90>)
 800607c:	f002 fb9e 	bl	80087bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8006080:	bf00      	nop
 8006082:	3720      	adds	r7, #32
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40013000 	.word	0x40013000
 800608c:	40021000 	.word	0x40021000
 8006090:	40010800 	.word	0x40010800

08006094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800609a:	4b19      	ldr	r3, [pc, #100]	; (8006100 <HAL_MspInit+0x6c>)
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	4a18      	ldr	r2, [pc, #96]	; (8006100 <HAL_MspInit+0x6c>)
 80060a0:	f043 0301 	orr.w	r3, r3, #1
 80060a4:	6193      	str	r3, [r2, #24]
 80060a6:	4b16      	ldr	r3, [pc, #88]	; (8006100 <HAL_MspInit+0x6c>)
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	60bb      	str	r3, [r7, #8]
 80060b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80060b2:	4b13      	ldr	r3, [pc, #76]	; (8006100 <HAL_MspInit+0x6c>)
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	4a12      	ldr	r2, [pc, #72]	; (8006100 <HAL_MspInit+0x6c>)
 80060b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060bc:	61d3      	str	r3, [r2, #28]
 80060be:	4b10      	ldr	r3, [pc, #64]	; (8006100 <HAL_MspInit+0x6c>)
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060c6:	607b      	str	r3, [r7, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 80060ca:	2200      	movs	r2, #0
 80060cc:	2100      	movs	r1, #0
 80060ce:	2001      	movs	r0, #1
 80060d0:	f001 fe9b 	bl	8007e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80060d4:	2001      	movs	r0, #1
 80060d6:	f001 feb4 	bl	8007e42 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80060da:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <HAL_MspInit+0x70>)
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	60fb      	str	r3, [r7, #12]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	4a04      	ldr	r2, [pc, #16]	; (8006104 <HAL_MspInit+0x70>)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80060f6:	bf00      	nop
 80060f8:	3710      	adds	r7, #16
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40021000 	.word	0x40021000
 8006104:	40010000 	.word	0x40010000

08006108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800610c:	e7fe      	b.n	800610c <NMI_Handler+0x4>

0800610e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800610e:	b480      	push	{r7}
 8006110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006112:	e7fe      	b.n	8006112 <HardFault_Handler+0x4>

08006114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006118:	e7fe      	b.n	8006118 <MemManage_Handler+0x4>

0800611a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800611a:	b480      	push	{r7}
 800611c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800611e:	e7fe      	b.n	800611e <BusFault_Handler+0x4>

08006120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006124:	e7fe      	b.n	8006124 <UsageFault_Handler+0x4>

08006126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006126:	b480      	push	{r7}
 8006128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800612a:	bf00      	nop
 800612c:	46bd      	mov	sp, r7
 800612e:	bc80      	pop	{r7}
 8006130:	4770      	bx	lr

08006132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006132:	b480      	push	{r7}
 8006134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006136:	bf00      	nop
 8006138:	46bd      	mov	sp, r7
 800613a:	bc80      	pop	{r7}
 800613c:	4770      	bx	lr

0800613e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800613e:	b480      	push	{r7}
 8006140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006142:	bf00      	nop
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr

0800614a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800614e:	f000 fc11 	bl	8006974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006152:	bf00      	nop
 8006154:	bd80      	pop	{r7, pc}

08006156 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8006156:	b580      	push	{r7, lr}
 8006158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800615a:	f002 fe4b 	bl	8008df4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800615e:	bf00      	nop
 8006160:	bd80      	pop	{r7, pc}
	...

08006164 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006168:	4802      	ldr	r0, [pc, #8]	; (8006174 <DMA1_Channel1_IRQHandler+0x10>)
 800616a:	f001 fff3 	bl	8008154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800616e:	bf00      	nop
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	200012e8 	.word	0x200012e8

08006178 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800617c:	4802      	ldr	r0, [pc, #8]	; (8006188 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800617e:	f001 fb52 	bl	8007826 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	2000132c 	.word	0x2000132c

0800618c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006190:	4802      	ldr	r0, [pc, #8]	; (800619c <TIM2_IRQHandler+0x10>)
 8006192:	f004 fae3 	bl	800a75c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006196:	bf00      	nop
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20001470 	.word	0x20001470

080061a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80061a4:	4802      	ldr	r0, [pc, #8]	; (80061b0 <USART1_IRQHandler+0x10>)
 80061a6:	f005 f99b 	bl	800b4e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80061aa:	bf00      	nop
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20001500 	.word	0x20001500

080061b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80061b8:	4802      	ldr	r0, [pc, #8]	; (80061c4 <USART2_IRQHandler+0x10>)
 80061ba:	f005 f991 	bl	800b4e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80061be:	bf00      	nop
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	20001548 	.word	0x20001548

080061c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80061cc:	4802      	ldr	r0, [pc, #8]	; (80061d8 <USART3_IRQHandler+0x10>)
 80061ce:	f005 f987 	bl	800b4e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80061d2:	bf00      	nop
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	200014b8 	.word	0x200014b8

080061dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
 80061ec:	e00a      	b.n	8006204 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80061ee:	f3af 8000 	nop.w
 80061f2:	4601      	mov	r1, r0
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	1c5a      	adds	r2, r3, #1
 80061f8:	60ba      	str	r2, [r7, #8]
 80061fa:	b2ca      	uxtb	r2, r1
 80061fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	3301      	adds	r3, #1
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	429a      	cmp	r2, r3
 800620a:	dbf0      	blt.n	80061ee <_read+0x12>
	}

return len;
 800620c:	687b      	ldr	r3, [r7, #4]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b086      	sub	sp, #24
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006222:	2300      	movs	r3, #0
 8006224:	617b      	str	r3, [r7, #20]
 8006226:	e009      	b.n	800623c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	60ba      	str	r2, [r7, #8]
 800622e:	781b      	ldrb	r3, [r3, #0]
 8006230:	4618      	mov	r0, r3
 8006232:	f7fe fbcf 	bl	80049d4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	3301      	adds	r3, #1
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	429a      	cmp	r2, r3
 8006242:	dbf1      	blt.n	8006228 <_write+0x12>
	}
	return len;
 8006244:	687b      	ldr	r3, [r7, #4]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3718      	adds	r7, #24
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <_close>:

int _close(int file)
{
 800624e:	b480      	push	{r7}
 8006250:	b083      	sub	sp, #12
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
	return -1;
 8006256:	f04f 33ff 	mov.w	r3, #4294967295
}
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006274:	605a      	str	r2, [r3, #4]
	return 0;
 8006276:	2300      	movs	r3, #0
}
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	4770      	bx	lr

08006282 <_isatty>:

int _isatty(int file)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
	return 1;
 800628a:	2301      	movs	r3, #1
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	bc80      	pop	{r7}
 8006294:	4770      	bx	lr

08006296 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006296:	b480      	push	{r7}
 8006298:	b085      	sub	sp, #20
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	607a      	str	r2, [r7, #4]
	return 0;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr
	...

080062b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80062b8:	4a14      	ldr	r2, [pc, #80]	; (800630c <_sbrk+0x5c>)
 80062ba:	4b15      	ldr	r3, [pc, #84]	; (8006310 <_sbrk+0x60>)
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80062c4:	4b13      	ldr	r3, [pc, #76]	; (8006314 <_sbrk+0x64>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d102      	bne.n	80062d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80062cc:	4b11      	ldr	r3, [pc, #68]	; (8006314 <_sbrk+0x64>)
 80062ce:	4a12      	ldr	r2, [pc, #72]	; (8006318 <_sbrk+0x68>)
 80062d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80062d2:	4b10      	ldr	r3, [pc, #64]	; (8006314 <_sbrk+0x64>)
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4413      	add	r3, r2
 80062da:	693a      	ldr	r2, [r7, #16]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d207      	bcs.n	80062f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80062e0:	f006 f8ea 	bl	800c4b8 <__errno>
 80062e4:	4603      	mov	r3, r0
 80062e6:	220c      	movs	r2, #12
 80062e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80062ea:	f04f 33ff 	mov.w	r3, #4294967295
 80062ee:	e009      	b.n	8006304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80062f0:	4b08      	ldr	r3, [pc, #32]	; (8006314 <_sbrk+0x64>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80062f6:	4b07      	ldr	r3, [pc, #28]	; (8006314 <_sbrk+0x64>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4413      	add	r3, r2
 80062fe:	4a05      	ldr	r2, [pc, #20]	; (8006314 <_sbrk+0x64>)
 8006300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006302:	68fb      	ldr	r3, [r7, #12]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	20005000 	.word	0x20005000
 8006310:	00000400 	.word	0x00000400
 8006314:	200000e4 	.word	0x200000e4
 8006318:	200015b8 	.word	0x200015b8

0800631c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006320:	bf00      	nop
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr

08006328 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800632e:	f107 0308 	add.w	r3, r7, #8
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	605a      	str	r2, [r3, #4]
 8006338:	609a      	str	r2, [r3, #8]
 800633a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800633c:	463b      	mov	r3, r7
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006344:	4b1e      	ldr	r3, [pc, #120]	; (80063c0 <MX_TIM2_Init+0x98>)
 8006346:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800634a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 800634c:	4b1c      	ldr	r3, [pc, #112]	; (80063c0 <MX_TIM2_Init+0x98>)
 800634e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006352:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006354:	4b1a      	ldr	r3, [pc, #104]	; (80063c0 <MX_TIM2_Init+0x98>)
 8006356:	2200      	movs	r2, #0
 8006358:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800635a:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <MX_TIM2_Init+0x98>)
 800635c:	f242 720f 	movw	r2, #9999	; 0x270f
 8006360:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006362:	4b17      	ldr	r3, [pc, #92]	; (80063c0 <MX_TIM2_Init+0x98>)
 8006364:	2200      	movs	r2, #0
 8006366:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006368:	4b15      	ldr	r3, [pc, #84]	; (80063c0 <MX_TIM2_Init+0x98>)
 800636a:	2200      	movs	r2, #0
 800636c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800636e:	4814      	ldr	r0, [pc, #80]	; (80063c0 <MX_TIM2_Init+0x98>)
 8006370:	f003 fff4 	bl	800a35c <HAL_TIM_Base_Init>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800637a:	f7fe fdf4 	bl	8004f66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800637e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006382:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006384:	f107 0308 	add.w	r3, r7, #8
 8006388:	4619      	mov	r1, r3
 800638a:	480d      	ldr	r0, [pc, #52]	; (80063c0 <MX_TIM2_Init+0x98>)
 800638c:	f004 fbb0 	bl	800aaf0 <HAL_TIM_ConfigClockSource>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006396:	f7fe fde6 	bl	8004f66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800639a:	2300      	movs	r3, #0
 800639c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800639e:	2300      	movs	r3, #0
 80063a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80063a2:	463b      	mov	r3, r7
 80063a4:	4619      	mov	r1, r3
 80063a6:	4806      	ldr	r0, [pc, #24]	; (80063c0 <MX_TIM2_Init+0x98>)
 80063a8:	f004 ff32 	bl	800b210 <HAL_TIMEx_MasterConfigSynchronization>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80063b2:	f7fe fdd8 	bl	8004f66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80063b6:	bf00      	nop
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20001470 	.word	0x20001470

080063c4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08e      	sub	sp, #56	; 0x38
 80063c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80063ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	605a      	str	r2, [r3, #4]
 80063d4:	609a      	str	r2, [r3, #8]
 80063d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063d8:	f107 0320 	add.w	r3, r7, #32
 80063dc:	2200      	movs	r2, #0
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063e2:	1d3b      	adds	r3, r7, #4
 80063e4:	2200      	movs	r2, #0
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	605a      	str	r2, [r3, #4]
 80063ea:	609a      	str	r2, [r3, #8]
 80063ec:	60da      	str	r2, [r3, #12]
 80063ee:	611a      	str	r2, [r3, #16]
 80063f0:	615a      	str	r2, [r3, #20]
 80063f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80063f4:	4b3e      	ldr	r3, [pc, #248]	; (80064f0 <MX_TIM3_Init+0x12c>)
 80063f6:	4a3f      	ldr	r2, [pc, #252]	; (80064f4 <MX_TIM3_Init+0x130>)
 80063f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 36-1;
 80063fa:	4b3d      	ldr	r3, [pc, #244]	; (80064f0 <MX_TIM3_Init+0x12c>)
 80063fc:	2223      	movs	r2, #35	; 0x23
 80063fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006400:	4b3b      	ldr	r3, [pc, #236]	; (80064f0 <MX_TIM3_Init+0x12c>)
 8006402:	2200      	movs	r2, #0
 8006404:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8006406:	4b3a      	ldr	r3, [pc, #232]	; (80064f0 <MX_TIM3_Init+0x12c>)
 8006408:	2263      	movs	r2, #99	; 0x63
 800640a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800640c:	4b38      	ldr	r3, [pc, #224]	; (80064f0 <MX_TIM3_Init+0x12c>)
 800640e:	2200      	movs	r2, #0
 8006410:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006412:	4b37      	ldr	r3, [pc, #220]	; (80064f0 <MX_TIM3_Init+0x12c>)
 8006414:	2200      	movs	r2, #0
 8006416:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006418:	4835      	ldr	r0, [pc, #212]	; (80064f0 <MX_TIM3_Init+0x12c>)
 800641a:	f003 ff9f 	bl	800a35c <HAL_TIM_Base_Init>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8006424:	f7fe fd9f 	bl	8004f66 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800642c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800642e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006432:	4619      	mov	r1, r3
 8006434:	482e      	ldr	r0, [pc, #184]	; (80064f0 <MX_TIM3_Init+0x12c>)
 8006436:	f004 fb5b 	bl	800aaf0 <HAL_TIM_ConfigClockSource>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d001      	beq.n	8006444 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8006440:	f7fe fd91 	bl	8004f66 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006444:	482a      	ldr	r0, [pc, #168]	; (80064f0 <MX_TIM3_Init+0x12c>)
 8006446:	f004 f82b 	bl	800a4a0 <HAL_TIM_PWM_Init>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8006450:	f7fe fd89 	bl	8004f66 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006454:	2300      	movs	r3, #0
 8006456:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006458:	2300      	movs	r3, #0
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800645c:	f107 0320 	add.w	r3, r7, #32
 8006460:	4619      	mov	r1, r3
 8006462:	4823      	ldr	r0, [pc, #140]	; (80064f0 <MX_TIM3_Init+0x12c>)
 8006464:	f004 fed4 	bl	800b210 <HAL_TIMEx_MasterConfigSynchronization>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800646e:	f7fe fd7a 	bl	8004f66 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006472:	2360      	movs	r3, #96	; 0x60
 8006474:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006476:	2300      	movs	r3, #0
 8006478:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800647e:	2300      	movs	r3, #0
 8006480:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006482:	1d3b      	adds	r3, r7, #4
 8006484:	2200      	movs	r2, #0
 8006486:	4619      	mov	r1, r3
 8006488:	4819      	ldr	r0, [pc, #100]	; (80064f0 <MX_TIM3_Init+0x12c>)
 800648a:	f004 fa6f 	bl	800a96c <HAL_TIM_PWM_ConfigChannel>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8006494:	f7fe fd67 	bl	8004f66 <Error_Handler>
  }
  sConfigOC.Pulse = 35-1;
 8006498:	2322      	movs	r3, #34	; 0x22
 800649a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800649c:	1d3b      	adds	r3, r7, #4
 800649e:	2204      	movs	r2, #4
 80064a0:	4619      	mov	r1, r3
 80064a2:	4813      	ldr	r0, [pc, #76]	; (80064f0 <MX_TIM3_Init+0x12c>)
 80064a4:	f004 fa62 	bl	800a96c <HAL_TIM_PWM_ConfigChannel>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80064ae:	f7fe fd5a 	bl	8004f66 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80064b2:	1d3b      	adds	r3, r7, #4
 80064b4:	2208      	movs	r2, #8
 80064b6:	4619      	mov	r1, r3
 80064b8:	480d      	ldr	r0, [pc, #52]	; (80064f0 <MX_TIM3_Init+0x12c>)
 80064ba:	f004 fa57 	bl	800a96c <HAL_TIM_PWM_ConfigChannel>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80064c4:	f7fe fd4f 	bl	8004f66 <Error_Handler>
  }
  sConfigOC.Pulse = 50-1;
 80064c8:	2331      	movs	r3, #49	; 0x31
 80064ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80064cc:	1d3b      	adds	r3, r7, #4
 80064ce:	220c      	movs	r2, #12
 80064d0:	4619      	mov	r1, r3
 80064d2:	4807      	ldr	r0, [pc, #28]	; (80064f0 <MX_TIM3_Init+0x12c>)
 80064d4:	f004 fa4a 	bl	800a96c <HAL_TIM_PWM_ConfigChannel>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 80064de:	f7fe fd42 	bl	8004f66 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80064e2:	4803      	ldr	r0, [pc, #12]	; (80064f0 <MX_TIM3_Init+0x12c>)
 80064e4:	f000 f840 	bl	8006568 <HAL_TIM_MspPostInit>

}
 80064e8:	bf00      	nop
 80064ea:	3738      	adds	r7, #56	; 0x38
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	20001428 	.word	0x20001428
 80064f4:	40000400 	.word	0x40000400

080064f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006508:	d114      	bne.n	8006534 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800650a:	4b15      	ldr	r3, [pc, #84]	; (8006560 <HAL_TIM_Base_MspInit+0x68>)
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	4a14      	ldr	r2, [pc, #80]	; (8006560 <HAL_TIM_Base_MspInit+0x68>)
 8006510:	f043 0301 	orr.w	r3, r3, #1
 8006514:	61d3      	str	r3, [r2, #28]
 8006516:	4b12      	ldr	r3, [pc, #72]	; (8006560 <HAL_TIM_Base_MspInit+0x68>)
 8006518:	69db      	ldr	r3, [r3, #28]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	60fb      	str	r3, [r7, #12]
 8006520:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006522:	2200      	movs	r2, #0
 8006524:	2100      	movs	r1, #0
 8006526:	201c      	movs	r0, #28
 8006528:	f001 fc6f 	bl	8007e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800652c:	201c      	movs	r0, #28
 800652e:	f001 fc88 	bl	8007e42 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8006532:	e010      	b.n	8006556 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a0a      	ldr	r2, [pc, #40]	; (8006564 <HAL_TIM_Base_MspInit+0x6c>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d10b      	bne.n	8006556 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800653e:	4b08      	ldr	r3, [pc, #32]	; (8006560 <HAL_TIM_Base_MspInit+0x68>)
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	4a07      	ldr	r2, [pc, #28]	; (8006560 <HAL_TIM_Base_MspInit+0x68>)
 8006544:	f043 0302 	orr.w	r3, r3, #2
 8006548:	61d3      	str	r3, [r2, #28]
 800654a:	4b05      	ldr	r3, [pc, #20]	; (8006560 <HAL_TIM_Base_MspInit+0x68>)
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	60bb      	str	r3, [r7, #8]
 8006554:	68bb      	ldr	r3, [r7, #8]
}
 8006556:	bf00      	nop
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	40021000 	.word	0x40021000
 8006564:	40000400 	.word	0x40000400

08006568 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006570:	f107 030c 	add.w	r3, r7, #12
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	605a      	str	r2, [r3, #4]
 800657a:	609a      	str	r2, [r3, #8]
 800657c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a19      	ldr	r2, [pc, #100]	; (80065e8 <HAL_TIM_MspPostInit+0x80>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d12a      	bne.n	80065de <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006588:	4b18      	ldr	r3, [pc, #96]	; (80065ec <HAL_TIM_MspPostInit+0x84>)
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	4a17      	ldr	r2, [pc, #92]	; (80065ec <HAL_TIM_MspPostInit+0x84>)
 800658e:	f043 0310 	orr.w	r3, r3, #16
 8006592:	6193      	str	r3, [r2, #24]
 8006594:	4b15      	ldr	r3, [pc, #84]	; (80065ec <HAL_TIM_MspPostInit+0x84>)
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RELAY_PWM_Pin|EX_CHARG_RELAY_PWM_Pin|SMPS_RELAY_PWM_Pin|FAN_HIGH_SPEED_PWM_Pin;
 80065a0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80065a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065a6:	2302      	movs	r3, #2
 80065a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065aa:	2302      	movs	r3, #2
 80065ac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065ae:	f107 030c 	add.w	r3, r7, #12
 80065b2:	4619      	mov	r1, r3
 80065b4:	480e      	ldr	r0, [pc, #56]	; (80065f0 <HAL_TIM_MspPostInit+0x88>)
 80065b6:	f002 f901 	bl	80087bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80065ba:	4b0e      	ldr	r3, [pc, #56]	; (80065f4 <HAL_TIM_MspPostInit+0x8c>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	61fb      	str	r3, [r7, #28]
 80065c0:	69fb      	ldr	r3, [r7, #28]
 80065c2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80065c6:	61fb      	str	r3, [r7, #28]
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80065ce:	61fb      	str	r3, [r7, #28]
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80065d6:	61fb      	str	r3, [r7, #28]
 80065d8:	4a06      	ldr	r2, [pc, #24]	; (80065f4 <HAL_TIM_MspPostInit+0x8c>)
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80065de:	bf00      	nop
 80065e0:	3720      	adds	r7, #32
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	40000400 	.word	0x40000400
 80065ec:	40021000 	.word	0x40021000
 80065f0:	40011000 	.word	0x40011000
 80065f4:	40010000 	.word	0x40010000

080065f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80065fc:	4b11      	ldr	r3, [pc, #68]	; (8006644 <MX_USART1_UART_Init+0x4c>)
 80065fe:	4a12      	ldr	r2, [pc, #72]	; (8006648 <MX_USART1_UART_Init+0x50>)
 8006600:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006602:	4b10      	ldr	r3, [pc, #64]	; (8006644 <MX_USART1_UART_Init+0x4c>)
 8006604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006608:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800660a:	4b0e      	ldr	r3, [pc, #56]	; (8006644 <MX_USART1_UART_Init+0x4c>)
 800660c:	2200      	movs	r2, #0
 800660e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006610:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <MX_USART1_UART_Init+0x4c>)
 8006612:	2200      	movs	r2, #0
 8006614:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006616:	4b0b      	ldr	r3, [pc, #44]	; (8006644 <MX_USART1_UART_Init+0x4c>)
 8006618:	2200      	movs	r2, #0
 800661a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800661c:	4b09      	ldr	r3, [pc, #36]	; (8006644 <MX_USART1_UART_Init+0x4c>)
 800661e:	220c      	movs	r2, #12
 8006620:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006622:	4b08      	ldr	r3, [pc, #32]	; (8006644 <MX_USART1_UART_Init+0x4c>)
 8006624:	2200      	movs	r2, #0
 8006626:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006628:	4b06      	ldr	r3, [pc, #24]	; (8006644 <MX_USART1_UART_Init+0x4c>)
 800662a:	2200      	movs	r2, #0
 800662c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800662e:	4805      	ldr	r0, [pc, #20]	; (8006644 <MX_USART1_UART_Init+0x4c>)
 8006630:	f004 fe5e 	bl	800b2f0 <HAL_UART_Init>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800663a:	f7fe fc94 	bl	8004f66 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800663e:	bf00      	nop
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20001500 	.word	0x20001500
 8006648:	40013800 	.word	0x40013800

0800664c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006650:	4b11      	ldr	r3, [pc, #68]	; (8006698 <MX_USART2_UART_Init+0x4c>)
 8006652:	4a12      	ldr	r2, [pc, #72]	; (800669c <MX_USART2_UART_Init+0x50>)
 8006654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006656:	4b10      	ldr	r3, [pc, #64]	; (8006698 <MX_USART2_UART_Init+0x4c>)
 8006658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800665c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800665e:	4b0e      	ldr	r3, [pc, #56]	; (8006698 <MX_USART2_UART_Init+0x4c>)
 8006660:	2200      	movs	r2, #0
 8006662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006664:	4b0c      	ldr	r3, [pc, #48]	; (8006698 <MX_USART2_UART_Init+0x4c>)
 8006666:	2200      	movs	r2, #0
 8006668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800666a:	4b0b      	ldr	r3, [pc, #44]	; (8006698 <MX_USART2_UART_Init+0x4c>)
 800666c:	2200      	movs	r2, #0
 800666e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006670:	4b09      	ldr	r3, [pc, #36]	; (8006698 <MX_USART2_UART_Init+0x4c>)
 8006672:	220c      	movs	r2, #12
 8006674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006676:	4b08      	ldr	r3, [pc, #32]	; (8006698 <MX_USART2_UART_Init+0x4c>)
 8006678:	2200      	movs	r2, #0
 800667a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800667c:	4b06      	ldr	r3, [pc, #24]	; (8006698 <MX_USART2_UART_Init+0x4c>)
 800667e:	2200      	movs	r2, #0
 8006680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006682:	4805      	ldr	r0, [pc, #20]	; (8006698 <MX_USART2_UART_Init+0x4c>)
 8006684:	f004 fe34 	bl	800b2f0 <HAL_UART_Init>
 8006688:	4603      	mov	r3, r0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d001      	beq.n	8006692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800668e:	f7fe fc6a 	bl	8004f66 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006692:	bf00      	nop
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	20001548 	.word	0x20001548
 800669c:	40004400 	.word	0x40004400

080066a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80066a4:	4b11      	ldr	r3, [pc, #68]	; (80066ec <MX_USART3_UART_Init+0x4c>)
 80066a6:	4a12      	ldr	r2, [pc, #72]	; (80066f0 <MX_USART3_UART_Init+0x50>)
 80066a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80066aa:	4b10      	ldr	r3, [pc, #64]	; (80066ec <MX_USART3_UART_Init+0x4c>)
 80066ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80066b2:	4b0e      	ldr	r3, [pc, #56]	; (80066ec <MX_USART3_UART_Init+0x4c>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80066b8:	4b0c      	ldr	r3, [pc, #48]	; (80066ec <MX_USART3_UART_Init+0x4c>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80066be:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <MX_USART3_UART_Init+0x4c>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80066c4:	4b09      	ldr	r3, [pc, #36]	; (80066ec <MX_USART3_UART_Init+0x4c>)
 80066c6:	220c      	movs	r2, #12
 80066c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066ca:	4b08      	ldr	r3, [pc, #32]	; (80066ec <MX_USART3_UART_Init+0x4c>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80066d0:	4b06      	ldr	r3, [pc, #24]	; (80066ec <MX_USART3_UART_Init+0x4c>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80066d6:	4805      	ldr	r0, [pc, #20]	; (80066ec <MX_USART3_UART_Init+0x4c>)
 80066d8:	f004 fe0a 	bl	800b2f0 <HAL_UART_Init>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80066e2:	f7fe fc40 	bl	8004f66 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80066e6:	bf00      	nop
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	200014b8 	.word	0x200014b8
 80066f0:	40004800 	.word	0x40004800

080066f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08e      	sub	sp, #56	; 0x38
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006700:	2200      	movs	r2, #0
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	605a      	str	r2, [r3, #4]
 8006706:	609a      	str	r2, [r3, #8]
 8006708:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a5c      	ldr	r2, [pc, #368]	; (8006880 <HAL_UART_MspInit+0x18c>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d132      	bne.n	800677a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006714:	4b5b      	ldr	r3, [pc, #364]	; (8006884 <HAL_UART_MspInit+0x190>)
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	4a5a      	ldr	r2, [pc, #360]	; (8006884 <HAL_UART_MspInit+0x190>)
 800671a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800671e:	6193      	str	r3, [r2, #24]
 8006720:	4b58      	ldr	r3, [pc, #352]	; (8006884 <HAL_UART_MspInit+0x190>)
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006728:	623b      	str	r3, [r7, #32]
 800672a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800672c:	4b55      	ldr	r3, [pc, #340]	; (8006884 <HAL_UART_MspInit+0x190>)
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	4a54      	ldr	r2, [pc, #336]	; (8006884 <HAL_UART_MspInit+0x190>)
 8006732:	f043 0304 	orr.w	r3, r3, #4
 8006736:	6193      	str	r3, [r2, #24]
 8006738:	4b52      	ldr	r3, [pc, #328]	; (8006884 <HAL_UART_MspInit+0x190>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	61fb      	str	r3, [r7, #28]
 8006742:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_RX_Pin;
 8006744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800674a:	2302      	movs	r3, #2
 800674c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800674e:	2303      	movs	r3, #3
 8006750:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(DEBUG_RX_GPIO_Port, &GPIO_InitStruct);
 8006752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006756:	4619      	mov	r1, r3
 8006758:	484b      	ldr	r0, [pc, #300]	; (8006888 <HAL_UART_MspInit+0x194>)
 800675a:	f002 f82f 	bl	80087bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DEBUG_TX_Pin;
 800675e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006764:	2300      	movs	r3, #0
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006768:	2300      	movs	r3, #0
 800676a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DEBUG_TX_GPIO_Port, &GPIO_InitStruct);
 800676c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006770:	4619      	mov	r1, r3
 8006772:	4845      	ldr	r0, [pc, #276]	; (8006888 <HAL_UART_MspInit+0x194>)
 8006774:	f002 f822 	bl	80087bc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006778:	e07e      	b.n	8006878 <HAL_UART_MspInit+0x184>
  else if(uartHandle->Instance==USART2)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a43      	ldr	r2, [pc, #268]	; (800688c <HAL_UART_MspInit+0x198>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d130      	bne.n	80067e6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006784:	4b3f      	ldr	r3, [pc, #252]	; (8006884 <HAL_UART_MspInit+0x190>)
 8006786:	69db      	ldr	r3, [r3, #28]
 8006788:	4a3e      	ldr	r2, [pc, #248]	; (8006884 <HAL_UART_MspInit+0x190>)
 800678a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800678e:	61d3      	str	r3, [r2, #28]
 8006790:	4b3c      	ldr	r3, [pc, #240]	; (8006884 <HAL_UART_MspInit+0x190>)
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006798:	61bb      	str	r3, [r7, #24]
 800679a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800679c:	4b39      	ldr	r3, [pc, #228]	; (8006884 <HAL_UART_MspInit+0x190>)
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	4a38      	ldr	r2, [pc, #224]	; (8006884 <HAL_UART_MspInit+0x190>)
 80067a2:	f043 0304 	orr.w	r3, r3, #4
 80067a6:	6193      	str	r3, [r2, #24]
 80067a8:	4b36      	ldr	r3, [pc, #216]	; (8006884 <HAL_UART_MspInit+0x190>)
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCU_TX_Pin;
 80067b4:	2304      	movs	r3, #4
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067b8:	2302      	movs	r3, #2
 80067ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067bc:	2302      	movs	r3, #2
 80067be:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(MCU_TX_GPIO_Port, &GPIO_InitStruct);
 80067c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067c4:	4619      	mov	r1, r3
 80067c6:	4830      	ldr	r0, [pc, #192]	; (8006888 <HAL_UART_MspInit+0x194>)
 80067c8:	f001 fff8 	bl	80087bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MCU_RX_Pin;
 80067cc:	2308      	movs	r3, #8
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067d0:	2300      	movs	r3, #0
 80067d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d4:	2300      	movs	r3, #0
 80067d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCU_RX_GPIO_Port, &GPIO_InitStruct);
 80067d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067dc:	4619      	mov	r1, r3
 80067de:	482a      	ldr	r0, [pc, #168]	; (8006888 <HAL_UART_MspInit+0x194>)
 80067e0:	f001 ffec 	bl	80087bc <HAL_GPIO_Init>
}
 80067e4:	e048      	b.n	8006878 <HAL_UART_MspInit+0x184>
  else if(uartHandle->Instance==USART3)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a29      	ldr	r2, [pc, #164]	; (8006890 <HAL_UART_MspInit+0x19c>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d143      	bne.n	8006878 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 80067f0:	4b24      	ldr	r3, [pc, #144]	; (8006884 <HAL_UART_MspInit+0x190>)
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	4a23      	ldr	r2, [pc, #140]	; (8006884 <HAL_UART_MspInit+0x190>)
 80067f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067fa:	61d3      	str	r3, [r2, #28]
 80067fc:	4b21      	ldr	r3, [pc, #132]	; (8006884 <HAL_UART_MspInit+0x190>)
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006804:	613b      	str	r3, [r7, #16]
 8006806:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006808:	4b1e      	ldr	r3, [pc, #120]	; (8006884 <HAL_UART_MspInit+0x190>)
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	4a1d      	ldr	r2, [pc, #116]	; (8006884 <HAL_UART_MspInit+0x190>)
 800680e:	f043 0310 	orr.w	r3, r3, #16
 8006812:	6193      	str	r3, [r2, #24]
 8006814:	4b1b      	ldr	r3, [pc, #108]	; (8006884 <HAL_UART_MspInit+0x190>)
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RS485_TX_Pin;
 8006820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006824:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006826:	2302      	movs	r3, #2
 8006828:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800682a:	2303      	movs	r3, #3
 800682c:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 800682e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006832:	4619      	mov	r1, r3
 8006834:	4817      	ldr	r0, [pc, #92]	; (8006894 <HAL_UART_MspInit+0x1a0>)
 8006836:	f001 ffc1 	bl	80087bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX_Pin;
 800683a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800683e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006840:	2300      	movs	r3, #0
 8006842:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006844:	2300      	movs	r3, #0
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RS485_RX_GPIO_Port, &GPIO_InitStruct);
 8006848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800684c:	4619      	mov	r1, r3
 800684e:	4811      	ldr	r0, [pc, #68]	; (8006894 <HAL_UART_MspInit+0x1a0>)
 8006850:	f001 ffb4 	bl	80087bc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8006854:	4b10      	ldr	r3, [pc, #64]	; (8006898 <HAL_UART_MspInit+0x1a4>)
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	637b      	str	r3, [r7, #52]	; 0x34
 800685a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006860:	637b      	str	r3, [r7, #52]	; 0x34
 8006862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006864:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8006868:	637b      	str	r3, [r7, #52]	; 0x34
 800686a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686c:	f043 0310 	orr.w	r3, r3, #16
 8006870:	637b      	str	r3, [r7, #52]	; 0x34
 8006872:	4a09      	ldr	r2, [pc, #36]	; (8006898 <HAL_UART_MspInit+0x1a4>)
 8006874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006876:	6053      	str	r3, [r2, #4]
}
 8006878:	bf00      	nop
 800687a:	3738      	adds	r7, #56	; 0x38
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	40013800 	.word	0x40013800
 8006884:	40021000 	.word	0x40021000
 8006888:	40010800 	.word	0x40010800
 800688c:	40004400 	.word	0x40004400
 8006890:	40004800 	.word	0x40004800
 8006894:	40011000 	.word	0x40011000
 8006898:	40010000 	.word	0x40010000

0800689c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800689c:	f7ff fd3e 	bl	800631c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80068a0:	480b      	ldr	r0, [pc, #44]	; (80068d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80068a2:	490c      	ldr	r1, [pc, #48]	; (80068d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80068a4:	4a0c      	ldr	r2, [pc, #48]	; (80068d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80068a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068a8:	e002      	b.n	80068b0 <LoopCopyDataInit>

080068aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068ae:	3304      	adds	r3, #4

080068b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068b4:	d3f9      	bcc.n	80068aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068b6:	4a09      	ldr	r2, [pc, #36]	; (80068dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80068b8:	4c09      	ldr	r4, [pc, #36]	; (80068e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80068ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068bc:	e001      	b.n	80068c2 <LoopFillZerobss>

080068be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068c0:	3204      	adds	r2, #4

080068c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068c4:	d3fb      	bcc.n	80068be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80068c6:	f005 fdfd 	bl	800c4c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80068ca:	f7fe f895 	bl	80049f8 <main>
  bx lr
 80068ce:	4770      	bx	lr
  ldr r0, =_sdata
 80068d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068d4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80068d8:	0800dd08 	.word	0x0800dd08
  ldr r2, =_sbss
 80068dc:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80068e0:	200015b8 	.word	0x200015b8

080068e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80068e4:	e7fe      	b.n	80068e4 <ADC1_2_IRQHandler>
	...

080068e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80068ec:	4b08      	ldr	r3, [pc, #32]	; (8006910 <HAL_Init+0x28>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a07      	ldr	r2, [pc, #28]	; (8006910 <HAL_Init+0x28>)
 80068f2:	f043 0310 	orr.w	r3, r3, #16
 80068f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80068f8:	2003      	movs	r0, #3
 80068fa:	f001 fa7b 	bl	8007df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80068fe:	2000      	movs	r0, #0
 8006900:	f000 f808 	bl	8006914 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006904:	f7ff fbc6 	bl	8006094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	40022000 	.word	0x40022000

08006914 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800691c:	4b12      	ldr	r3, [pc, #72]	; (8006968 <HAL_InitTick+0x54>)
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	4b12      	ldr	r3, [pc, #72]	; (800696c <HAL_InitTick+0x58>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	4619      	mov	r1, r3
 8006926:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800692a:	fbb3 f3f1 	udiv	r3, r3, r1
 800692e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006932:	4618      	mov	r0, r3
 8006934:	f001 fa93 	bl	8007e5e <HAL_SYSTICK_Config>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e00e      	b.n	8006960 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b0f      	cmp	r3, #15
 8006946:	d80a      	bhi.n	800695e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006948:	2200      	movs	r2, #0
 800694a:	6879      	ldr	r1, [r7, #4]
 800694c:	f04f 30ff 	mov.w	r0, #4294967295
 8006950:	f001 fa5b 	bl	8007e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006954:	4a06      	ldr	r2, [pc, #24]	; (8006970 <HAL_InitTick+0x5c>)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	e000      	b.n	8006960 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
}
 8006960:	4618      	mov	r0, r3
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	2000002c 	.word	0x2000002c
 800696c:	20000034 	.word	0x20000034
 8006970:	20000030 	.word	0x20000030

08006974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006974:	b480      	push	{r7}
 8006976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006978:	4b05      	ldr	r3, [pc, #20]	; (8006990 <HAL_IncTick+0x1c>)
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	4b05      	ldr	r3, [pc, #20]	; (8006994 <HAL_IncTick+0x20>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4413      	add	r3, r2
 8006984:	4a03      	ldr	r2, [pc, #12]	; (8006994 <HAL_IncTick+0x20>)
 8006986:	6013      	str	r3, [r2, #0]
}
 8006988:	bf00      	nop
 800698a:	46bd      	mov	sp, r7
 800698c:	bc80      	pop	{r7}
 800698e:	4770      	bx	lr
 8006990:	20000034 	.word	0x20000034
 8006994:	20001590 	.word	0x20001590

08006998 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006998:	b480      	push	{r7}
 800699a:	af00      	add	r7, sp, #0
  return uwTick;
 800699c:	4b02      	ldr	r3, [pc, #8]	; (80069a8 <HAL_GetTick+0x10>)
 800699e:	681b      	ldr	r3, [r3, #0]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bc80      	pop	{r7}
 80069a6:	4770      	bx	lr
 80069a8:	20001590 	.word	0x20001590

080069ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069b4:	f7ff fff0 	bl	8006998 <HAL_GetTick>
 80069b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c4:	d005      	beq.n	80069d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069c6:	4b0a      	ldr	r3, [pc, #40]	; (80069f0 <HAL_Delay+0x44>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80069d2:	bf00      	nop
 80069d4:	f7ff ffe0 	bl	8006998 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d8f7      	bhi.n	80069d4 <HAL_Delay+0x28>
  {
  }
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000034 	.word	0x20000034

080069f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e0be      	b.n	8006b94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d109      	bne.n	8006a38 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7fd f9d4 	bl	8003de0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 faff 	bl	800703c <ADC_ConversionStop_Disable>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a46:	f003 0310 	and.w	r3, r3, #16
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f040 8099 	bne.w	8006b82 <HAL_ADC_Init+0x18e>
 8006a50:	7dfb      	ldrb	r3, [r7, #23]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f040 8095 	bne.w	8006b82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a60:	f023 0302 	bic.w	r3, r3, #2
 8006a64:	f043 0202 	orr.w	r2, r3, #2
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006a74:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	7b1b      	ldrb	r3, [r3, #12]
 8006a7a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8006a7c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8c:	d003      	beq.n	8006a96 <HAL_ADC_Init+0xa2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d102      	bne.n	8006a9c <HAL_ADC_Init+0xa8>
 8006a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a9a:	e000      	b.n	8006a9e <HAL_ADC_Init+0xaa>
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	7d1b      	ldrb	r3, [r3, #20]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d119      	bne.n	8006ae0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	7b1b      	ldrb	r3, [r3, #12]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d109      	bne.n	8006ac8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	035a      	lsls	r2, r3, #13
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	e00b      	b.n	8006ae0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	f043 0220 	orr.w	r2, r3, #32
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad8:	f043 0201 	orr.w	r2, r3, #1
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689a      	ldr	r2, [r3, #8]
 8006afa:	4b28      	ldr	r3, [pc, #160]	; (8006b9c <HAL_ADC_Init+0x1a8>)
 8006afc:	4013      	ands	r3, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6812      	ldr	r2, [r2, #0]
 8006b02:	68b9      	ldr	r1, [r7, #8]
 8006b04:	430b      	orrs	r3, r1
 8006b06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b10:	d003      	beq.n	8006b1a <HAL_ADC_Init+0x126>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d104      	bne.n	8006b24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	051b      	lsls	r3, r3, #20
 8006b22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689a      	ldr	r2, [r3, #8]
 8006b3e:	4b18      	ldr	r3, [pc, #96]	; (8006ba0 <HAL_ADC_Init+0x1ac>)
 8006b40:	4013      	ands	r3, r2
 8006b42:	68ba      	ldr	r2, [r7, #8]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d10b      	bne.n	8006b60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	f023 0303 	bic.w	r3, r3, #3
 8006b56:	f043 0201 	orr.w	r2, r3, #1
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006b5e:	e018      	b.n	8006b92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b64:	f023 0312 	bic.w	r3, r3, #18
 8006b68:	f043 0210 	orr.w	r2, r3, #16
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	f043 0201 	orr.w	r2, r3, #1
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8006b80:	e007      	b.n	8006b92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b86:	f043 0210 	orr.w	r2, r3, #16
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3718      	adds	r7, #24
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	ffe1f7fd 	.word	0xffe1f7fd
 8006ba0:	ff1f0efe 	.word	0xff1f0efe

08006ba4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a64      	ldr	r2, [pc, #400]	; (8006d4c <HAL_ADC_Start_DMA+0x1a8>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d004      	beq.n	8006bc8 <HAL_ADC_Start_DMA+0x24>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a63      	ldr	r2, [pc, #396]	; (8006d50 <HAL_ADC_Start_DMA+0x1ac>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d106      	bne.n	8006bd6 <HAL_ADC_Start_DMA+0x32>
 8006bc8:	4b60      	ldr	r3, [pc, #384]	; (8006d4c <HAL_ADC_Start_DMA+0x1a8>)
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f040 80b3 	bne.w	8006d3c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d101      	bne.n	8006be4 <HAL_ADC_Start_DMA+0x40>
 8006be0:	2302      	movs	r3, #2
 8006be2:	e0ae      	b.n	8006d42 <HAL_ADC_Start_DMA+0x19e>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f9cb 	bl	8006f88 <ADC_Enable>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8006bf6:	7dfb      	ldrb	r3, [r7, #23]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f040 809a 	bne.w	8006d32 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c06:	f023 0301 	bic.w	r3, r3, #1
 8006c0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a4e      	ldr	r2, [pc, #312]	; (8006d50 <HAL_ADC_Start_DMA+0x1ac>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d105      	bne.n	8006c28 <HAL_ADC_Start_DMA+0x84>
 8006c1c:	4b4b      	ldr	r3, [pc, #300]	; (8006d4c <HAL_ADC_Start_DMA+0x1a8>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d115      	bne.n	8006c54 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d026      	beq.n	8006c90 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006c52:	e01d      	b.n	8006c90 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a39      	ldr	r2, [pc, #228]	; (8006d4c <HAL_ADC_Start_DMA+0x1a8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d004      	beq.n	8006c74 <HAL_ADC_Start_DMA+0xd0>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a38      	ldr	r2, [pc, #224]	; (8006d50 <HAL_ADC_Start_DMA+0x1ac>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d10d      	bne.n	8006c90 <HAL_ADC_Start_DMA+0xec>
 8006c74:	4b35      	ldr	r3, [pc, #212]	; (8006d4c <HAL_ADC_Start_DMA+0x1a8>)
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d007      	beq.n	8006c90 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006c88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d006      	beq.n	8006caa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca0:	f023 0206 	bic.w	r2, r3, #6
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	62da      	str	r2, [r3, #44]	; 0x2c
 8006ca8:	e002      	b.n	8006cb0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	4a25      	ldr	r2, [pc, #148]	; (8006d54 <HAL_ADC_Start_DMA+0x1b0>)
 8006cbe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	4a24      	ldr	r2, [pc, #144]	; (8006d58 <HAL_ADC_Start_DMA+0x1b4>)
 8006cc6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	4a23      	ldr	r2, [pc, #140]	; (8006d5c <HAL_ADC_Start_DMA+0x1b8>)
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f06f 0202 	mvn.w	r2, #2
 8006cd8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ce8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6a18      	ldr	r0, [r3, #32]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	334c      	adds	r3, #76	; 0x4c
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f001 f917 	bl	8007f2c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006d08:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8006d0c:	d108      	bne.n	8006d20 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689a      	ldr	r2, [r3, #8]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8006d1c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8006d1e:	e00f      	b.n	8006d40 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006d2e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8006d30:	e006      	b.n	8006d40 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8006d3a:	e001      	b.n	8006d40 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	40012400 	.word	0x40012400
 8006d50:	40012800 	.word	0x40012800
 8006d54:	080070bf 	.word	0x080070bf
 8006d58:	0800713b 	.word	0x0800713b
 8006d5c:	08007157 	.word	0x08007157

08006d60 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bc80      	pop	{r7}
 8006d70:	4770      	bx	lr

08006d72 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006d7a:	bf00      	nop
 8006d7c:	370c      	adds	r7, #12
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bc80      	pop	{r7}
 8006d82:	4770      	bx	lr

08006d84 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006d8c:	bf00      	nop
 8006d8e:	370c      	adds	r7, #12
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bc80      	pop	{r7}
 8006d94:	4770      	bx	lr
	...

08006d98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d101      	bne.n	8006db8 <HAL_ADC_ConfigChannel+0x20>
 8006db4:	2302      	movs	r3, #2
 8006db6:	e0dc      	b.n	8006f72 <HAL_ADC_ConfigChannel+0x1da>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	2b06      	cmp	r3, #6
 8006dc6:	d81c      	bhi.n	8006e02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	3b05      	subs	r3, #5
 8006dda:	221f      	movs	r2, #31
 8006ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8006de0:	43db      	mvns	r3, r3
 8006de2:	4019      	ands	r1, r3
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	3b05      	subs	r3, #5
 8006df4:	fa00 f203 	lsl.w	r2, r0, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	635a      	str	r2, [r3, #52]	; 0x34
 8006e00:	e03c      	b.n	8006e7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2b0c      	cmp	r3, #12
 8006e08:	d81c      	bhi.n	8006e44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	3b23      	subs	r3, #35	; 0x23
 8006e1c:	221f      	movs	r2, #31
 8006e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e22:	43db      	mvns	r3, r3
 8006e24:	4019      	ands	r1, r3
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4413      	add	r3, r2
 8006e34:	3b23      	subs	r3, #35	; 0x23
 8006e36:	fa00 f203 	lsl.w	r2, r0, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	631a      	str	r2, [r3, #48]	; 0x30
 8006e42:	e01b      	b.n	8006e7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	685a      	ldr	r2, [r3, #4]
 8006e4e:	4613      	mov	r3, r2
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	3b41      	subs	r3, #65	; 0x41
 8006e56:	221f      	movs	r2, #31
 8006e58:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5c:	43db      	mvns	r3, r3
 8006e5e:	4019      	ands	r1, r3
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	6818      	ldr	r0, [r3, #0]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	3b41      	subs	r3, #65	; 0x41
 8006e70:	fa00 f203 	lsl.w	r2, r0, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b09      	cmp	r3, #9
 8006e82:	d91c      	bls.n	8006ebe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68d9      	ldr	r1, [r3, #12]
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	4613      	mov	r3, r2
 8006e90:	005b      	lsls	r3, r3, #1
 8006e92:	4413      	add	r3, r2
 8006e94:	3b1e      	subs	r3, #30
 8006e96:	2207      	movs	r2, #7
 8006e98:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	4019      	ands	r1, r3
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	6898      	ldr	r0, [r3, #8]
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	4413      	add	r3, r2
 8006eae:	3b1e      	subs	r3, #30
 8006eb0:	fa00 f203 	lsl.w	r2, r0, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	60da      	str	r2, [r3, #12]
 8006ebc:	e019      	b.n	8006ef2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	6919      	ldr	r1, [r3, #16]
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	4413      	add	r3, r2
 8006ece:	2207      	movs	r2, #7
 8006ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	4019      	ands	r1, r3
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	6898      	ldr	r0, [r3, #8]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	4613      	mov	r3, r2
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	4413      	add	r3, r2
 8006ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2b10      	cmp	r3, #16
 8006ef8:	d003      	beq.n	8006f02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8006efe:	2b11      	cmp	r3, #17
 8006f00:	d132      	bne.n	8006f68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a1d      	ldr	r2, [pc, #116]	; (8006f7c <HAL_ADC_ConfigChannel+0x1e4>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d125      	bne.n	8006f58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d126      	bne.n	8006f68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006f28:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d11a      	bne.n	8006f68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006f32:	4b13      	ldr	r3, [pc, #76]	; (8006f80 <HAL_ADC_ConfigChannel+0x1e8>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a13      	ldr	r2, [pc, #76]	; (8006f84 <HAL_ADC_ConfigChannel+0x1ec>)
 8006f38:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3c:	0c9a      	lsrs	r2, r3, #18
 8006f3e:	4613      	mov	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	4413      	add	r3, r2
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006f48:	e002      	b.n	8006f50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1f9      	bne.n	8006f4a <HAL_ADC_ConfigChannel+0x1b2>
 8006f56:	e007      	b.n	8006f68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	f043 0220 	orr.w	r2, r3, #32
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bc80      	pop	{r7}
 8006f7a:	4770      	bx	lr
 8006f7c:	40012400 	.word	0x40012400
 8006f80:	2000002c 	.word	0x2000002c
 8006f84:	431bde83 	.word	0x431bde83

08006f88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d040      	beq.n	8007028 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006fb6:	4b1f      	ldr	r3, [pc, #124]	; (8007034 <ADC_Enable+0xac>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a1f      	ldr	r2, [pc, #124]	; (8007038 <ADC_Enable+0xb0>)
 8006fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc0:	0c9b      	lsrs	r3, r3, #18
 8006fc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006fc4:	e002      	b.n	8006fcc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d1f9      	bne.n	8006fc6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006fd2:	f7ff fce1 	bl	8006998 <HAL_GetTick>
 8006fd6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8006fd8:	e01f      	b.n	800701a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006fda:	f7ff fcdd 	bl	8006998 <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d918      	bls.n	800701a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d011      	beq.n	800701a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffa:	f043 0210 	orr.w	r2, r3, #16
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	f043 0201 	orr.w	r2, r3, #1
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e007      	b.n	800702a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b01      	cmp	r3, #1
 8007026:	d1d8      	bne.n	8006fda <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	2000002c 	.word	0x2000002c
 8007038:	431bde83 	.word	0x431bde83

0800703c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	689b      	ldr	r3, [r3, #8]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b01      	cmp	r3, #1
 8007054:	d12e      	bne.n	80070b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0201 	bic.w	r2, r2, #1
 8007064:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007066:	f7ff fc97 	bl	8006998 <HAL_GetTick>
 800706a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800706c:	e01b      	b.n	80070a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800706e:	f7ff fc93 	bl	8006998 <HAL_GetTick>
 8007072:	4602      	mov	r2, r0
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	1ad3      	subs	r3, r2, r3
 8007078:	2b02      	cmp	r3, #2
 800707a:	d914      	bls.n	80070a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b01      	cmp	r3, #1
 8007088:	d10d      	bne.n	80070a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708e:	f043 0210 	orr.w	r2, r3, #16
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	f043 0201 	orr.w	r2, r3, #1
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e007      	b.n	80070b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 0301 	and.w	r3, r3, #1
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d0dc      	beq.n	800706e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3710      	adds	r7, #16
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d127      	bne.n	8007128 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80070ee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80070f2:	d115      	bne.n	8007120 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d111      	bne.n	8007120 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007100:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d105      	bne.n	8007120 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007118:	f043 0201 	orr.w	r2, r3, #1
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f7ff fe1d 	bl	8006d60 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8007126:	e004      	b.n	8007132 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6a1b      	ldr	r3, [r3, #32]
 800712c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	4798      	blx	r3
}
 8007132:	bf00      	nop
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f7ff fe12 	bl	8006d72 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800714e:	bf00      	nop
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	f043 0204 	orr.w	r2, r3, #4
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f7ff fe01 	bl	8006d84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007182:	bf00      	nop
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e0ed      	b.n	8007378 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d102      	bne.n	80071ae <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7fd fa65 	bl	8004678 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 0201 	orr.w	r2, r2, #1
 80071bc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071be:	f7ff fbeb 	bl	8006998 <HAL_GetTick>
 80071c2:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80071c4:	e012      	b.n	80071ec <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80071c6:	f7ff fbe7 	bl	8006998 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	2b0a      	cmp	r3, #10
 80071d2:	d90b      	bls.n	80071ec <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2205      	movs	r2, #5
 80071e4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0c5      	b.n	8007378 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d0e5      	beq.n	80071c6 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f022 0202 	bic.w	r2, r2, #2
 8007208:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800720a:	f7ff fbc5 	bl	8006998 <HAL_GetTick>
 800720e:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007210:	e012      	b.n	8007238 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007212:	f7ff fbc1 	bl	8006998 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b0a      	cmp	r3, #10
 800721e:	d90b      	bls.n	8007238 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007224:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2205      	movs	r2, #5
 8007230:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e09f      	b.n	8007378 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d1e5      	bne.n	8007212 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	7e1b      	ldrb	r3, [r3, #24]
 800724a:	2b01      	cmp	r3, #1
 800724c:	d108      	bne.n	8007260 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e007      	b.n	8007270 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800726e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7e5b      	ldrb	r3, [r3, #25]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d108      	bne.n	800728a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007286:	601a      	str	r2, [r3, #0]
 8007288:	e007      	b.n	800729a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007298:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	7e9b      	ldrb	r3, [r3, #26]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d108      	bne.n	80072b4 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0220 	orr.w	r2, r2, #32
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	e007      	b.n	80072c4 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 0220 	bic.w	r2, r2, #32
 80072c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	7edb      	ldrb	r3, [r3, #27]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d108      	bne.n	80072de <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f022 0210 	bic.w	r2, r2, #16
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	e007      	b.n	80072ee <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 0210 	orr.w	r2, r2, #16
 80072ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	7f1b      	ldrb	r3, [r3, #28]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d108      	bne.n	8007308 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f042 0208 	orr.w	r2, r2, #8
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	e007      	b.n	8007318 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0208 	bic.w	r2, r2, #8
 8007316:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	7f5b      	ldrb	r3, [r3, #29]
 800731c:	2b01      	cmp	r3, #1
 800731e:	d108      	bne.n	8007332 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0204 	orr.w	r2, r2, #4
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	e007      	b.n	8007342 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0204 	bic.w	r2, r2, #4
 8007340:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	ea42 0103 	orr.w	r1, r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	1e5a      	subs	r2, r3, #1
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	430a      	orrs	r2, r1
 8007366:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007376:	2300      	movs	r3, #0
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007396:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007398:	7cfb      	ldrb	r3, [r7, #19]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d003      	beq.n	80073a6 <HAL_CAN_ConfigFilter+0x26>
 800739e:	7cfb      	ldrb	r3, [r7, #19]
 80073a0:	2b02      	cmp	r3, #2
 80073a2:	f040 80aa 	bne.w	80074fa <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80073ac:	f043 0201 	orr.w	r2, r3, #1
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	f003 031f 	and.w	r3, r3, #31
 80073be:	2201      	movs	r2, #1
 80073c0:	fa02 f303 	lsl.w	r3, r2, r3
 80073c4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	43db      	mvns	r3, r3
 80073d0:	401a      	ands	r2, r3
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	69db      	ldr	r3, [r3, #28]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d123      	bne.n	8007428 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	43db      	mvns	r3, r3
 80073ea:	401a      	ands	r2, r3
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007402:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	3248      	adds	r2, #72	; 0x48
 8007408:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800741c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800741e:	6979      	ldr	r1, [r7, #20]
 8007420:	3348      	adds	r3, #72	; 0x48
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	440b      	add	r3, r1
 8007426:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d122      	bne.n	8007476 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	431a      	orrs	r2, r3
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800744c:	683a      	ldr	r2, [r7, #0]
 800744e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007450:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	3248      	adds	r2, #72	; 0x48
 8007456:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800746a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800746c:	6979      	ldr	r1, [r7, #20]
 800746e:	3348      	adds	r3, #72	; 0x48
 8007470:	00db      	lsls	r3, r3, #3
 8007472:	440b      	add	r3, r1
 8007474:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d109      	bne.n	8007492 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	43db      	mvns	r3, r3
 8007488:	401a      	ands	r2, r3
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007490:	e007      	b.n	80074a2 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	431a      	orrs	r2, r3
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d109      	bne.n	80074be <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	43db      	mvns	r3, r3
 80074b4:	401a      	ands	r2, r3
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80074bc:	e007      	b.n	80074ce <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	431a      	orrs	r2, r3
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d107      	bne.n	80074e6 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	431a      	orrs	r2, r3
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80074ec:	f023 0201 	bic.w	r2, r3, #1
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80074f6:	2300      	movs	r3, #0
 80074f8:	e006      	b.n	8007508 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
  }
}
 8007508:	4618      	mov	r0, r3
 800750a:	371c      	adds	r7, #28
 800750c:	46bd      	mov	sp, r7
 800750e:	bc80      	pop	{r7}
 8007510:	4770      	bx	lr

08007512 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b01      	cmp	r3, #1
 8007524:	d12e      	bne.n	8007584 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2202      	movs	r2, #2
 800752a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681a      	ldr	r2, [r3, #0]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0201 	bic.w	r2, r2, #1
 800753c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800753e:	f7ff fa2b 	bl	8006998 <HAL_GetTick>
 8007542:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007544:	e012      	b.n	800756c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007546:	f7ff fa27 	bl	8006998 <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	1ad3      	subs	r3, r2, r3
 8007550:	2b0a      	cmp	r3, #10
 8007552:	d90b      	bls.n	800756c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007558:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2205      	movs	r2, #5
 8007564:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007568:	2301      	movs	r3, #1
 800756a:	e012      	b.n	8007592 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e5      	bne.n	8007546 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	e006      	b.n	8007592 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007588:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
  }
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800759a:	b480      	push	{r7}
 800759c:	b087      	sub	sp, #28
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	607a      	str	r2, [r7, #4]
 80075a6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075ae:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d003      	beq.n	80075be <HAL_CAN_GetRxMessage+0x24>
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	f040 8103 	bne.w	80077c4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10e      	bne.n	80075e2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f003 0303 	and.w	r3, r3, #3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d116      	bne.n	8007600 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e0f7      	b.n	80077d2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	f003 0303 	and.w	r3, r3, #3
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d107      	bne.n	8007600 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	e0e8      	b.n	80077d2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	331b      	adds	r3, #27
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	4413      	add	r3, r2
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0204 	and.w	r2, r3, #4
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d10c      	bne.n	8007638 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	331b      	adds	r3, #27
 8007626:	011b      	lsls	r3, r3, #4
 8007628:	4413      	add	r3, r2
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	0d5b      	lsrs	r3, r3, #21
 800762e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	e00b      	b.n	8007650 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	331b      	adds	r3, #27
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	4413      	add	r3, r2
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	08db      	lsrs	r3, r3, #3
 8007648:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	331b      	adds	r3, #27
 8007658:	011b      	lsls	r3, r3, #4
 800765a:	4413      	add	r3, r2
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0202 	and.w	r2, r3, #2
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	331b      	adds	r3, #27
 800766e:	011b      	lsls	r3, r3, #4
 8007670:	4413      	add	r3, r2
 8007672:	3304      	adds	r3, #4
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0308 	and.w	r3, r3, #8
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2208      	movs	r2, #8
 8007682:	611a      	str	r2, [r3, #16]
 8007684:	e00b      	b.n	800769e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	331b      	adds	r3, #27
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	4413      	add	r3, r2
 8007692:	3304      	adds	r3, #4
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 020f 	and.w	r2, r3, #15
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	331b      	adds	r3, #27
 80076a6:	011b      	lsls	r3, r3, #4
 80076a8:	4413      	add	r3, r2
 80076aa:	3304      	adds	r3, #4
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	0a1b      	lsrs	r3, r3, #8
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	331b      	adds	r3, #27
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	4413      	add	r3, r2
 80076c2:	3304      	adds	r3, #4
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	0c1b      	lsrs	r3, r3, #16
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	4413      	add	r3, r2
 80076d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	4413      	add	r3, r2
 80076ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	0a1a      	lsrs	r2, r3, #8
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	3301      	adds	r3, #1
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	4413      	add	r3, r2
 8007708:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	0c1a      	lsrs	r2, r3, #16
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	3302      	adds	r3, #2
 8007714:	b2d2      	uxtb	r2, r2
 8007716:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	011b      	lsls	r3, r3, #4
 8007720:	4413      	add	r3, r2
 8007722:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	0e1a      	lsrs	r2, r3, #24
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	3303      	adds	r3, #3
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	011b      	lsls	r3, r3, #4
 800773a:	4413      	add	r3, r2
 800773c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	3304      	adds	r3, #4
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	011b      	lsls	r3, r3, #4
 8007752:	4413      	add	r3, r2
 8007754:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	0a1a      	lsrs	r2, r3, #8
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	3305      	adds	r3, #5
 8007760:	b2d2      	uxtb	r2, r2
 8007762:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	4413      	add	r3, r2
 800776e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	0c1a      	lsrs	r2, r3, #16
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	3306      	adds	r3, #6
 800777a:	b2d2      	uxtb	r2, r2
 800777c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	011b      	lsls	r3, r3, #4
 8007786:	4413      	add	r3, r2
 8007788:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	0e1a      	lsrs	r2, r3, #24
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	3307      	adds	r3, #7
 8007794:	b2d2      	uxtb	r2, r2
 8007796:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d108      	bne.n	80077b0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0220 	orr.w	r2, r2, #32
 80077ac:	60da      	str	r2, [r3, #12]
 80077ae:	e007      	b.n	80077c0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691a      	ldr	r2, [r3, #16]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0220 	orr.w	r2, r2, #32
 80077be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	e006      	b.n	80077d2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
  }
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	371c      	adds	r7, #28
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bc80      	pop	{r7}
 80077da:	4770      	bx	lr

080077dc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077ec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d002      	beq.n	80077fa <HAL_CAN_ActivateNotification+0x1e>
 80077f4:	7bfb      	ldrb	r3, [r7, #15]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d109      	bne.n	800780e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6959      	ldr	r1, [r3, #20]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	683a      	ldr	r2, [r7, #0]
 8007806:	430a      	orrs	r2, r1
 8007808:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	e006      	b.n	800781c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
  }
}
 800781c:	4618      	mov	r0, r3
 800781e:	3714      	adds	r7, #20
 8007820:	46bd      	mov	sp, r7
 8007822:	bc80      	pop	{r7}
 8007824:	4770      	bx	lr

08007826 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b08a      	sub	sp, #40	; 0x28
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800782e:	2300      	movs	r3, #0
 8007830:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b00      	cmp	r3, #0
 800786a:	d07c      	beq.n	8007966 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	f003 0301 	and.w	r3, r3, #1
 8007872:	2b00      	cmp	r3, #0
 8007874:	d023      	beq.n	80078be <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2201      	movs	r2, #1
 800787c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	f003 0302 	and.w	r3, r3, #2
 8007884:	2b00      	cmp	r3, #0
 8007886:	d003      	beq.n	8007890 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f983 	bl	8007b94 <HAL_CAN_TxMailbox0CompleteCallback>
 800788e:	e016      	b.n	80078be <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	2b00      	cmp	r3, #0
 8007898:	d004      	beq.n	80078a4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24
 80078a2:	e00c      	b.n	80078be <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d004      	beq.n	80078b8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80078b4:	627b      	str	r3, [r7, #36]	; 0x24
 80078b6:	e002      	b.n	80078be <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f986 	bl	8007bca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d024      	beq.n	8007912 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80078d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 f962 	bl	8007ba6 <HAL_CAN_TxMailbox1CompleteCallback>
 80078e2:	e016      	b.n	8007912 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d004      	beq.n	80078f8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80078ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
 80078f6:	e00c      	b.n	8007912 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d004      	beq.n	800790c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007908:	627b      	str	r3, [r7, #36]	; 0x24
 800790a:	e002      	b.n	8007912 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f965 	bl	8007bdc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d024      	beq.n	8007966 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007924:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d003      	beq.n	8007938 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 f941 	bl	8007bb8 <HAL_CAN_TxMailbox2CompleteCallback>
 8007936:	e016      	b.n	8007966 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d004      	beq.n	800794c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007944:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
 800794a:	e00c      	b.n	8007966 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d004      	beq.n	8007960 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800795c:	627b      	str	r3, [r7, #36]	; 0x24
 800795e:	e002      	b.n	8007966 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f944 	bl	8007bee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	f003 0308 	and.w	r3, r3, #8
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00c      	beq.n	800798a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	f003 0310 	and.w	r3, r3, #16
 8007976:	2b00      	cmp	r3, #0
 8007978:	d007      	beq.n	800798a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800797a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007980:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2210      	movs	r2, #16
 8007988:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00b      	beq.n	80079ac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f003 0308 	and.w	r3, r3, #8
 800799a:	2b00      	cmp	r3, #0
 800799c:	d006      	beq.n	80079ac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2208      	movs	r2, #8
 80079a4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 f92a 	bl	8007c00 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d009      	beq.n	80079ca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f003 0303 	and.w	r3, r3, #3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d002      	beq.n	80079ca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f7fd fa57 	bl	8004e78 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00c      	beq.n	80079ee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f003 0310 	and.w	r3, r3, #16
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2210      	movs	r2, #16
 80079ec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	f003 0320 	and.w	r3, r3, #32
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00b      	beq.n	8007a10 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80079f8:	693b      	ldr	r3, [r7, #16]
 80079fa:	f003 0308 	and.w	r3, r3, #8
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d006      	beq.n	8007a10 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2208      	movs	r2, #8
 8007a08:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f90a 	bl	8007c24 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	f003 0310 	and.w	r3, r3, #16
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	f003 0303 	and.w	r3, r3, #3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 f8f2 	bl	8007c12 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00b      	beq.n	8007a50 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f003 0310 	and.w	r3, r3, #16
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d006      	beq.n	8007a50 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2210      	movs	r2, #16
 8007a48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 f8f3 	bl	8007c36 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	f003 0308 	and.w	r3, r3, #8
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d006      	beq.n	8007a72 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2208      	movs	r2, #8
 8007a6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f8eb 	bl	8007c48 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d07b      	beq.n	8007b74 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	f003 0304 	and.w	r3, r3, #4
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d072      	beq.n	8007b6c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007a86:	6a3b      	ldr	r3, [r7, #32]
 8007a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d008      	beq.n	8007aa2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	f043 0301 	orr.w	r3, r3, #1
 8007aa0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007aa2:	6a3b      	ldr	r3, [r7, #32]
 8007aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d008      	beq.n	8007abe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab8:	f043 0302 	orr.w	r3, r3, #2
 8007abc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007abe:	6a3b      	ldr	r3, [r7, #32]
 8007ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d008      	beq.n	8007ada <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	f043 0304 	orr.w	r3, r3, #4
 8007ad8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d043      	beq.n	8007b6c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d03e      	beq.n	8007b6c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007af4:	2b60      	cmp	r3, #96	; 0x60
 8007af6:	d02b      	beq.n	8007b50 <HAL_CAN_IRQHandler+0x32a>
 8007af8:	2b60      	cmp	r3, #96	; 0x60
 8007afa:	d82e      	bhi.n	8007b5a <HAL_CAN_IRQHandler+0x334>
 8007afc:	2b50      	cmp	r3, #80	; 0x50
 8007afe:	d022      	beq.n	8007b46 <HAL_CAN_IRQHandler+0x320>
 8007b00:	2b50      	cmp	r3, #80	; 0x50
 8007b02:	d82a      	bhi.n	8007b5a <HAL_CAN_IRQHandler+0x334>
 8007b04:	2b40      	cmp	r3, #64	; 0x40
 8007b06:	d019      	beq.n	8007b3c <HAL_CAN_IRQHandler+0x316>
 8007b08:	2b40      	cmp	r3, #64	; 0x40
 8007b0a:	d826      	bhi.n	8007b5a <HAL_CAN_IRQHandler+0x334>
 8007b0c:	2b30      	cmp	r3, #48	; 0x30
 8007b0e:	d010      	beq.n	8007b32 <HAL_CAN_IRQHandler+0x30c>
 8007b10:	2b30      	cmp	r3, #48	; 0x30
 8007b12:	d822      	bhi.n	8007b5a <HAL_CAN_IRQHandler+0x334>
 8007b14:	2b10      	cmp	r3, #16
 8007b16:	d002      	beq.n	8007b1e <HAL_CAN_IRQHandler+0x2f8>
 8007b18:	2b20      	cmp	r3, #32
 8007b1a:	d005      	beq.n	8007b28 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007b1c:	e01d      	b.n	8007b5a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	f043 0308 	orr.w	r3, r3, #8
 8007b24:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007b26:	e019      	b.n	8007b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	f043 0310 	orr.w	r3, r3, #16
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007b30:	e014      	b.n	8007b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	f043 0320 	orr.w	r3, r3, #32
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007b3a:	e00f      	b.n	8007b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007b44:	e00a      	b.n	8007b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007b4e:	e005      	b.n	8007b5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007b58:	e000      	b.n	8007b5c <HAL_CAN_IRQHandler+0x336>
            break;
 8007b5a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699a      	ldr	r2, [r3, #24]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007b6a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2204      	movs	r2, #4
 8007b72:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d008      	beq.n	8007b8c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b80:	431a      	orrs	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7fd f9de 	bl	8004f48 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007b8c:	bf00      	nop
 8007b8e:	3728      	adds	r7, #40	; 0x28
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007b9c:	bf00      	nop
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bc80      	pop	{r7}
 8007ba4:	4770      	bx	lr

08007ba6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007ba6:	b480      	push	{r7}
 8007ba8:	b083      	sub	sp, #12
 8007baa:	af00      	add	r7, sp, #0
 8007bac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007bae:	bf00      	nop
 8007bb0:	370c      	adds	r7, #12
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bc80      	pop	{r7}
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bc80      	pop	{r7}
 8007bc8:	4770      	bx	lr

08007bca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007bd2:	bf00      	nop
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bc80      	pop	{r7}
 8007bda:	4770      	bx	lr

08007bdc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bc80      	pop	{r7}
 8007bec:	4770      	bx	lr

08007bee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b083      	sub	sp, #12
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bc80      	pop	{r7}
 8007bfe:	4770      	bx	lr

08007c00 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bc80      	pop	{r7}
 8007c10:	4770      	bx	lr

08007c12 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bc80      	pop	{r7}
 8007c22:	4770      	bx	lr

08007c24 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007c2c:	bf00      	nop
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bc80      	pop	{r7}
 8007c34:	4770      	bx	lr

08007c36 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bc80      	pop	{r7}
 8007c46:	4770      	bx	lr

08007c48 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bc80      	pop	{r7}
 8007c58:	4770      	bx	lr
	...

08007c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f003 0307 	and.w	r3, r3, #7
 8007c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007c78:	4013      	ands	r3, r2
 8007c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c8e:	4a04      	ldr	r2, [pc, #16]	; (8007ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	60d3      	str	r3, [r2, #12]
}
 8007c94:	bf00      	nop
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bc80      	pop	{r7}
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	e000ed00 	.word	0xe000ed00

08007ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ca8:	4b04      	ldr	r3, [pc, #16]	; (8007cbc <__NVIC_GetPriorityGrouping+0x18>)
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	0a1b      	lsrs	r3, r3, #8
 8007cae:	f003 0307 	and.w	r3, r3, #7
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bc80      	pop	{r7}
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	e000ed00 	.word	0xe000ed00

08007cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	db0b      	blt.n	8007cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007cd2:	79fb      	ldrb	r3, [r7, #7]
 8007cd4:	f003 021f 	and.w	r2, r3, #31
 8007cd8:	4906      	ldr	r1, [pc, #24]	; (8007cf4 <__NVIC_EnableIRQ+0x34>)
 8007cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cde:	095b      	lsrs	r3, r3, #5
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007cea:	bf00      	nop
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bc80      	pop	{r7}
 8007cf2:	4770      	bx	lr
 8007cf4:	e000e100 	.word	0xe000e100

08007cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	4603      	mov	r3, r0
 8007d00:	6039      	str	r1, [r7, #0]
 8007d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	db0a      	blt.n	8007d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	490c      	ldr	r1, [pc, #48]	; (8007d44 <__NVIC_SetPriority+0x4c>)
 8007d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d16:	0112      	lsls	r2, r2, #4
 8007d18:	b2d2      	uxtb	r2, r2
 8007d1a:	440b      	add	r3, r1
 8007d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007d20:	e00a      	b.n	8007d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	4908      	ldr	r1, [pc, #32]	; (8007d48 <__NVIC_SetPriority+0x50>)
 8007d28:	79fb      	ldrb	r3, [r7, #7]
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	3b04      	subs	r3, #4
 8007d30:	0112      	lsls	r2, r2, #4
 8007d32:	b2d2      	uxtb	r2, r2
 8007d34:	440b      	add	r3, r1
 8007d36:	761a      	strb	r2, [r3, #24]
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bc80      	pop	{r7}
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	e000e100 	.word	0xe000e100
 8007d48:	e000ed00 	.word	0xe000ed00

08007d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b089      	sub	sp, #36	; 0x24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	f1c3 0307 	rsb	r3, r3, #7
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	bf28      	it	cs
 8007d6a:	2304      	movcs	r3, #4
 8007d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	3304      	adds	r3, #4
 8007d72:	2b06      	cmp	r3, #6
 8007d74:	d902      	bls.n	8007d7c <NVIC_EncodePriority+0x30>
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	3b03      	subs	r3, #3
 8007d7a:	e000      	b.n	8007d7e <NVIC_EncodePriority+0x32>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d80:	f04f 32ff 	mov.w	r2, #4294967295
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	fa02 f303 	lsl.w	r3, r2, r3
 8007d8a:	43da      	mvns	r2, r3
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	401a      	ands	r2, r3
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d94:	f04f 31ff 	mov.w	r1, #4294967295
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d9e:	43d9      	mvns	r1, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007da4:	4313      	orrs	r3, r2
         );
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3724      	adds	r7, #36	; 0x24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bc80      	pop	{r7}
 8007dae:	4770      	bx	lr

08007db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007dc0:	d301      	bcc.n	8007dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e00f      	b.n	8007de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007dc6:	4a0a      	ldr	r2, [pc, #40]	; (8007df0 <SysTick_Config+0x40>)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007dce:	210f      	movs	r1, #15
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd4:	f7ff ff90 	bl	8007cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007dd8:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <SysTick_Config+0x40>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007dde:	4b04      	ldr	r3, [pc, #16]	; (8007df0 <SysTick_Config+0x40>)
 8007de0:	2207      	movs	r2, #7
 8007de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	e000e010 	.word	0xe000e010

08007df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff ff2d 	bl	8007c5c <__NVIC_SetPriorityGrouping>
}
 8007e02:	bf00      	nop
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b086      	sub	sp, #24
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	4603      	mov	r3, r0
 8007e12:	60b9      	str	r1, [r7, #8]
 8007e14:	607a      	str	r2, [r7, #4]
 8007e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007e1c:	f7ff ff42 	bl	8007ca4 <__NVIC_GetPriorityGrouping>
 8007e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	6978      	ldr	r0, [r7, #20]
 8007e28:	f7ff ff90 	bl	8007d4c <NVIC_EncodePriority>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e32:	4611      	mov	r1, r2
 8007e34:	4618      	mov	r0, r3
 8007e36:	f7ff ff5f 	bl	8007cf8 <__NVIC_SetPriority>
}
 8007e3a:	bf00      	nop
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	4603      	mov	r3, r0
 8007e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff ff35 	bl	8007cc0 <__NVIC_EnableIRQ>
}
 8007e56:	bf00      	nop
 8007e58:	3708      	adds	r7, #8
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b082      	sub	sp, #8
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff ffa2 	bl	8007db0 <SysTick_Config>
 8007e6c:	4603      	mov	r3, r0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
	...

08007e78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007e80:	2300      	movs	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e043      	b.n	8007f16 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	461a      	mov	r2, r3
 8007e94:	4b22      	ldr	r3, [pc, #136]	; (8007f20 <HAL_DMA_Init+0xa8>)
 8007e96:	4413      	add	r3, r2
 8007e98:	4a22      	ldr	r2, [pc, #136]	; (8007f24 <HAL_DMA_Init+0xac>)
 8007e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e9e:	091b      	lsrs	r3, r3, #4
 8007ea0:	009a      	lsls	r2, r3, #2
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a1f      	ldr	r2, [pc, #124]	; (8007f28 <HAL_DMA_Init+0xb0>)
 8007eaa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2202      	movs	r2, #2
 8007eb0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007ec2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007ec6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8007ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007edc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007ee8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2201      	movs	r2, #1
 8007f08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bc80      	pop	{r7}
 8007f1e:	4770      	bx	lr
 8007f20:	bffdfff8 	.word	0xbffdfff8
 8007f24:	cccccccd 	.word	0xcccccccd
 8007f28:	40020000 	.word	0x40020000

08007f2c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d101      	bne.n	8007f4c <HAL_DMA_Start_IT+0x20>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e04b      	b.n	8007fe4 <HAL_DMA_Start_IT+0xb8>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d13a      	bne.n	8007fd6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0201 	bic.w	r2, r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	68b9      	ldr	r1, [r7, #8]
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 f9eb 	bl	8008360 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d008      	beq.n	8007fa4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 020e 	orr.w	r2, r2, #14
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	e00f      	b.n	8007fc4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0204 	bic.w	r2, r2, #4
 8007fb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681a      	ldr	r2, [r3, #0]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f042 020a 	orr.w	r2, r2, #10
 8007fc2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f042 0201 	orr.w	r2, r2, #1
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e005      	b.n	8007fe2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8007fde:	2302      	movs	r3, #2
 8007fe0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b085      	sub	sp, #20
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b02      	cmp	r3, #2
 8008002:	d008      	beq.n	8008016 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2204      	movs	r2, #4
 8008008:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e020      	b.n	8008058 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f022 020e 	bic.w	r2, r2, #14
 8008024:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0201 	bic.w	r2, r2, #1
 8008034:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803e:	2101      	movs	r1, #1
 8008040:	fa01 f202 	lsl.w	r2, r1, r2
 8008044:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2201      	movs	r2, #1
 800804a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008056:	7bfb      	ldrb	r3, [r7, #15]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	bc80      	pop	{r7}
 8008060:	4770      	bx	lr
	...

08008064 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008064:	b580      	push	{r7, lr}
 8008066:	b084      	sub	sp, #16
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b02      	cmp	r3, #2
 800807a:	d005      	beq.n	8008088 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2204      	movs	r2, #4
 8008080:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	73fb      	strb	r3, [r7, #15]
 8008086:	e051      	b.n	800812c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f022 020e 	bic.w	r2, r2, #14
 8008096:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f022 0201 	bic.w	r2, r2, #1
 80080a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4a22      	ldr	r2, [pc, #136]	; (8008138 <HAL_DMA_Abort_IT+0xd4>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d029      	beq.n	8008106 <HAL_DMA_Abort_IT+0xa2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a21      	ldr	r2, [pc, #132]	; (800813c <HAL_DMA_Abort_IT+0xd8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d022      	beq.n	8008102 <HAL_DMA_Abort_IT+0x9e>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a1f      	ldr	r2, [pc, #124]	; (8008140 <HAL_DMA_Abort_IT+0xdc>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d01a      	beq.n	80080fc <HAL_DMA_Abort_IT+0x98>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a1e      	ldr	r2, [pc, #120]	; (8008144 <HAL_DMA_Abort_IT+0xe0>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d012      	beq.n	80080f6 <HAL_DMA_Abort_IT+0x92>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a1c      	ldr	r2, [pc, #112]	; (8008148 <HAL_DMA_Abort_IT+0xe4>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d00a      	beq.n	80080f0 <HAL_DMA_Abort_IT+0x8c>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4a1b      	ldr	r2, [pc, #108]	; (800814c <HAL_DMA_Abort_IT+0xe8>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d102      	bne.n	80080ea <HAL_DMA_Abort_IT+0x86>
 80080e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80080e8:	e00e      	b.n	8008108 <HAL_DMA_Abort_IT+0xa4>
 80080ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080ee:	e00b      	b.n	8008108 <HAL_DMA_Abort_IT+0xa4>
 80080f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080f4:	e008      	b.n	8008108 <HAL_DMA_Abort_IT+0xa4>
 80080f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080fa:	e005      	b.n	8008108 <HAL_DMA_Abort_IT+0xa4>
 80080fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008100:	e002      	b.n	8008108 <HAL_DMA_Abort_IT+0xa4>
 8008102:	2310      	movs	r3, #16
 8008104:	e000      	b.n	8008108 <HAL_DMA_Abort_IT+0xa4>
 8008106:	2301      	movs	r3, #1
 8008108:	4a11      	ldr	r2, [pc, #68]	; (8008150 <HAL_DMA_Abort_IT+0xec>)
 800810a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
    } 
  }
  return status;
 800812c:	7bfb      	ldrb	r3, [r7, #15]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	40020008 	.word	0x40020008
 800813c:	4002001c 	.word	0x4002001c
 8008140:	40020030 	.word	0x40020030
 8008144:	40020044 	.word	0x40020044
 8008148:	40020058 	.word	0x40020058
 800814c:	4002006c 	.word	0x4002006c
 8008150:	40020000 	.word	0x40020000

08008154 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b084      	sub	sp, #16
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008170:	2204      	movs	r2, #4
 8008172:	409a      	lsls	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4013      	ands	r3, r2
 8008178:	2b00      	cmp	r3, #0
 800817a:	d04f      	beq.n	800821c <HAL_DMA_IRQHandler+0xc8>
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	f003 0304 	and.w	r3, r3, #4
 8008182:	2b00      	cmp	r3, #0
 8008184:	d04a      	beq.n	800821c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0320 	and.w	r3, r3, #32
 8008190:	2b00      	cmp	r3, #0
 8008192:	d107      	bne.n	80081a4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 0204 	bic.w	r2, r2, #4
 80081a2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a66      	ldr	r2, [pc, #408]	; (8008344 <HAL_DMA_IRQHandler+0x1f0>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d029      	beq.n	8008202 <HAL_DMA_IRQHandler+0xae>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a65      	ldr	r2, [pc, #404]	; (8008348 <HAL_DMA_IRQHandler+0x1f4>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d022      	beq.n	80081fe <HAL_DMA_IRQHandler+0xaa>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a63      	ldr	r2, [pc, #396]	; (800834c <HAL_DMA_IRQHandler+0x1f8>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d01a      	beq.n	80081f8 <HAL_DMA_IRQHandler+0xa4>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a62      	ldr	r2, [pc, #392]	; (8008350 <HAL_DMA_IRQHandler+0x1fc>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d012      	beq.n	80081f2 <HAL_DMA_IRQHandler+0x9e>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a60      	ldr	r2, [pc, #384]	; (8008354 <HAL_DMA_IRQHandler+0x200>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d00a      	beq.n	80081ec <HAL_DMA_IRQHandler+0x98>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a5f      	ldr	r2, [pc, #380]	; (8008358 <HAL_DMA_IRQHandler+0x204>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d102      	bne.n	80081e6 <HAL_DMA_IRQHandler+0x92>
 80081e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80081e4:	e00e      	b.n	8008204 <HAL_DMA_IRQHandler+0xb0>
 80081e6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80081ea:	e00b      	b.n	8008204 <HAL_DMA_IRQHandler+0xb0>
 80081ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80081f0:	e008      	b.n	8008204 <HAL_DMA_IRQHandler+0xb0>
 80081f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80081f6:	e005      	b.n	8008204 <HAL_DMA_IRQHandler+0xb0>
 80081f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081fc:	e002      	b.n	8008204 <HAL_DMA_IRQHandler+0xb0>
 80081fe:	2340      	movs	r3, #64	; 0x40
 8008200:	e000      	b.n	8008204 <HAL_DMA_IRQHandler+0xb0>
 8008202:	2304      	movs	r3, #4
 8008204:	4a55      	ldr	r2, [pc, #340]	; (800835c <HAL_DMA_IRQHandler+0x208>)
 8008206:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 8094 	beq.w	800833a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800821a:	e08e      	b.n	800833a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008220:	2202      	movs	r2, #2
 8008222:	409a      	lsls	r2, r3
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4013      	ands	r3, r2
 8008228:	2b00      	cmp	r3, #0
 800822a:	d056      	beq.n	80082da <HAL_DMA_IRQHandler+0x186>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	f003 0302 	and.w	r3, r3, #2
 8008232:	2b00      	cmp	r3, #0
 8008234:	d051      	beq.n	80082da <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0320 	and.w	r3, r3, #32
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10b      	bne.n	800825c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f022 020a 	bic.w	r2, r2, #10
 8008252:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a38      	ldr	r2, [pc, #224]	; (8008344 <HAL_DMA_IRQHandler+0x1f0>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d029      	beq.n	80082ba <HAL_DMA_IRQHandler+0x166>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a37      	ldr	r2, [pc, #220]	; (8008348 <HAL_DMA_IRQHandler+0x1f4>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d022      	beq.n	80082b6 <HAL_DMA_IRQHandler+0x162>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a35      	ldr	r2, [pc, #212]	; (800834c <HAL_DMA_IRQHandler+0x1f8>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d01a      	beq.n	80082b0 <HAL_DMA_IRQHandler+0x15c>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a34      	ldr	r2, [pc, #208]	; (8008350 <HAL_DMA_IRQHandler+0x1fc>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d012      	beq.n	80082aa <HAL_DMA_IRQHandler+0x156>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a32      	ldr	r2, [pc, #200]	; (8008354 <HAL_DMA_IRQHandler+0x200>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d00a      	beq.n	80082a4 <HAL_DMA_IRQHandler+0x150>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a31      	ldr	r2, [pc, #196]	; (8008358 <HAL_DMA_IRQHandler+0x204>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d102      	bne.n	800829e <HAL_DMA_IRQHandler+0x14a>
 8008298:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800829c:	e00e      	b.n	80082bc <HAL_DMA_IRQHandler+0x168>
 800829e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80082a2:	e00b      	b.n	80082bc <HAL_DMA_IRQHandler+0x168>
 80082a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80082a8:	e008      	b.n	80082bc <HAL_DMA_IRQHandler+0x168>
 80082aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082ae:	e005      	b.n	80082bc <HAL_DMA_IRQHandler+0x168>
 80082b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082b4:	e002      	b.n	80082bc <HAL_DMA_IRQHandler+0x168>
 80082b6:	2320      	movs	r3, #32
 80082b8:	e000      	b.n	80082bc <HAL_DMA_IRQHandler+0x168>
 80082ba:	2302      	movs	r3, #2
 80082bc:	4a27      	ldr	r2, [pc, #156]	; (800835c <HAL_DMA_IRQHandler+0x208>)
 80082be:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d034      	beq.n	800833a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80082d8:	e02f      	b.n	800833a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	2208      	movs	r2, #8
 80082e0:	409a      	lsls	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	4013      	ands	r3, r2
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d028      	beq.n	800833c <HAL_DMA_IRQHandler+0x1e8>
 80082ea:	68bb      	ldr	r3, [r7, #8]
 80082ec:	f003 0308 	and.w	r3, r3, #8
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d023      	beq.n	800833c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 020e 	bic.w	r2, r2, #14
 8008302:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830c:	2101      	movs	r1, #1
 800830e:	fa01 f202 	lsl.w	r2, r1, r2
 8008312:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832e:	2b00      	cmp	r3, #0
 8008330:	d004      	beq.n	800833c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	4798      	blx	r3
    }
  }
  return;
 800833a:	bf00      	nop
 800833c:	bf00      	nop
}
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	40020008 	.word	0x40020008
 8008348:	4002001c 	.word	0x4002001c
 800834c:	40020030 	.word	0x40020030
 8008350:	40020044 	.word	0x40020044
 8008354:	40020058 	.word	0x40020058
 8008358:	4002006c 	.word	0x4002006c
 800835c:	40020000 	.word	0x40020000

08008360 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
 800836c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008376:	2101      	movs	r1, #1
 8008378:	fa01 f202 	lsl.w	r2, r1, r2
 800837c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	2b10      	cmp	r3, #16
 800838c:	d108      	bne.n	80083a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	68ba      	ldr	r2, [r7, #8]
 800839c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800839e:	e007      	b.n	80083b0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	60da      	str	r2, [r3, #12]
}
 80083b0:	bf00      	nop
 80083b2:	3714      	adds	r7, #20
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bc80      	pop	{r7}
 80083b8:	4770      	bx	lr
	...

080083bc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80083bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80083ce:	2300      	movs	r3, #0
 80083d0:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80083d2:	2300      	movs	r3, #0
 80083d4:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80083d6:	4b2f      	ldr	r3, [pc, #188]	; (8008494 <HAL_FLASH_Program+0xd8>)
 80083d8:	7e1b      	ldrb	r3, [r3, #24]
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <HAL_FLASH_Program+0x26>
 80083de:	2302      	movs	r3, #2
 80083e0:	e054      	b.n	800848c <HAL_FLASH_Program+0xd0>
 80083e2:	4b2c      	ldr	r3, [pc, #176]	; (8008494 <HAL_FLASH_Program+0xd8>)
 80083e4:	2201      	movs	r2, #1
 80083e6:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80083e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80083ec:	f000 f8a8 	bl	8008540 <FLASH_WaitForLastOperation>
 80083f0:	4603      	mov	r3, r0
 80083f2:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d144      	bne.n	8008484 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d102      	bne.n	8008406 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8008400:	2301      	movs	r3, #1
 8008402:	757b      	strb	r3, [r7, #21]
 8008404:	e007      	b.n	8008416 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2b02      	cmp	r3, #2
 800840a:	d102      	bne.n	8008412 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 800840c:	2302      	movs	r3, #2
 800840e:	757b      	strb	r3, [r7, #21]
 8008410:	e001      	b.n	8008416 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8008412:	2304      	movs	r3, #4
 8008414:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8008416:	2300      	movs	r3, #0
 8008418:	75bb      	strb	r3, [r7, #22]
 800841a:	e02d      	b.n	8008478 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800841c:	7dbb      	ldrb	r3, [r7, #22]
 800841e:	005a      	lsls	r2, r3, #1
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	eb02 0c03 	add.w	ip, r2, r3
 8008426:	7dbb      	ldrb	r3, [r7, #22]
 8008428:	0119      	lsls	r1, r3, #4
 800842a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800842e:	f1c1 0620 	rsb	r6, r1, #32
 8008432:	f1a1 0020 	sub.w	r0, r1, #32
 8008436:	fa22 f401 	lsr.w	r4, r2, r1
 800843a:	fa03 f606 	lsl.w	r6, r3, r6
 800843e:	4334      	orrs	r4, r6
 8008440:	fa23 f000 	lsr.w	r0, r3, r0
 8008444:	4304      	orrs	r4, r0
 8008446:	fa23 f501 	lsr.w	r5, r3, r1
 800844a:	b2a3      	uxth	r3, r4
 800844c:	4619      	mov	r1, r3
 800844e:	4660      	mov	r0, ip
 8008450:	f000 f85a 	bl	8008508 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008454:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008458:	f000 f872 	bl	8008540 <FLASH_WaitForLastOperation>
 800845c:	4603      	mov	r3, r0
 800845e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8008460:	4b0d      	ldr	r3, [pc, #52]	; (8008498 <HAL_FLASH_Program+0xdc>)
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	4a0c      	ldr	r2, [pc, #48]	; (8008498 <HAL_FLASH_Program+0xdc>)
 8008466:	f023 0301 	bic.w	r3, r3, #1
 800846a:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d107      	bne.n	8008482 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8008472:	7dbb      	ldrb	r3, [r7, #22]
 8008474:	3301      	adds	r3, #1
 8008476:	75bb      	strb	r3, [r7, #22]
 8008478:	7dba      	ldrb	r2, [r7, #22]
 800847a:	7d7b      	ldrb	r3, [r7, #21]
 800847c:	429a      	cmp	r2, r3
 800847e:	d3cd      	bcc.n	800841c <HAL_FLASH_Program+0x60>
 8008480:	e000      	b.n	8008484 <HAL_FLASH_Program+0xc8>
      {
        break;
 8008482:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008484:	4b03      	ldr	r3, [pc, #12]	; (8008494 <HAL_FLASH_Program+0xd8>)
 8008486:	2200      	movs	r2, #0
 8008488:	761a      	strb	r2, [r3, #24]

  return status;
 800848a:	7dfb      	ldrb	r3, [r7, #23]
}
 800848c:	4618      	mov	r0, r3
 800848e:	371c      	adds	r7, #28
 8008490:	46bd      	mov	sp, r7
 8008492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008494:	20001598 	.word	0x20001598
 8008498:	40022000 	.word	0x40022000

0800849c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80084a6:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <HAL_FLASH_Unlock+0x40>)
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00d      	beq.n	80084ce <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80084b2:	4b0a      	ldr	r3, [pc, #40]	; (80084dc <HAL_FLASH_Unlock+0x40>)
 80084b4:	4a0a      	ldr	r2, [pc, #40]	; (80084e0 <HAL_FLASH_Unlock+0x44>)
 80084b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80084b8:	4b08      	ldr	r3, [pc, #32]	; (80084dc <HAL_FLASH_Unlock+0x40>)
 80084ba:	4a0a      	ldr	r2, [pc, #40]	; (80084e4 <HAL_FLASH_Unlock+0x48>)
 80084bc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80084be:	4b07      	ldr	r3, [pc, #28]	; (80084dc <HAL_FLASH_Unlock+0x40>)
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d001      	beq.n	80084ce <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80084ce:	79fb      	ldrb	r3, [r7, #7]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bc80      	pop	{r7}
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	40022000 	.word	0x40022000
 80084e0:	45670123 	.word	0x45670123
 80084e4:	cdef89ab 	.word	0xcdef89ab

080084e8 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80084ec:	4b05      	ldr	r3, [pc, #20]	; (8008504 <HAL_FLASH_Lock+0x1c>)
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	4a04      	ldr	r2, [pc, #16]	; (8008504 <HAL_FLASH_Lock+0x1c>)
 80084f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bc80      	pop	{r7}
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	40022000 	.word	0x40022000

08008508 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008514:	4b08      	ldr	r3, [pc, #32]	; (8008538 <FLASH_Program_HalfWord+0x30>)
 8008516:	2200      	movs	r2, #0
 8008518:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800851a:	4b08      	ldr	r3, [pc, #32]	; (800853c <FLASH_Program_HalfWord+0x34>)
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	4a07      	ldr	r2, [pc, #28]	; (800853c <FLASH_Program_HalfWord+0x34>)
 8008520:	f043 0301 	orr.w	r3, r3, #1
 8008524:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	887a      	ldrh	r2, [r7, #2]
 800852a:	801a      	strh	r2, [r3, #0]
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	bc80      	pop	{r7}
 8008534:	4770      	bx	lr
 8008536:	bf00      	nop
 8008538:	20001598 	.word	0x20001598
 800853c:	40022000 	.word	0x40022000

08008540 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8008548:	f7fe fa26 	bl	8006998 <HAL_GetTick>
 800854c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800854e:	e010      	b.n	8008572 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008556:	d00c      	beq.n	8008572 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d007      	beq.n	800856e <FLASH_WaitForLastOperation+0x2e>
 800855e:	f7fe fa1b 	bl	8006998 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	429a      	cmp	r2, r3
 800856c:	d201      	bcs.n	8008572 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e025      	b.n	80085be <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8008572:	4b15      	ldr	r3, [pc, #84]	; (80085c8 <FLASH_WaitForLastOperation+0x88>)
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e8      	bne.n	8008550 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800857e:	4b12      	ldr	r3, [pc, #72]	; (80085c8 <FLASH_WaitForLastOperation+0x88>)
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	f003 0320 	and.w	r3, r3, #32
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800858a:	4b0f      	ldr	r3, [pc, #60]	; (80085c8 <FLASH_WaitForLastOperation+0x88>)
 800858c:	2220      	movs	r2, #32
 800858e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8008590:	4b0d      	ldr	r3, [pc, #52]	; (80085c8 <FLASH_WaitForLastOperation+0x88>)
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	f003 0310 	and.w	r3, r3, #16
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10b      	bne.n	80085b4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800859c:	4b0a      	ldr	r3, [pc, #40]	; (80085c8 <FLASH_WaitForLastOperation+0x88>)
 800859e:	69db      	ldr	r3, [r3, #28]
 80085a0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d105      	bne.n	80085b4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80085a8:	4b07      	ldr	r3, [pc, #28]	; (80085c8 <FLASH_WaitForLastOperation+0x88>)
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d003      	beq.n	80085bc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80085b4:	f000 f80a 	bl	80085cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e000      	b.n	80085be <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	40022000 	.word	0x40022000

080085cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80085d2:	2300      	movs	r3, #0
 80085d4:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80085d6:	4b23      	ldr	r3, [pc, #140]	; (8008664 <FLASH_SetErrorCode+0x98>)
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f003 0310 	and.w	r3, r3, #16
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d009      	beq.n	80085f6 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80085e2:	4b21      	ldr	r3, [pc, #132]	; (8008668 <FLASH_SetErrorCode+0x9c>)
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	f043 0302 	orr.w	r3, r3, #2
 80085ea:	4a1f      	ldr	r2, [pc, #124]	; (8008668 <FLASH_SetErrorCode+0x9c>)
 80085ec:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f043 0310 	orr.w	r3, r3, #16
 80085f4:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80085f6:	4b1b      	ldr	r3, [pc, #108]	; (8008664 <FLASH_SetErrorCode+0x98>)
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	f003 0304 	and.w	r3, r3, #4
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d009      	beq.n	8008616 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8008602:	4b19      	ldr	r3, [pc, #100]	; (8008668 <FLASH_SetErrorCode+0x9c>)
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	f043 0301 	orr.w	r3, r3, #1
 800860a:	4a17      	ldr	r2, [pc, #92]	; (8008668 <FLASH_SetErrorCode+0x9c>)
 800860c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f043 0304 	orr.w	r3, r3, #4
 8008614:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8008616:	4b13      	ldr	r3, [pc, #76]	; (8008664 <FLASH_SetErrorCode+0x98>)
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00b      	beq.n	800863a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8008622:	4b11      	ldr	r3, [pc, #68]	; (8008668 <FLASH_SetErrorCode+0x9c>)
 8008624:	69db      	ldr	r3, [r3, #28]
 8008626:	f043 0304 	orr.w	r3, r3, #4
 800862a:	4a0f      	ldr	r2, [pc, #60]	; (8008668 <FLASH_SetErrorCode+0x9c>)
 800862c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800862e:	4b0d      	ldr	r3, [pc, #52]	; (8008664 <FLASH_SetErrorCode+0x98>)
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	4a0c      	ldr	r2, [pc, #48]	; (8008664 <FLASH_SetErrorCode+0x98>)
 8008634:	f023 0301 	bic.w	r3, r3, #1
 8008638:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f240 1201 	movw	r2, #257	; 0x101
 8008640:	4293      	cmp	r3, r2
 8008642:	d106      	bne.n	8008652 <FLASH_SetErrorCode+0x86>
 8008644:	4b07      	ldr	r3, [pc, #28]	; (8008664 <FLASH_SetErrorCode+0x98>)
 8008646:	69db      	ldr	r3, [r3, #28]
 8008648:	4a06      	ldr	r2, [pc, #24]	; (8008664 <FLASH_SetErrorCode+0x98>)
 800864a:	f023 0301 	bic.w	r3, r3, #1
 800864e:	61d3      	str	r3, [r2, #28]
}  
 8008650:	e002      	b.n	8008658 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8008652:	4a04      	ldr	r2, [pc, #16]	; (8008664 <FLASH_SetErrorCode+0x98>)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	60d3      	str	r3, [r2, #12]
}  
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	bc80      	pop	{r7}
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	40022000 	.word	0x40022000
 8008668:	20001598 	.word	0x20001598

0800866c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800867a:	2300      	movs	r3, #0
 800867c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800867e:	4b2f      	ldr	r3, [pc, #188]	; (800873c <HAL_FLASHEx_Erase+0xd0>)
 8008680:	7e1b      	ldrb	r3, [r3, #24]
 8008682:	2b01      	cmp	r3, #1
 8008684:	d101      	bne.n	800868a <HAL_FLASHEx_Erase+0x1e>
 8008686:	2302      	movs	r3, #2
 8008688:	e053      	b.n	8008732 <HAL_FLASHEx_Erase+0xc6>
 800868a:	4b2c      	ldr	r3, [pc, #176]	; (800873c <HAL_FLASHEx_Erase+0xd0>)
 800868c:	2201      	movs	r2, #1
 800868e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d116      	bne.n	80086c6 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8008698:	f24c 3050 	movw	r0, #50000	; 0xc350
 800869c:	f7ff ff50 	bl	8008540 <FLASH_WaitForLastOperation>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d141      	bne.n	800872a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80086a6:	2001      	movs	r0, #1
 80086a8:	f000 f84c 	bl	8008744 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80086ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80086b0:	f7ff ff46 	bl	8008540 <FLASH_WaitForLastOperation>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80086b8:	4b21      	ldr	r3, [pc, #132]	; (8008740 <HAL_FLASHEx_Erase+0xd4>)
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	4a20      	ldr	r2, [pc, #128]	; (8008740 <HAL_FLASHEx_Erase+0xd4>)
 80086be:	f023 0304 	bic.w	r3, r3, #4
 80086c2:	6113      	str	r3, [r2, #16]
 80086c4:	e031      	b.n	800872a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80086c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80086ca:	f7ff ff39 	bl	8008540 <FLASH_WaitForLastOperation>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d12a      	bne.n	800872a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	f04f 32ff 	mov.w	r2, #4294967295
 80086da:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	60bb      	str	r3, [r7, #8]
 80086e2:	e019      	b.n	8008718 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80086e4:	68b8      	ldr	r0, [r7, #8]
 80086e6:	f000 f849 	bl	800877c <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80086ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80086ee:	f7ff ff27 	bl	8008540 <FLASH_WaitForLastOperation>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80086f6:	4b12      	ldr	r3, [pc, #72]	; (8008740 <HAL_FLASHEx_Erase+0xd4>)
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	4a11      	ldr	r2, [pc, #68]	; (8008740 <HAL_FLASHEx_Erase+0xd4>)
 80086fc:	f023 0302 	bic.w	r3, r3, #2
 8008700:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8008702:	7bfb      	ldrb	r3, [r7, #15]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d003      	beq.n	8008710 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	601a      	str	r2, [r3, #0]
            break;
 800870e:	e00c      	b.n	800872a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008716:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	029a      	lsls	r2, r3, #10
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	4413      	add	r3, r2
 8008724:	68ba      	ldr	r2, [r7, #8]
 8008726:	429a      	cmp	r2, r3
 8008728:	d3dc      	bcc.n	80086e4 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800872a:	4b04      	ldr	r3, [pc, #16]	; (800873c <HAL_FLASHEx_Erase+0xd0>)
 800872c:	2200      	movs	r2, #0
 800872e:	761a      	strb	r2, [r3, #24]

  return status;
 8008730:	7bfb      	ldrb	r3, [r7, #15]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20001598 	.word	0x20001598
 8008740:	40022000 	.word	0x40022000

08008744 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800874c:	4b09      	ldr	r3, [pc, #36]	; (8008774 <FLASH_MassErase+0x30>)
 800874e:	2200      	movs	r2, #0
 8008750:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8008752:	4b09      	ldr	r3, [pc, #36]	; (8008778 <FLASH_MassErase+0x34>)
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	4a08      	ldr	r2, [pc, #32]	; (8008778 <FLASH_MassErase+0x34>)
 8008758:	f043 0304 	orr.w	r3, r3, #4
 800875c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800875e:	4b06      	ldr	r3, [pc, #24]	; (8008778 <FLASH_MassErase+0x34>)
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	4a05      	ldr	r2, [pc, #20]	; (8008778 <FLASH_MassErase+0x34>)
 8008764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008768:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	bc80      	pop	{r7}
 8008772:	4770      	bx	lr
 8008774:	20001598 	.word	0x20001598
 8008778:	40022000 	.word	0x40022000

0800877c <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008784:	4b0b      	ldr	r3, [pc, #44]	; (80087b4 <FLASH_PageErase+0x38>)
 8008786:	2200      	movs	r2, #0
 8008788:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800878a:	4b0b      	ldr	r3, [pc, #44]	; (80087b8 <FLASH_PageErase+0x3c>)
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	4a0a      	ldr	r2, [pc, #40]	; (80087b8 <FLASH_PageErase+0x3c>)
 8008790:	f043 0302 	orr.w	r3, r3, #2
 8008794:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8008796:	4a08      	ldr	r2, [pc, #32]	; (80087b8 <FLASH_PageErase+0x3c>)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800879c:	4b06      	ldr	r3, [pc, #24]	; (80087b8 <FLASH_PageErase+0x3c>)
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	4a05      	ldr	r2, [pc, #20]	; (80087b8 <FLASH_PageErase+0x3c>)
 80087a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087a6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bc80      	pop	{r7}
 80087b0:	4770      	bx	lr
 80087b2:	bf00      	nop
 80087b4:	20001598 	.word	0x20001598
 80087b8:	40022000 	.word	0x40022000

080087bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087bc:	b480      	push	{r7}
 80087be:	b08b      	sub	sp, #44	; 0x2c
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80087c6:	2300      	movs	r3, #0
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80087ca:	2300      	movs	r3, #0
 80087cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80087ce:	e169      	b.n	8008aa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80087d0:	2201      	movs	r2, #1
 80087d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d4:	fa02 f303 	lsl.w	r3, r2, r3
 80087d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	69fa      	ldr	r2, [r7, #28]
 80087e0:	4013      	ands	r3, r2
 80087e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	f040 8158 	bne.w	8008a9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	4a9a      	ldr	r2, [pc, #616]	; (8008a5c <HAL_GPIO_Init+0x2a0>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d05e      	beq.n	80088b6 <HAL_GPIO_Init+0xfa>
 80087f8:	4a98      	ldr	r2, [pc, #608]	; (8008a5c <HAL_GPIO_Init+0x2a0>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d875      	bhi.n	80088ea <HAL_GPIO_Init+0x12e>
 80087fe:	4a98      	ldr	r2, [pc, #608]	; (8008a60 <HAL_GPIO_Init+0x2a4>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d058      	beq.n	80088b6 <HAL_GPIO_Init+0xfa>
 8008804:	4a96      	ldr	r2, [pc, #600]	; (8008a60 <HAL_GPIO_Init+0x2a4>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d86f      	bhi.n	80088ea <HAL_GPIO_Init+0x12e>
 800880a:	4a96      	ldr	r2, [pc, #600]	; (8008a64 <HAL_GPIO_Init+0x2a8>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d052      	beq.n	80088b6 <HAL_GPIO_Init+0xfa>
 8008810:	4a94      	ldr	r2, [pc, #592]	; (8008a64 <HAL_GPIO_Init+0x2a8>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d869      	bhi.n	80088ea <HAL_GPIO_Init+0x12e>
 8008816:	4a94      	ldr	r2, [pc, #592]	; (8008a68 <HAL_GPIO_Init+0x2ac>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d04c      	beq.n	80088b6 <HAL_GPIO_Init+0xfa>
 800881c:	4a92      	ldr	r2, [pc, #584]	; (8008a68 <HAL_GPIO_Init+0x2ac>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d863      	bhi.n	80088ea <HAL_GPIO_Init+0x12e>
 8008822:	4a92      	ldr	r2, [pc, #584]	; (8008a6c <HAL_GPIO_Init+0x2b0>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d046      	beq.n	80088b6 <HAL_GPIO_Init+0xfa>
 8008828:	4a90      	ldr	r2, [pc, #576]	; (8008a6c <HAL_GPIO_Init+0x2b0>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d85d      	bhi.n	80088ea <HAL_GPIO_Init+0x12e>
 800882e:	2b12      	cmp	r3, #18
 8008830:	d82a      	bhi.n	8008888 <HAL_GPIO_Init+0xcc>
 8008832:	2b12      	cmp	r3, #18
 8008834:	d859      	bhi.n	80088ea <HAL_GPIO_Init+0x12e>
 8008836:	a201      	add	r2, pc, #4	; (adr r2, 800883c <HAL_GPIO_Init+0x80>)
 8008838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800883c:	080088b7 	.word	0x080088b7
 8008840:	08008891 	.word	0x08008891
 8008844:	080088a3 	.word	0x080088a3
 8008848:	080088e5 	.word	0x080088e5
 800884c:	080088eb 	.word	0x080088eb
 8008850:	080088eb 	.word	0x080088eb
 8008854:	080088eb 	.word	0x080088eb
 8008858:	080088eb 	.word	0x080088eb
 800885c:	080088eb 	.word	0x080088eb
 8008860:	080088eb 	.word	0x080088eb
 8008864:	080088eb 	.word	0x080088eb
 8008868:	080088eb 	.word	0x080088eb
 800886c:	080088eb 	.word	0x080088eb
 8008870:	080088eb 	.word	0x080088eb
 8008874:	080088eb 	.word	0x080088eb
 8008878:	080088eb 	.word	0x080088eb
 800887c:	080088eb 	.word	0x080088eb
 8008880:	08008899 	.word	0x08008899
 8008884:	080088ad 	.word	0x080088ad
 8008888:	4a79      	ldr	r2, [pc, #484]	; (8008a70 <HAL_GPIO_Init+0x2b4>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d013      	beq.n	80088b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800888e:	e02c      	b.n	80088ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	623b      	str	r3, [r7, #32]
          break;
 8008896:	e029      	b.n	80088ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	3304      	adds	r3, #4
 800889e:	623b      	str	r3, [r7, #32]
          break;
 80088a0:	e024      	b.n	80088ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68db      	ldr	r3, [r3, #12]
 80088a6:	3308      	adds	r3, #8
 80088a8:	623b      	str	r3, [r7, #32]
          break;
 80088aa:	e01f      	b.n	80088ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	330c      	adds	r3, #12
 80088b2:	623b      	str	r3, [r7, #32]
          break;
 80088b4:	e01a      	b.n	80088ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d102      	bne.n	80088c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80088be:	2304      	movs	r3, #4
 80088c0:	623b      	str	r3, [r7, #32]
          break;
 80088c2:	e013      	b.n	80088ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d105      	bne.n	80088d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80088cc:	2308      	movs	r3, #8
 80088ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	69fa      	ldr	r2, [r7, #28]
 80088d4:	611a      	str	r2, [r3, #16]
          break;
 80088d6:	e009      	b.n	80088ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80088d8:	2308      	movs	r3, #8
 80088da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	69fa      	ldr	r2, [r7, #28]
 80088e0:	615a      	str	r2, [r3, #20]
          break;
 80088e2:	e003      	b.n	80088ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80088e4:	2300      	movs	r3, #0
 80088e6:	623b      	str	r3, [r7, #32]
          break;
 80088e8:	e000      	b.n	80088ec <HAL_GPIO_Init+0x130>
          break;
 80088ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	2bff      	cmp	r3, #255	; 0xff
 80088f0:	d801      	bhi.n	80088f6 <HAL_GPIO_Init+0x13a>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	e001      	b.n	80088fa <HAL_GPIO_Init+0x13e>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	3304      	adds	r3, #4
 80088fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	2bff      	cmp	r3, #255	; 0xff
 8008900:	d802      	bhi.n	8008908 <HAL_GPIO_Init+0x14c>
 8008902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008904:	009b      	lsls	r3, r3, #2
 8008906:	e002      	b.n	800890e <HAL_GPIO_Init+0x152>
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	3b08      	subs	r3, #8
 800890c:	009b      	lsls	r3, r3, #2
 800890e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	681a      	ldr	r2, [r3, #0]
 8008914:	210f      	movs	r1, #15
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	fa01 f303 	lsl.w	r3, r1, r3
 800891c:	43db      	mvns	r3, r3
 800891e:	401a      	ands	r2, r3
 8008920:	6a39      	ldr	r1, [r7, #32]
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	fa01 f303 	lsl.w	r3, r1, r3
 8008928:	431a      	orrs	r2, r3
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 80b1 	beq.w	8008a9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800893c:	4b4d      	ldr	r3, [pc, #308]	; (8008a74 <HAL_GPIO_Init+0x2b8>)
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	4a4c      	ldr	r2, [pc, #304]	; (8008a74 <HAL_GPIO_Init+0x2b8>)
 8008942:	f043 0301 	orr.w	r3, r3, #1
 8008946:	6193      	str	r3, [r2, #24]
 8008948:	4b4a      	ldr	r3, [pc, #296]	; (8008a74 <HAL_GPIO_Init+0x2b8>)
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	60bb      	str	r3, [r7, #8]
 8008952:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008954:	4a48      	ldr	r2, [pc, #288]	; (8008a78 <HAL_GPIO_Init+0x2bc>)
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	089b      	lsrs	r3, r3, #2
 800895a:	3302      	adds	r3, #2
 800895c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008960:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008964:	f003 0303 	and.w	r3, r3, #3
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	220f      	movs	r2, #15
 800896c:	fa02 f303 	lsl.w	r3, r2, r3
 8008970:	43db      	mvns	r3, r3
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	4013      	ands	r3, r2
 8008976:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a40      	ldr	r2, [pc, #256]	; (8008a7c <HAL_GPIO_Init+0x2c0>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d013      	beq.n	80089a8 <HAL_GPIO_Init+0x1ec>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a3f      	ldr	r2, [pc, #252]	; (8008a80 <HAL_GPIO_Init+0x2c4>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d00d      	beq.n	80089a4 <HAL_GPIO_Init+0x1e8>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a3e      	ldr	r2, [pc, #248]	; (8008a84 <HAL_GPIO_Init+0x2c8>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d007      	beq.n	80089a0 <HAL_GPIO_Init+0x1e4>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a3d      	ldr	r2, [pc, #244]	; (8008a88 <HAL_GPIO_Init+0x2cc>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d101      	bne.n	800899c <HAL_GPIO_Init+0x1e0>
 8008998:	2303      	movs	r3, #3
 800899a:	e006      	b.n	80089aa <HAL_GPIO_Init+0x1ee>
 800899c:	2304      	movs	r3, #4
 800899e:	e004      	b.n	80089aa <HAL_GPIO_Init+0x1ee>
 80089a0:	2302      	movs	r3, #2
 80089a2:	e002      	b.n	80089aa <HAL_GPIO_Init+0x1ee>
 80089a4:	2301      	movs	r3, #1
 80089a6:	e000      	b.n	80089aa <HAL_GPIO_Init+0x1ee>
 80089a8:	2300      	movs	r3, #0
 80089aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ac:	f002 0203 	and.w	r2, r2, #3
 80089b0:	0092      	lsls	r2, r2, #2
 80089b2:	4093      	lsls	r3, r2
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80089ba:	492f      	ldr	r1, [pc, #188]	; (8008a78 <HAL_GPIO_Init+0x2bc>)
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	089b      	lsrs	r3, r3, #2
 80089c0:	3302      	adds	r3, #2
 80089c2:	68fa      	ldr	r2, [r7, #12]
 80089c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d006      	beq.n	80089e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80089d4:	4b2d      	ldr	r3, [pc, #180]	; (8008a8c <HAL_GPIO_Init+0x2d0>)
 80089d6:	689a      	ldr	r2, [r3, #8]
 80089d8:	492c      	ldr	r1, [pc, #176]	; (8008a8c <HAL_GPIO_Init+0x2d0>)
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	4313      	orrs	r3, r2
 80089de:	608b      	str	r3, [r1, #8]
 80089e0:	e006      	b.n	80089f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80089e2:	4b2a      	ldr	r3, [pc, #168]	; (8008a8c <HAL_GPIO_Init+0x2d0>)
 80089e4:	689a      	ldr	r2, [r3, #8]
 80089e6:	69bb      	ldr	r3, [r7, #24]
 80089e8:	43db      	mvns	r3, r3
 80089ea:	4928      	ldr	r1, [pc, #160]	; (8008a8c <HAL_GPIO_Init+0x2d0>)
 80089ec:	4013      	ands	r3, r2
 80089ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d006      	beq.n	8008a0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80089fc:	4b23      	ldr	r3, [pc, #140]	; (8008a8c <HAL_GPIO_Init+0x2d0>)
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	4922      	ldr	r1, [pc, #136]	; (8008a8c <HAL_GPIO_Init+0x2d0>)
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	60cb      	str	r3, [r1, #12]
 8008a08:	e006      	b.n	8008a18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008a0a:	4b20      	ldr	r3, [pc, #128]	; (8008a8c <HAL_GPIO_Init+0x2d0>)
 8008a0c:	68da      	ldr	r2, [r3, #12]
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	43db      	mvns	r3, r3
 8008a12:	491e      	ldr	r1, [pc, #120]	; (8008a8c <HAL_GPIO_Init+0x2d0>)
 8008a14:	4013      	ands	r3, r2
 8008a16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d006      	beq.n	8008a32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008a24:	4b19      	ldr	r3, [pc, #100]	; (8008a8c <HAL_GPIO_Init+0x2d0>)
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	4918      	ldr	r1, [pc, #96]	; (8008a8c <HAL_GPIO_Init+0x2d0>)
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	604b      	str	r3, [r1, #4]
 8008a30:	e006      	b.n	8008a40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008a32:	4b16      	ldr	r3, [pc, #88]	; (8008a8c <HAL_GPIO_Init+0x2d0>)
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	43db      	mvns	r3, r3
 8008a3a:	4914      	ldr	r1, [pc, #80]	; (8008a8c <HAL_GPIO_Init+0x2d0>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d021      	beq.n	8008a90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008a4c:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <HAL_GPIO_Init+0x2d0>)
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	490e      	ldr	r1, [pc, #56]	; (8008a8c <HAL_GPIO_Init+0x2d0>)
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	600b      	str	r3, [r1, #0]
 8008a58:	e021      	b.n	8008a9e <HAL_GPIO_Init+0x2e2>
 8008a5a:	bf00      	nop
 8008a5c:	10320000 	.word	0x10320000
 8008a60:	10310000 	.word	0x10310000
 8008a64:	10220000 	.word	0x10220000
 8008a68:	10210000 	.word	0x10210000
 8008a6c:	10120000 	.word	0x10120000
 8008a70:	10110000 	.word	0x10110000
 8008a74:	40021000 	.word	0x40021000
 8008a78:	40010000 	.word	0x40010000
 8008a7c:	40010800 	.word	0x40010800
 8008a80:	40010c00 	.word	0x40010c00
 8008a84:	40011000 	.word	0x40011000
 8008a88:	40011400 	.word	0x40011400
 8008a8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008a90:	4b0b      	ldr	r3, [pc, #44]	; (8008ac0 <HAL_GPIO_Init+0x304>)
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	43db      	mvns	r3, r3
 8008a98:	4909      	ldr	r1, [pc, #36]	; (8008ac0 <HAL_GPIO_Init+0x304>)
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f47f ae8e 	bne.w	80087d0 <HAL_GPIO_Init+0x14>
  }
}
 8008ab4:	bf00      	nop
 8008ab6:	bf00      	nop
 8008ab8:	372c      	adds	r7, #44	; 0x2c
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bc80      	pop	{r7}
 8008abe:	4770      	bx	lr
 8008ac0:	40010400 	.word	0x40010400

08008ac4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	689a      	ldr	r2, [r3, #8]
 8008ad4:	887b      	ldrh	r3, [r7, #2]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008adc:	2301      	movs	r3, #1
 8008ade:	73fb      	strb	r3, [r7, #15]
 8008ae0:	e001      	b.n	8008ae6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3714      	adds	r7, #20
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bc80      	pop	{r7}
 8008af0:	4770      	bx	lr

08008af2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b083      	sub	sp, #12
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	460b      	mov	r3, r1
 8008afc:	807b      	strh	r3, [r7, #2]
 8008afe:	4613      	mov	r3, r2
 8008b00:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b02:	787b      	ldrb	r3, [r7, #1]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d003      	beq.n	8008b10 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b08:	887a      	ldrh	r2, [r7, #2]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008b0e:	e003      	b.n	8008b18 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008b10:	887b      	ldrh	r3, [r7, #2]
 8008b12:	041a      	lsls	r2, r3, #16
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	611a      	str	r2, [r3, #16]
}
 8008b18:	bf00      	nop
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bc80      	pop	{r7}
 8008b20:	4770      	bx	lr

08008b22 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008b22:	b480      	push	{r7}
 8008b24:	b085      	sub	sp, #20
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008b34:	887a      	ldrh	r2, [r7, #2]
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	4013      	ands	r3, r2
 8008b3a:	041a      	lsls	r2, r3, #16
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	43d9      	mvns	r1, r3
 8008b40:	887b      	ldrh	r3, [r7, #2]
 8008b42:	400b      	ands	r3, r1
 8008b44:	431a      	orrs	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	611a      	str	r2, [r3, #16]
}
 8008b4a:	bf00      	nop
 8008b4c:	3714      	adds	r7, #20
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bc80      	pop	{r7}
 8008b52:	4770      	bx	lr

08008b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d101      	bne.n	8008b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e12b      	b.n	8008dbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d106      	bne.n	8008b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f7fb feea 	bl	8004954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2224      	movs	r2, #36	; 0x24
 8008b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f022 0201 	bic.w	r2, r2, #1
 8008b96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ba6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008bb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008bb8:	f000 fcf8 	bl	80095ac <HAL_RCC_GetPCLK1Freq>
 8008bbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	4a81      	ldr	r2, [pc, #516]	; (8008dc8 <HAL_I2C_Init+0x274>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d807      	bhi.n	8008bd8 <HAL_I2C_Init+0x84>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4a80      	ldr	r2, [pc, #512]	; (8008dcc <HAL_I2C_Init+0x278>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	bf94      	ite	ls
 8008bd0:	2301      	movls	r3, #1
 8008bd2:	2300      	movhi	r3, #0
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	e006      	b.n	8008be6 <HAL_I2C_Init+0x92>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	4a7d      	ldr	r2, [pc, #500]	; (8008dd0 <HAL_I2C_Init+0x27c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	bf94      	ite	ls
 8008be0:	2301      	movls	r3, #1
 8008be2:	2300      	movhi	r3, #0
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e0e7      	b.n	8008dbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	4a78      	ldr	r2, [pc, #480]	; (8008dd4 <HAL_I2C_Init+0x280>)
 8008bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bf6:	0c9b      	lsrs	r3, r3, #18
 8008bf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6a1b      	ldr	r3, [r3, #32]
 8008c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	4a6a      	ldr	r2, [pc, #424]	; (8008dc8 <HAL_I2C_Init+0x274>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d802      	bhi.n	8008c28 <HAL_I2C_Init+0xd4>
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	3301      	adds	r3, #1
 8008c26:	e009      	b.n	8008c3c <HAL_I2C_Init+0xe8>
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008c2e:	fb02 f303 	mul.w	r3, r2, r3
 8008c32:	4a69      	ldr	r2, [pc, #420]	; (8008dd8 <HAL_I2C_Init+0x284>)
 8008c34:	fba2 2303 	umull	r2, r3, r2, r3
 8008c38:	099b      	lsrs	r3, r3, #6
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	6812      	ldr	r2, [r2, #0]
 8008c40:	430b      	orrs	r3, r1
 8008c42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008c4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	495c      	ldr	r1, [pc, #368]	; (8008dc8 <HAL_I2C_Init+0x274>)
 8008c58:	428b      	cmp	r3, r1
 8008c5a:	d819      	bhi.n	8008c90 <HAL_I2C_Init+0x13c>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	1e59      	subs	r1, r3, #1
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	005b      	lsls	r3, r3, #1
 8008c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c6a:	1c59      	adds	r1, r3, #1
 8008c6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008c70:	400b      	ands	r3, r1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00a      	beq.n	8008c8c <HAL_I2C_Init+0x138>
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	1e59      	subs	r1, r3, #1
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	005b      	lsls	r3, r3, #1
 8008c80:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c84:	3301      	adds	r3, #1
 8008c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c8a:	e051      	b.n	8008d30 <HAL_I2C_Init+0x1dc>
 8008c8c:	2304      	movs	r3, #4
 8008c8e:	e04f      	b.n	8008d30 <HAL_I2C_Init+0x1dc>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d111      	bne.n	8008cbc <HAL_I2C_Init+0x168>
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	1e58      	subs	r0, r3, #1
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6859      	ldr	r1, [r3, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	005b      	lsls	r3, r3, #1
 8008ca4:	440b      	add	r3, r1
 8008ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008caa:	3301      	adds	r3, #1
 8008cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	bf0c      	ite	eq
 8008cb4:	2301      	moveq	r3, #1
 8008cb6:	2300      	movne	r3, #0
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	e012      	b.n	8008ce2 <HAL_I2C_Init+0x18e>
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	1e58      	subs	r0, r3, #1
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6859      	ldr	r1, [r3, #4]
 8008cc4:	460b      	mov	r3, r1
 8008cc6:	009b      	lsls	r3, r3, #2
 8008cc8:	440b      	add	r3, r1
 8008cca:	0099      	lsls	r1, r3, #2
 8008ccc:	440b      	add	r3, r1
 8008cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	bf0c      	ite	eq
 8008cdc:	2301      	moveq	r3, #1
 8008cde:	2300      	movne	r3, #0
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <HAL_I2C_Init+0x196>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e022      	b.n	8008d30 <HAL_I2C_Init+0x1dc>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d10e      	bne.n	8008d10 <HAL_I2C_Init+0x1bc>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	1e58      	subs	r0, r3, #1
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6859      	ldr	r1, [r3, #4]
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	005b      	lsls	r3, r3, #1
 8008cfe:	440b      	add	r3, r1
 8008d00:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d04:	3301      	adds	r3, #1
 8008d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d0e:	e00f      	b.n	8008d30 <HAL_I2C_Init+0x1dc>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	1e58      	subs	r0, r3, #1
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6859      	ldr	r1, [r3, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	440b      	add	r3, r1
 8008d1e:	0099      	lsls	r1, r3, #2
 8008d20:	440b      	add	r3, r1
 8008d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d26:	3301      	adds	r3, #1
 8008d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d30:	6879      	ldr	r1, [r7, #4]
 8008d32:	6809      	ldr	r1, [r1, #0]
 8008d34:	4313      	orrs	r3, r2
 8008d36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	69da      	ldr	r2, [r3, #28]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	430a      	orrs	r2, r1
 8008d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008d5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	6911      	ldr	r1, [r2, #16]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	68d2      	ldr	r2, [r2, #12]
 8008d6a:	4311      	orrs	r1, r2
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	6812      	ldr	r2, [r2, #0]
 8008d70:	430b      	orrs	r3, r1
 8008d72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	695a      	ldr	r2, [r3, #20]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	431a      	orrs	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f042 0201 	orr.w	r2, r2, #1
 8008d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2220      	movs	r2, #32
 8008daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008dbc:	2300      	movs	r3, #0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	000186a0 	.word	0x000186a0
 8008dcc:	001e847f 	.word	0x001e847f
 8008dd0:	003d08ff 	.word	0x003d08ff
 8008dd4:	431bde83 	.word	0x431bde83
 8008dd8:	10624dd3 	.word	0x10624dd3

08008ddc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8008de0:	4b03      	ldr	r3, [pc, #12]	; (8008df0 <HAL_PWR_EnableBkUpAccess+0x14>)
 8008de2:	2201      	movs	r2, #1
 8008de4:	601a      	str	r2, [r3, #0]
}
 8008de6:	bf00      	nop
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bc80      	pop	{r7}
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	420e0020 	.word	0x420e0020

08008df4 <HAL_PWR_PVD_IRQHandler>:
  * @brief  This function handles the PWR PVD interrupt request.
  * @note   This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8008df8:	4b06      	ldr	r3, [pc, #24]	; (8008e14 <HAL_PWR_PVD_IRQHandler+0x20>)
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d005      	beq.n	8008e10 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8008e04:	f7fc f8a9 	bl	8004f5a <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8008e08:	4b02      	ldr	r3, [pc, #8]	; (8008e14 <HAL_PWR_PVD_IRQHandler+0x20>)
 8008e0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008e0e:	615a      	str	r2, [r3, #20]
  }
}
 8008e10:	bf00      	nop
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	40010400 	.word	0x40010400

08008e18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d101      	bne.n	8008e2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e272      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f003 0301 	and.w	r3, r3, #1
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f000 8087 	beq.w	8008f46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008e38:	4b92      	ldr	r3, [pc, #584]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f003 030c 	and.w	r3, r3, #12
 8008e40:	2b04      	cmp	r3, #4
 8008e42:	d00c      	beq.n	8008e5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008e44:	4b8f      	ldr	r3, [pc, #572]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	f003 030c 	and.w	r3, r3, #12
 8008e4c:	2b08      	cmp	r3, #8
 8008e4e:	d112      	bne.n	8008e76 <HAL_RCC_OscConfig+0x5e>
 8008e50:	4b8c      	ldr	r3, [pc, #560]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e5c:	d10b      	bne.n	8008e76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e5e:	4b89      	ldr	r3, [pc, #548]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d06c      	beq.n	8008f44 <HAL_RCC_OscConfig+0x12c>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d168      	bne.n	8008f44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e24c      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e7e:	d106      	bne.n	8008e8e <HAL_RCC_OscConfig+0x76>
 8008e80:	4b80      	ldr	r3, [pc, #512]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4a7f      	ldr	r2, [pc, #508]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e8a:	6013      	str	r3, [r2, #0]
 8008e8c:	e02e      	b.n	8008eec <HAL_RCC_OscConfig+0xd4>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d10c      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x98>
 8008e96:	4b7b      	ldr	r3, [pc, #492]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a7a      	ldr	r2, [pc, #488]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ea0:	6013      	str	r3, [r2, #0]
 8008ea2:	4b78      	ldr	r3, [pc, #480]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a77      	ldr	r2, [pc, #476]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	e01d      	b.n	8008eec <HAL_RCC_OscConfig+0xd4>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008eb8:	d10c      	bne.n	8008ed4 <HAL_RCC_OscConfig+0xbc>
 8008eba:	4b72      	ldr	r3, [pc, #456]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a71      	ldr	r2, [pc, #452]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	4b6f      	ldr	r3, [pc, #444]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a6e      	ldr	r2, [pc, #440]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ed0:	6013      	str	r3, [r2, #0]
 8008ed2:	e00b      	b.n	8008eec <HAL_RCC_OscConfig+0xd4>
 8008ed4:	4b6b      	ldr	r3, [pc, #428]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a6a      	ldr	r2, [pc, #424]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ede:	6013      	str	r3, [r2, #0]
 8008ee0:	4b68      	ldr	r3, [pc, #416]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a67      	ldr	r2, [pc, #412]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d013      	beq.n	8008f1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ef4:	f7fd fd50 	bl	8006998 <HAL_GetTick>
 8008ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008efa:	e008      	b.n	8008f0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008efc:	f7fd fd4c 	bl	8006998 <HAL_GetTick>
 8008f00:	4602      	mov	r2, r0
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	1ad3      	subs	r3, r2, r3
 8008f06:	2b64      	cmp	r3, #100	; 0x64
 8008f08:	d901      	bls.n	8008f0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e200      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f0e:	4b5d      	ldr	r3, [pc, #372]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d0f0      	beq.n	8008efc <HAL_RCC_OscConfig+0xe4>
 8008f1a:	e014      	b.n	8008f46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f1c:	f7fd fd3c 	bl	8006998 <HAL_GetTick>
 8008f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f22:	e008      	b.n	8008f36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f24:	f7fd fd38 	bl	8006998 <HAL_GetTick>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	1ad3      	subs	r3, r2, r3
 8008f2e:	2b64      	cmp	r3, #100	; 0x64
 8008f30:	d901      	bls.n	8008f36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e1ec      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f36:	4b53      	ldr	r3, [pc, #332]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1f0      	bne.n	8008f24 <HAL_RCC_OscConfig+0x10c>
 8008f42:	e000      	b.n	8008f46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d063      	beq.n	800901a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008f52:	4b4c      	ldr	r3, [pc, #304]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	f003 030c 	and.w	r3, r3, #12
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00b      	beq.n	8008f76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008f5e:	4b49      	ldr	r3, [pc, #292]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f003 030c 	and.w	r3, r3, #12
 8008f66:	2b08      	cmp	r3, #8
 8008f68:	d11c      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x18c>
 8008f6a:	4b46      	ldr	r3, [pc, #280]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d116      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f76:	4b43      	ldr	r3, [pc, #268]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f003 0302 	and.w	r3, r3, #2
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d005      	beq.n	8008f8e <HAL_RCC_OscConfig+0x176>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	691b      	ldr	r3, [r3, #16]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d001      	beq.n	8008f8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e1c0      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f8e:	4b3d      	ldr	r3, [pc, #244]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	00db      	lsls	r3, r3, #3
 8008f9c:	4939      	ldr	r1, [pc, #228]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fa2:	e03a      	b.n	800901a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d020      	beq.n	8008fee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fac:	4b36      	ldr	r3, [pc, #216]	; (8009088 <HAL_RCC_OscConfig+0x270>)
 8008fae:	2201      	movs	r2, #1
 8008fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fb2:	f7fd fcf1 	bl	8006998 <HAL_GetTick>
 8008fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fb8:	e008      	b.n	8008fcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008fba:	f7fd fced 	bl	8006998 <HAL_GetTick>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	1ad3      	subs	r3, r2, r3
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d901      	bls.n	8008fcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e1a1      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fcc:	4b2d      	ldr	r3, [pc, #180]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	f003 0302 	and.w	r3, r3, #2
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0f0      	beq.n	8008fba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fd8:	4b2a      	ldr	r3, [pc, #168]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	695b      	ldr	r3, [r3, #20]
 8008fe4:	00db      	lsls	r3, r3, #3
 8008fe6:	4927      	ldr	r1, [pc, #156]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	600b      	str	r3, [r1, #0]
 8008fec:	e015      	b.n	800901a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fee:	4b26      	ldr	r3, [pc, #152]	; (8009088 <HAL_RCC_OscConfig+0x270>)
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ff4:	f7fd fcd0 	bl	8006998 <HAL_GetTick>
 8008ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ffa:	e008      	b.n	800900e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ffc:	f7fd fccc 	bl	8006998 <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	2b02      	cmp	r3, #2
 8009008:	d901      	bls.n	800900e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e180      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800900e:	4b1d      	ldr	r3, [pc, #116]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1f0      	bne.n	8008ffc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0308 	and.w	r3, r3, #8
 8009022:	2b00      	cmp	r3, #0
 8009024:	d03a      	beq.n	800909c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	699b      	ldr	r3, [r3, #24]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d019      	beq.n	8009062 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800902e:	4b17      	ldr	r3, [pc, #92]	; (800908c <HAL_RCC_OscConfig+0x274>)
 8009030:	2201      	movs	r2, #1
 8009032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009034:	f7fd fcb0 	bl	8006998 <HAL_GetTick>
 8009038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800903a:	e008      	b.n	800904e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800903c:	f7fd fcac 	bl	8006998 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	2b02      	cmp	r3, #2
 8009048:	d901      	bls.n	800904e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e160      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800904e:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <HAL_RCC_OscConfig+0x26c>)
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	2b00      	cmp	r3, #0
 8009058:	d0f0      	beq.n	800903c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800905a:	2001      	movs	r0, #1
 800905c:	f000 face 	bl	80095fc <RCC_Delay>
 8009060:	e01c      	b.n	800909c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009062:	4b0a      	ldr	r3, [pc, #40]	; (800908c <HAL_RCC_OscConfig+0x274>)
 8009064:	2200      	movs	r2, #0
 8009066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009068:	f7fd fc96 	bl	8006998 <HAL_GetTick>
 800906c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800906e:	e00f      	b.n	8009090 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009070:	f7fd fc92 	bl	8006998 <HAL_GetTick>
 8009074:	4602      	mov	r2, r0
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	2b02      	cmp	r3, #2
 800907c:	d908      	bls.n	8009090 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e146      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
 8009082:	bf00      	nop
 8009084:	40021000 	.word	0x40021000
 8009088:	42420000 	.word	0x42420000
 800908c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009090:	4b92      	ldr	r3, [pc, #584]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009094:	f003 0302 	and.w	r3, r3, #2
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1e9      	bne.n	8009070 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f003 0304 	and.w	r3, r3, #4
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f000 80a6 	beq.w	80091f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090aa:	2300      	movs	r3, #0
 80090ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090ae:	4b8b      	ldr	r3, [pc, #556]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 80090b0:	69db      	ldr	r3, [r3, #28]
 80090b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d10d      	bne.n	80090d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090ba:	4b88      	ldr	r3, [pc, #544]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	4a87      	ldr	r2, [pc, #540]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 80090c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090c4:	61d3      	str	r3, [r2, #28]
 80090c6:	4b85      	ldr	r3, [pc, #532]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 80090c8:	69db      	ldr	r3, [r3, #28]
 80090ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090ce:	60bb      	str	r3, [r7, #8]
 80090d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80090d2:	2301      	movs	r3, #1
 80090d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090d6:	4b82      	ldr	r3, [pc, #520]	; (80092e0 <HAL_RCC_OscConfig+0x4c8>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d118      	bne.n	8009114 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80090e2:	4b7f      	ldr	r3, [pc, #508]	; (80092e0 <HAL_RCC_OscConfig+0x4c8>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a7e      	ldr	r2, [pc, #504]	; (80092e0 <HAL_RCC_OscConfig+0x4c8>)
 80090e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80090ee:	f7fd fc53 	bl	8006998 <HAL_GetTick>
 80090f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80090f4:	e008      	b.n	8009108 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80090f6:	f7fd fc4f 	bl	8006998 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	2b64      	cmp	r3, #100	; 0x64
 8009102:	d901      	bls.n	8009108 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e103      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009108:	4b75      	ldr	r3, [pc, #468]	; (80092e0 <HAL_RCC_OscConfig+0x4c8>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009110:	2b00      	cmp	r3, #0
 8009112:	d0f0      	beq.n	80090f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d106      	bne.n	800912a <HAL_RCC_OscConfig+0x312>
 800911c:	4b6f      	ldr	r3, [pc, #444]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 800911e:	6a1b      	ldr	r3, [r3, #32]
 8009120:	4a6e      	ldr	r2, [pc, #440]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009122:	f043 0301 	orr.w	r3, r3, #1
 8009126:	6213      	str	r3, [r2, #32]
 8009128:	e02d      	b.n	8009186 <HAL_RCC_OscConfig+0x36e>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10c      	bne.n	800914c <HAL_RCC_OscConfig+0x334>
 8009132:	4b6a      	ldr	r3, [pc, #424]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	4a69      	ldr	r2, [pc, #420]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009138:	f023 0301 	bic.w	r3, r3, #1
 800913c:	6213      	str	r3, [r2, #32]
 800913e:	4b67      	ldr	r3, [pc, #412]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	4a66      	ldr	r2, [pc, #408]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009144:	f023 0304 	bic.w	r3, r3, #4
 8009148:	6213      	str	r3, [r2, #32]
 800914a:	e01c      	b.n	8009186 <HAL_RCC_OscConfig+0x36e>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	2b05      	cmp	r3, #5
 8009152:	d10c      	bne.n	800916e <HAL_RCC_OscConfig+0x356>
 8009154:	4b61      	ldr	r3, [pc, #388]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009156:	6a1b      	ldr	r3, [r3, #32]
 8009158:	4a60      	ldr	r2, [pc, #384]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 800915a:	f043 0304 	orr.w	r3, r3, #4
 800915e:	6213      	str	r3, [r2, #32]
 8009160:	4b5e      	ldr	r3, [pc, #376]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009162:	6a1b      	ldr	r3, [r3, #32]
 8009164:	4a5d      	ldr	r2, [pc, #372]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009166:	f043 0301 	orr.w	r3, r3, #1
 800916a:	6213      	str	r3, [r2, #32]
 800916c:	e00b      	b.n	8009186 <HAL_RCC_OscConfig+0x36e>
 800916e:	4b5b      	ldr	r3, [pc, #364]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	4a5a      	ldr	r2, [pc, #360]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009174:	f023 0301 	bic.w	r3, r3, #1
 8009178:	6213      	str	r3, [r2, #32]
 800917a:	4b58      	ldr	r3, [pc, #352]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	4a57      	ldr	r2, [pc, #348]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009180:	f023 0304 	bic.w	r3, r3, #4
 8009184:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d015      	beq.n	80091ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800918e:	f7fd fc03 	bl	8006998 <HAL_GetTick>
 8009192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009194:	e00a      	b.n	80091ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009196:	f7fd fbff 	bl	8006998 <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d901      	bls.n	80091ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e0b1      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091ac:	4b4b      	ldr	r3, [pc, #300]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 80091ae:	6a1b      	ldr	r3, [r3, #32]
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d0ee      	beq.n	8009196 <HAL_RCC_OscConfig+0x37e>
 80091b8:	e014      	b.n	80091e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091ba:	f7fd fbed 	bl	8006998 <HAL_GetTick>
 80091be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091c0:	e00a      	b.n	80091d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091c2:	f7fd fbe9 	bl	8006998 <HAL_GetTick>
 80091c6:	4602      	mov	r2, r0
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d901      	bls.n	80091d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e09b      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091d8:	4b40      	ldr	r3, [pc, #256]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 80091da:	6a1b      	ldr	r3, [r3, #32]
 80091dc:	f003 0302 	and.w	r3, r3, #2
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1ee      	bne.n	80091c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80091e4:	7dfb      	ldrb	r3, [r7, #23]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d105      	bne.n	80091f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091ea:	4b3c      	ldr	r3, [pc, #240]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	4a3b      	ldr	r2, [pc, #236]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 80091f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f000 8087 	beq.w	800930e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009200:	4b36      	ldr	r3, [pc, #216]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	f003 030c 	and.w	r3, r3, #12
 8009208:	2b08      	cmp	r3, #8
 800920a:	d061      	beq.n	80092d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	69db      	ldr	r3, [r3, #28]
 8009210:	2b02      	cmp	r3, #2
 8009212:	d146      	bne.n	80092a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009214:	4b33      	ldr	r3, [pc, #204]	; (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800921a:	f7fd fbbd 	bl	8006998 <HAL_GetTick>
 800921e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009220:	e008      	b.n	8009234 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009222:	f7fd fbb9 	bl	8006998 <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	2b02      	cmp	r3, #2
 800922e:	d901      	bls.n	8009234 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e06d      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009234:	4b29      	ldr	r3, [pc, #164]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1f0      	bne.n	8009222 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6a1b      	ldr	r3, [r3, #32]
 8009244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009248:	d108      	bne.n	800925c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800924a:	4b24      	ldr	r3, [pc, #144]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	4921      	ldr	r1, [pc, #132]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009258:	4313      	orrs	r3, r2
 800925a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800925c:	4b1f      	ldr	r3, [pc, #124]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a19      	ldr	r1, [r3, #32]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926c:	430b      	orrs	r3, r1
 800926e:	491b      	ldr	r1, [pc, #108]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009270:	4313      	orrs	r3, r2
 8009272:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009274:	4b1b      	ldr	r3, [pc, #108]	; (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 8009276:	2201      	movs	r2, #1
 8009278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800927a:	f7fd fb8d 	bl	8006998 <HAL_GetTick>
 800927e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009280:	e008      	b.n	8009294 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009282:	f7fd fb89 	bl	8006998 <HAL_GetTick>
 8009286:	4602      	mov	r2, r0
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	2b02      	cmp	r3, #2
 800928e:	d901      	bls.n	8009294 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e03d      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009294:	4b11      	ldr	r3, [pc, #68]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800929c:	2b00      	cmp	r3, #0
 800929e:	d0f0      	beq.n	8009282 <HAL_RCC_OscConfig+0x46a>
 80092a0:	e035      	b.n	800930e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092a2:	4b10      	ldr	r3, [pc, #64]	; (80092e4 <HAL_RCC_OscConfig+0x4cc>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092a8:	f7fd fb76 	bl	8006998 <HAL_GetTick>
 80092ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80092ae:	e008      	b.n	80092c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092b0:	f7fd fb72 	bl	8006998 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d901      	bls.n	80092c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e026      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80092c2:	4b06      	ldr	r3, [pc, #24]	; (80092dc <HAL_RCC_OscConfig+0x4c4>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1f0      	bne.n	80092b0 <HAL_RCC_OscConfig+0x498>
 80092ce:	e01e      	b.n	800930e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d107      	bne.n	80092e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	e019      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
 80092dc:	40021000 	.word	0x40021000
 80092e0:	40007000 	.word	0x40007000
 80092e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80092e8:	4b0b      	ldr	r3, [pc, #44]	; (8009318 <HAL_RCC_OscConfig+0x500>)
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d106      	bne.n	800930a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009306:	429a      	cmp	r2, r3
 8009308:	d001      	beq.n	800930e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e000      	b.n	8009310 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	40021000 	.word	0x40021000

0800931c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d101      	bne.n	8009330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800932c:	2301      	movs	r3, #1
 800932e:	e0d0      	b.n	80094d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009330:	4b6a      	ldr	r3, [pc, #424]	; (80094dc <HAL_RCC_ClockConfig+0x1c0>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0307 	and.w	r3, r3, #7
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	429a      	cmp	r2, r3
 800933c:	d910      	bls.n	8009360 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800933e:	4b67      	ldr	r3, [pc, #412]	; (80094dc <HAL_RCC_ClockConfig+0x1c0>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f023 0207 	bic.w	r2, r3, #7
 8009346:	4965      	ldr	r1, [pc, #404]	; (80094dc <HAL_RCC_ClockConfig+0x1c0>)
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	4313      	orrs	r3, r2
 800934c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800934e:	4b63      	ldr	r3, [pc, #396]	; (80094dc <HAL_RCC_ClockConfig+0x1c0>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0307 	and.w	r3, r3, #7
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	429a      	cmp	r2, r3
 800935a:	d001      	beq.n	8009360 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e0b8      	b.n	80094d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f003 0302 	and.w	r3, r3, #2
 8009368:	2b00      	cmp	r3, #0
 800936a:	d020      	beq.n	80093ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 0304 	and.w	r3, r3, #4
 8009374:	2b00      	cmp	r3, #0
 8009376:	d005      	beq.n	8009384 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009378:	4b59      	ldr	r3, [pc, #356]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	4a58      	ldr	r2, [pc, #352]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 800937e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009382:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 0308 	and.w	r3, r3, #8
 800938c:	2b00      	cmp	r3, #0
 800938e:	d005      	beq.n	800939c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009390:	4b53      	ldr	r3, [pc, #332]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	4a52      	ldr	r2, [pc, #328]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 8009396:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800939a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800939c:	4b50      	ldr	r3, [pc, #320]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	494d      	ldr	r1, [pc, #308]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d040      	beq.n	800943c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d107      	bne.n	80093d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80093c2:	4b47      	ldr	r3, [pc, #284]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d115      	bne.n	80093fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e07f      	b.n	80094d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d107      	bne.n	80093ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093da:	4b41      	ldr	r3, [pc, #260]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d109      	bne.n	80093fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e073      	b.n	80094d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80093ea:	4b3d      	ldr	r3, [pc, #244]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f003 0302 	and.w	r3, r3, #2
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d101      	bne.n	80093fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e06b      	b.n	80094d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80093fa:	4b39      	ldr	r3, [pc, #228]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	f023 0203 	bic.w	r2, r3, #3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	685b      	ldr	r3, [r3, #4]
 8009406:	4936      	ldr	r1, [pc, #216]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 8009408:	4313      	orrs	r3, r2
 800940a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800940c:	f7fd fac4 	bl	8006998 <HAL_GetTick>
 8009410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009412:	e00a      	b.n	800942a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009414:	f7fd fac0 	bl	8006998 <HAL_GetTick>
 8009418:	4602      	mov	r2, r0
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009422:	4293      	cmp	r3, r2
 8009424:	d901      	bls.n	800942a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e053      	b.n	80094d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800942a:	4b2d      	ldr	r3, [pc, #180]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	f003 020c 	and.w	r2, r3, #12
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	429a      	cmp	r2, r3
 800943a:	d1eb      	bne.n	8009414 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800943c:	4b27      	ldr	r3, [pc, #156]	; (80094dc <HAL_RCC_ClockConfig+0x1c0>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0307 	and.w	r3, r3, #7
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	429a      	cmp	r2, r3
 8009448:	d210      	bcs.n	800946c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800944a:	4b24      	ldr	r3, [pc, #144]	; (80094dc <HAL_RCC_ClockConfig+0x1c0>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f023 0207 	bic.w	r2, r3, #7
 8009452:	4922      	ldr	r1, [pc, #136]	; (80094dc <HAL_RCC_ClockConfig+0x1c0>)
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	4313      	orrs	r3, r2
 8009458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800945a:	4b20      	ldr	r3, [pc, #128]	; (80094dc <HAL_RCC_ClockConfig+0x1c0>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0307 	and.w	r3, r3, #7
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	429a      	cmp	r2, r3
 8009466:	d001      	beq.n	800946c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009468:	2301      	movs	r3, #1
 800946a:	e032      	b.n	80094d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 0304 	and.w	r3, r3, #4
 8009474:	2b00      	cmp	r3, #0
 8009476:	d008      	beq.n	800948a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009478:	4b19      	ldr	r3, [pc, #100]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	4916      	ldr	r1, [pc, #88]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 8009486:	4313      	orrs	r3, r2
 8009488:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f003 0308 	and.w	r3, r3, #8
 8009492:	2b00      	cmp	r3, #0
 8009494:	d009      	beq.n	80094aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009496:	4b12      	ldr	r3, [pc, #72]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	490e      	ldr	r1, [pc, #56]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 80094a6:	4313      	orrs	r3, r2
 80094a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80094aa:	f000 f821 	bl	80094f0 <HAL_RCC_GetSysClockFreq>
 80094ae:	4602      	mov	r2, r0
 80094b0:	4b0b      	ldr	r3, [pc, #44]	; (80094e0 <HAL_RCC_ClockConfig+0x1c4>)
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	091b      	lsrs	r3, r3, #4
 80094b6:	f003 030f 	and.w	r3, r3, #15
 80094ba:	490a      	ldr	r1, [pc, #40]	; (80094e4 <HAL_RCC_ClockConfig+0x1c8>)
 80094bc:	5ccb      	ldrb	r3, [r1, r3]
 80094be:	fa22 f303 	lsr.w	r3, r2, r3
 80094c2:	4a09      	ldr	r2, [pc, #36]	; (80094e8 <HAL_RCC_ClockConfig+0x1cc>)
 80094c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80094c6:	4b09      	ldr	r3, [pc, #36]	; (80094ec <HAL_RCC_ClockConfig+0x1d0>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fd fa22 	bl	8006914 <HAL_InitTick>

  return HAL_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	40022000 	.word	0x40022000
 80094e0:	40021000 	.word	0x40021000
 80094e4:	0800dc8c 	.word	0x0800dc8c
 80094e8:	2000002c 	.word	0x2000002c
 80094ec:	20000030 	.word	0x20000030

080094f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b087      	sub	sp, #28
 80094f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	60fb      	str	r3, [r7, #12]
 80094fa:	2300      	movs	r3, #0
 80094fc:	60bb      	str	r3, [r7, #8]
 80094fe:	2300      	movs	r3, #0
 8009500:	617b      	str	r3, [r7, #20]
 8009502:	2300      	movs	r3, #0
 8009504:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8009506:	2300      	movs	r3, #0
 8009508:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800950a:	4b1e      	ldr	r3, [pc, #120]	; (8009584 <HAL_RCC_GetSysClockFreq+0x94>)
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f003 030c 	and.w	r3, r3, #12
 8009516:	2b04      	cmp	r3, #4
 8009518:	d002      	beq.n	8009520 <HAL_RCC_GetSysClockFreq+0x30>
 800951a:	2b08      	cmp	r3, #8
 800951c:	d003      	beq.n	8009526 <HAL_RCC_GetSysClockFreq+0x36>
 800951e:	e027      	b.n	8009570 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8009520:	4b19      	ldr	r3, [pc, #100]	; (8009588 <HAL_RCC_GetSysClockFreq+0x98>)
 8009522:	613b      	str	r3, [r7, #16]
      break;
 8009524:	e027      	b.n	8009576 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	0c9b      	lsrs	r3, r3, #18
 800952a:	f003 030f 	and.w	r3, r3, #15
 800952e:	4a17      	ldr	r2, [pc, #92]	; (800958c <HAL_RCC_GetSysClockFreq+0x9c>)
 8009530:	5cd3      	ldrb	r3, [r2, r3]
 8009532:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d010      	beq.n	8009560 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800953e:	4b11      	ldr	r3, [pc, #68]	; (8009584 <HAL_RCC_GetSysClockFreq+0x94>)
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	0c5b      	lsrs	r3, r3, #17
 8009544:	f003 0301 	and.w	r3, r3, #1
 8009548:	4a11      	ldr	r2, [pc, #68]	; (8009590 <HAL_RCC_GetSysClockFreq+0xa0>)
 800954a:	5cd3      	ldrb	r3, [r2, r3]
 800954c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a0d      	ldr	r2, [pc, #52]	; (8009588 <HAL_RCC_GetSysClockFreq+0x98>)
 8009552:	fb03 f202 	mul.w	r2, r3, r2
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	fbb2 f3f3 	udiv	r3, r2, r3
 800955c:	617b      	str	r3, [r7, #20]
 800955e:	e004      	b.n	800956a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a0c      	ldr	r2, [pc, #48]	; (8009594 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009564:	fb02 f303 	mul.w	r3, r2, r3
 8009568:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800956a:	697b      	ldr	r3, [r7, #20]
 800956c:	613b      	str	r3, [r7, #16]
      break;
 800956e:	e002      	b.n	8009576 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009570:	4b05      	ldr	r3, [pc, #20]	; (8009588 <HAL_RCC_GetSysClockFreq+0x98>)
 8009572:	613b      	str	r3, [r7, #16]
      break;
 8009574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009576:	693b      	ldr	r3, [r7, #16]
}
 8009578:	4618      	mov	r0, r3
 800957a:	371c      	adds	r7, #28
 800957c:	46bd      	mov	sp, r7
 800957e:	bc80      	pop	{r7}
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	40021000 	.word	0x40021000
 8009588:	007a1200 	.word	0x007a1200
 800958c:	0800dca4 	.word	0x0800dca4
 8009590:	0800dcb4 	.word	0x0800dcb4
 8009594:	003d0900 	.word	0x003d0900

08009598 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009598:	b480      	push	{r7}
 800959a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800959c:	4b02      	ldr	r3, [pc, #8]	; (80095a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800959e:	681b      	ldr	r3, [r3, #0]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bc80      	pop	{r7}
 80095a6:	4770      	bx	lr
 80095a8:	2000002c 	.word	0x2000002c

080095ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80095b0:	f7ff fff2 	bl	8009598 <HAL_RCC_GetHCLKFreq>
 80095b4:	4602      	mov	r2, r0
 80095b6:	4b05      	ldr	r3, [pc, #20]	; (80095cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	0a1b      	lsrs	r3, r3, #8
 80095bc:	f003 0307 	and.w	r3, r3, #7
 80095c0:	4903      	ldr	r1, [pc, #12]	; (80095d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095c2:	5ccb      	ldrb	r3, [r1, r3]
 80095c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	40021000 	.word	0x40021000
 80095d0:	0800dc9c 	.word	0x0800dc9c

080095d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80095d8:	f7ff ffde 	bl	8009598 <HAL_RCC_GetHCLKFreq>
 80095dc:	4602      	mov	r2, r0
 80095de:	4b05      	ldr	r3, [pc, #20]	; (80095f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	0adb      	lsrs	r3, r3, #11
 80095e4:	f003 0307 	and.w	r3, r3, #7
 80095e8:	4903      	ldr	r1, [pc, #12]	; (80095f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095ea:	5ccb      	ldrb	r3, [r1, r3]
 80095ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	bd80      	pop	{r7, pc}
 80095f4:	40021000 	.word	0x40021000
 80095f8:	0800dc9c 	.word	0x0800dc9c

080095fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009604:	4b0a      	ldr	r3, [pc, #40]	; (8009630 <RCC_Delay+0x34>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a0a      	ldr	r2, [pc, #40]	; (8009634 <RCC_Delay+0x38>)
 800960a:	fba2 2303 	umull	r2, r3, r2, r3
 800960e:	0a5b      	lsrs	r3, r3, #9
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	fb02 f303 	mul.w	r3, r2, r3
 8009616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009618:	bf00      	nop
  }
  while (Delay --);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	1e5a      	subs	r2, r3, #1
 800961e:	60fa      	str	r2, [r7, #12]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1f9      	bne.n	8009618 <RCC_Delay+0x1c>
}
 8009624:	bf00      	nop
 8009626:	bf00      	nop
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	bc80      	pop	{r7}
 800962e:	4770      	bx	lr
 8009630:	2000002c 	.word	0x2000002c
 8009634:	10624dd3 	.word	0x10624dd3

08009638 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8009640:	2300      	movs	r3, #0
 8009642:	613b      	str	r3, [r7, #16]
 8009644:	2300      	movs	r3, #0
 8009646:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f003 0301 	and.w	r3, r3, #1
 8009650:	2b00      	cmp	r3, #0
 8009652:	d07d      	beq.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8009654:	2300      	movs	r3, #0
 8009656:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009658:	4b4f      	ldr	r3, [pc, #316]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800965a:	69db      	ldr	r3, [r3, #28]
 800965c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10d      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009664:	4b4c      	ldr	r3, [pc, #304]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	4a4b      	ldr	r2, [pc, #300]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800966a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800966e:	61d3      	str	r3, [r2, #28]
 8009670:	4b49      	ldr	r3, [pc, #292]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009672:	69db      	ldr	r3, [r3, #28]
 8009674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009678:	60bb      	str	r3, [r7, #8]
 800967a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800967c:	2301      	movs	r3, #1
 800967e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009680:	4b46      	ldr	r3, [pc, #280]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009688:	2b00      	cmp	r3, #0
 800968a:	d118      	bne.n	80096be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800968c:	4b43      	ldr	r3, [pc, #268]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a42      	ldr	r2, [pc, #264]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8009692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009696:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009698:	f7fd f97e 	bl	8006998 <HAL_GetTick>
 800969c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800969e:	e008      	b.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096a0:	f7fd f97a 	bl	8006998 <HAL_GetTick>
 80096a4:	4602      	mov	r2, r0
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	2b64      	cmp	r3, #100	; 0x64
 80096ac:	d901      	bls.n	80096b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80096ae:	2303      	movs	r3, #3
 80096b0:	e06d      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80096b2:	4b3a      	ldr	r3, [pc, #232]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0f0      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80096be:	4b36      	ldr	r3, [pc, #216]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d02e      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096d6:	68fa      	ldr	r2, [r7, #12]
 80096d8:	429a      	cmp	r2, r3
 80096da:	d027      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096dc:	4b2e      	ldr	r3, [pc, #184]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80096e6:	4b2e      	ldr	r3, [pc, #184]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80096e8:	2201      	movs	r2, #1
 80096ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80096ec:	4b2c      	ldr	r3, [pc, #176]	; (80097a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80096ee:	2200      	movs	r2, #0
 80096f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80096f2:	4a29      	ldr	r2, [pc, #164]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d014      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009702:	f7fd f949 	bl	8006998 <HAL_GetTick>
 8009706:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009708:	e00a      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800970a:	f7fd f945 	bl	8006998 <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	f241 3288 	movw	r2, #5000	; 0x1388
 8009718:	4293      	cmp	r3, r2
 800971a:	d901      	bls.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e036      	b.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009720:	4b1d      	ldr	r3, [pc, #116]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009722:	6a1b      	ldr	r3, [r3, #32]
 8009724:	f003 0302 	and.w	r3, r3, #2
 8009728:	2b00      	cmp	r3, #0
 800972a:	d0ee      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800972c:	4b1a      	ldr	r3, [pc, #104]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800972e:	6a1b      	ldr	r3, [r3, #32]
 8009730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	4917      	ldr	r1, [pc, #92]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800973a:	4313      	orrs	r3, r2
 800973c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800973e:	7dfb      	ldrb	r3, [r7, #23]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d105      	bne.n	8009750 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009744:	4b14      	ldr	r3, [pc, #80]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009746:	69db      	ldr	r3, [r3, #28]
 8009748:	4a13      	ldr	r2, [pc, #76]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800974a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800974e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 0302 	and.w	r3, r3, #2
 8009758:	2b00      	cmp	r3, #0
 800975a:	d008      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800975c:	4b0e      	ldr	r3, [pc, #56]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	689b      	ldr	r3, [r3, #8]
 8009768:	490b      	ldr	r1, [pc, #44]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800976a:	4313      	orrs	r3, r2
 800976c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 0310 	and.w	r3, r3, #16
 8009776:	2b00      	cmp	r3, #0
 8009778:	d008      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800977a:	4b07      	ldr	r3, [pc, #28]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	4904      	ldr	r1, [pc, #16]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8009788:	4313      	orrs	r3, r2
 800978a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3718      	adds	r7, #24
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	40021000 	.word	0x40021000
 800979c:	40007000 	.word	0x40007000
 80097a0:	42420440 	.word	0x42420440

080097a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b088      	sub	sp, #32
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80097ac:	2300      	movs	r3, #0
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	2300      	movs	r3, #0
 80097b2:	61fb      	str	r3, [r7, #28]
 80097b4:	2300      	movs	r3, #0
 80097b6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80097b8:	2300      	movs	r3, #0
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	2300      	movs	r3, #0
 80097be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b10      	cmp	r3, #16
 80097c4:	d00a      	beq.n	80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b10      	cmp	r3, #16
 80097ca:	f200 808a 	bhi.w	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b01      	cmp	r3, #1
 80097d2:	d045      	beq.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d075      	beq.n	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80097da:	e082      	b.n	80098e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80097dc:	4b46      	ldr	r3, [pc, #280]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80097de:	685b      	ldr	r3, [r3, #4]
 80097e0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80097e2:	4b45      	ldr	r3, [pc, #276]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d07b      	beq.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	0c9b      	lsrs	r3, r3, #18
 80097f2:	f003 030f 	and.w	r3, r3, #15
 80097f6:	4a41      	ldr	r2, [pc, #260]	; (80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80097f8:	5cd3      	ldrb	r3, [r2, r3]
 80097fa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009802:	2b00      	cmp	r3, #0
 8009804:	d015      	beq.n	8009832 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009806:	4b3c      	ldr	r3, [pc, #240]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	0c5b      	lsrs	r3, r3, #17
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	4a3b      	ldr	r2, [pc, #236]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8009812:	5cd3      	ldrb	r3, [r2, r3]
 8009814:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d00d      	beq.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8009820:	4a38      	ldr	r2, [pc, #224]	; (8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	fbb2 f2f3 	udiv	r2, r2, r3
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	fb02 f303 	mul.w	r3, r2, r3
 800982e:	61fb      	str	r3, [r7, #28]
 8009830:	e004      	b.n	800983c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	4a34      	ldr	r2, [pc, #208]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8009836:	fb02 f303 	mul.w	r3, r2, r3
 800983a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800983c:	4b2e      	ldr	r3, [pc, #184]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009848:	d102      	bne.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	61bb      	str	r3, [r7, #24]
      break;
 800984e:	e04a      	b.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	005b      	lsls	r3, r3, #1
 8009854:	4a2d      	ldr	r2, [pc, #180]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8009856:	fba2 2303 	umull	r2, r3, r2, r3
 800985a:	085b      	lsrs	r3, r3, #1
 800985c:	61bb      	str	r3, [r7, #24]
      break;
 800985e:	e042      	b.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8009860:	4b25      	ldr	r3, [pc, #148]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009862:	6a1b      	ldr	r3, [r3, #32]
 8009864:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800986c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009870:	d108      	bne.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f003 0302 	and.w	r3, r3, #2
 8009878:	2b00      	cmp	r3, #0
 800987a:	d003      	beq.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800987c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009880:	61bb      	str	r3, [r7, #24]
 8009882:	e01f      	b.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800988a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800988e:	d109      	bne.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8009890:	4b19      	ldr	r3, [pc, #100]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	f003 0302 	and.w	r3, r3, #2
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800989c:	f649 4340 	movw	r3, #40000	; 0x9c40
 80098a0:	61bb      	str	r3, [r7, #24]
 80098a2:	e00f      	b.n	80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098ae:	d11c      	bne.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80098b0:	4b11      	ldr	r3, [pc, #68]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d016      	beq.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80098bc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80098c0:	61bb      	str	r3, [r7, #24]
      break;
 80098c2:	e012      	b.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80098c4:	e011      	b.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80098c6:	f7ff fe85 	bl	80095d4 <HAL_RCC_GetPCLK2Freq>
 80098ca:	4602      	mov	r2, r0
 80098cc:	4b0a      	ldr	r3, [pc, #40]	; (80098f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	0b9b      	lsrs	r3, r3, #14
 80098d2:	f003 0303 	and.w	r3, r3, #3
 80098d6:	3301      	adds	r3, #1
 80098d8:	005b      	lsls	r3, r3, #1
 80098da:	fbb2 f3f3 	udiv	r3, r2, r3
 80098de:	61bb      	str	r3, [r7, #24]
      break;
 80098e0:	e004      	b.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80098e2:	bf00      	nop
 80098e4:	e002      	b.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80098e6:	bf00      	nop
 80098e8:	e000      	b.n	80098ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80098ea:	bf00      	nop
    }
  }
  return (frequency);
 80098ec:	69bb      	ldr	r3, [r7, #24]
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3720      	adds	r7, #32
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	40021000 	.word	0x40021000
 80098fc:	0800dcb8 	.word	0x0800dcb8
 8009900:	0800dcc8 	.word	0x0800dcc8
 8009904:	007a1200 	.word	0x007a1200
 8009908:	003d0900 	.word	0x003d0900
 800990c:	aaaaaaab 	.word	0xaaaaaaab

08009910 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8009918:	2300      	movs	r3, #0
 800991a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d101      	bne.n	8009926 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e07a      	b.n	8009a1c <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	7c5b      	ldrb	r3, [r3, #17]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b00      	cmp	r3, #0
 800992e:	d105      	bne.n	800993c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f7fc fb08 	bl	8005f4c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2202      	movs	r2, #2
 8009940:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f870 	bl	8009a28 <HAL_RTC_WaitForSynchro>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d004      	beq.n	8009958 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2204      	movs	r2, #4
 8009952:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e061      	b.n	8009a1c <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f892 	bl	8009a82 <RTC_EnterInitMode>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d004      	beq.n	800996e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2204      	movs	r2, #4
 8009968:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e056      	b.n	8009a1c <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	685a      	ldr	r2, [r3, #4]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f022 0207 	bic.w	r2, r2, #7
 800997c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d005      	beq.n	8009992 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8009986:	4b27      	ldr	r3, [pc, #156]	; (8009a24 <HAL_RTC_Init+0x114>)
 8009988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998a:	4a26      	ldr	r2, [pc, #152]	; (8009a24 <HAL_RTC_Init+0x114>)
 800998c:	f023 0301 	bic.w	r3, r3, #1
 8009990:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8009992:	4b24      	ldr	r3, [pc, #144]	; (8009a24 <HAL_RTC_Init+0x114>)
 8009994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009996:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	689b      	ldr	r3, [r3, #8]
 800999e:	4921      	ldr	r1, [pc, #132]	; (8009a24 <HAL_RTC_Init+0x114>)
 80099a0:	4313      	orrs	r3, r2
 80099a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ac:	d003      	beq.n	80099b6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	e00e      	b.n	80099d4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80099b6:	2001      	movs	r0, #1
 80099b8:	f7ff fef4 	bl	80097a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80099bc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d104      	bne.n	80099ce <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2204      	movs	r2, #4
 80099c8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e026      	b.n	8009a1c <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	3b01      	subs	r3, #1
 80099d2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	0c1a      	lsrs	r2, r3, #16
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f002 020f 	and.w	r2, r2, #15
 80099e0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	b292      	uxth	r2, r2
 80099ea:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 f870 	bl	8009ad2 <RTC_ExitInitMode>
 80099f2:	4603      	mov	r3, r0
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d004      	beq.n	8009a02 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2204      	movs	r2, #4
 80099fc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e00c      	b.n	8009a1c <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
  }
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	40006c00 	.word	0x40006c00

08009a28 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a30:	2300      	movs	r3, #0
 8009a32:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e01d      	b.n	8009a7a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	685a      	ldr	r2, [r3, #4]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 0208 	bic.w	r2, r2, #8
 8009a4c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8009a4e:	f7fc ffa3 	bl	8006998 <HAL_GetTick>
 8009a52:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009a54:	e009      	b.n	8009a6a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009a56:	f7fc ff9f 	bl	8006998 <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a64:	d901      	bls.n	8009a6a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8009a66:	2303      	movs	r3, #3
 8009a68:	e007      	b.n	8009a7a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	f003 0308 	and.w	r3, r3, #8
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d0ee      	beq.n	8009a56 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b084      	sub	sp, #16
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8009a8e:	f7fc ff83 	bl	8006998 <HAL_GetTick>
 8009a92:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009a94:	e009      	b.n	8009aaa <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009a96:	f7fc ff7f 	bl	8006998 <HAL_GetTick>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	1ad3      	subs	r3, r2, r3
 8009aa0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009aa4:	d901      	bls.n	8009aaa <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	e00f      	b.n	8009aca <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	f003 0320 	and.w	r3, r3, #32
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d0ee      	beq.n	8009a96 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	685a      	ldr	r2, [r3, #4]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0210 	orr.w	r2, r2, #16
 8009ac6:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3710      	adds	r7, #16
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f022 0210 	bic.w	r2, r2, #16
 8009aec:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8009aee:	f7fc ff53 	bl	8006998 <HAL_GetTick>
 8009af2:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009af4:	e009      	b.n	8009b0a <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8009af6:	f7fc ff4f 	bl	8006998 <HAL_GetTick>
 8009afa:	4602      	mov	r2, r0
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b04:	d901      	bls.n	8009b0a <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8009b06:	2303      	movs	r3, #3
 8009b08:	e007      	b.n	8009b1a <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	f003 0320 	and.w	r3, r3, #32
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d0ee      	beq.n	8009af6 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b082      	sub	sp, #8
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e076      	b.n	8009c22 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d108      	bne.n	8009b4e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b44:	d009      	beq.n	8009b5a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	61da      	str	r2, [r3, #28]
 8009b4c:	e005      	b.n	8009b5a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d106      	bne.n	8009b7a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7fc fa43 	bl	8006000 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b90:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009ba2:	431a      	orrs	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	68db      	ldr	r3, [r3, #12]
 8009ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bac:	431a      	orrs	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	f003 0302 	and.w	r3, r3, #2
 8009bb6:	431a      	orrs	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	695b      	ldr	r3, [r3, #20]
 8009bbc:	f003 0301 	and.w	r3, r3, #1
 8009bc0:	431a      	orrs	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009bca:	431a      	orrs	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	69db      	ldr	r3, [r3, #28]
 8009bd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bd4:	431a      	orrs	r2, r3
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6a1b      	ldr	r3, [r3, #32]
 8009bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bde:	ea42 0103 	orr.w	r1, r2, r3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	430a      	orrs	r2, r1
 8009bf0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	0c1a      	lsrs	r2, r3, #16
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f002 0204 	and.w	r2, r2, #4
 8009c00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	69da      	ldr	r2, [r3, #28]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b088      	sub	sp, #32
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	60f8      	str	r0, [r7, #12]
 8009c32:	60b9      	str	r1, [r7, #8]
 8009c34:	603b      	str	r3, [r7, #0]
 8009c36:	4613      	mov	r3, r2
 8009c38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009c44:	2b01      	cmp	r3, #1
 8009c46:	d101      	bne.n	8009c4c <HAL_SPI_Transmit+0x22>
 8009c48:	2302      	movs	r3, #2
 8009c4a:	e12d      	b.n	8009ea8 <HAL_SPI_Transmit+0x27e>
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2201      	movs	r2, #1
 8009c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009c54:	f7fc fea0 	bl	8006998 <HAL_GetTick>
 8009c58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009c5a:	88fb      	ldrh	r3, [r7, #6]
 8009c5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d002      	beq.n	8009c70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009c6a:	2302      	movs	r3, #2
 8009c6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009c6e:	e116      	b.n	8009e9e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <HAL_SPI_Transmit+0x52>
 8009c76:	88fb      	ldrh	r3, [r7, #6]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d102      	bne.n	8009c82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009c80:	e10d      	b.n	8009e9e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2203      	movs	r2, #3
 8009c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	88fa      	ldrh	r2, [r7, #6]
 8009c9a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	88fa      	ldrh	r2, [r7, #6]
 8009ca0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cc8:	d10f      	bne.n	8009cea <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ce8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cf4:	2b40      	cmp	r3, #64	; 0x40
 8009cf6:	d007      	beq.n	8009d08 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009d06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d10:	d14f      	bne.n	8009db2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d002      	beq.n	8009d20 <HAL_SPI_Transmit+0xf6>
 8009d1a:	8afb      	ldrh	r3, [r7, #22]
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d142      	bne.n	8009da6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d24:	881a      	ldrh	r2, [r3, #0]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d30:	1c9a      	adds	r2, r3, #2
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	b29a      	uxth	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009d44:	e02f      	b.n	8009da6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	f003 0302 	and.w	r3, r3, #2
 8009d50:	2b02      	cmp	r3, #2
 8009d52:	d112      	bne.n	8009d7a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d58:	881a      	ldrh	r2, [r3, #0]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d64:	1c9a      	adds	r2, r3, #2
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	3b01      	subs	r3, #1
 8009d72:	b29a      	uxth	r2, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	86da      	strh	r2, [r3, #54]	; 0x36
 8009d78:	e015      	b.n	8009da6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009d7a:	f7fc fe0d 	bl	8006998 <HAL_GetTick>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d803      	bhi.n	8009d92 <HAL_SPI_Transmit+0x168>
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d90:	d102      	bne.n	8009d98 <HAL_SPI_Transmit+0x16e>
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d106      	bne.n	8009da6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8009d98:	2303      	movs	r3, #3
 8009d9a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009da4:	e07b      	b.n	8009e9e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1ca      	bne.n	8009d46 <HAL_SPI_Transmit+0x11c>
 8009db0:	e050      	b.n	8009e54 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d002      	beq.n	8009dc0 <HAL_SPI_Transmit+0x196>
 8009dba:	8afb      	ldrh	r3, [r7, #22]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d144      	bne.n	8009e4a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	330c      	adds	r3, #12
 8009dca:	7812      	ldrb	r2, [r2, #0]
 8009dcc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	3b01      	subs	r3, #1
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009de6:	e030      	b.n	8009e4a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	f003 0302 	and.w	r3, r3, #2
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d113      	bne.n	8009e1e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	330c      	adds	r3, #12
 8009e00:	7812      	ldrb	r2, [r2, #0]
 8009e02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e08:	1c5a      	adds	r2, r3, #1
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	3b01      	subs	r3, #1
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	86da      	strh	r2, [r3, #54]	; 0x36
 8009e1c:	e015      	b.n	8009e4a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e1e:	f7fc fdbb 	bl	8006998 <HAL_GetTick>
 8009e22:	4602      	mov	r2, r0
 8009e24:	69bb      	ldr	r3, [r7, #24]
 8009e26:	1ad3      	subs	r3, r2, r3
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d803      	bhi.n	8009e36 <HAL_SPI_Transmit+0x20c>
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e34:	d102      	bne.n	8009e3c <HAL_SPI_Transmit+0x212>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d106      	bne.n	8009e4a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8009e3c:	2303      	movs	r3, #3
 8009e3e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8009e48:	e029      	b.n	8009e9e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1c9      	bne.n	8009de8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009e54:	69ba      	ldr	r2, [r7, #24]
 8009e56:	6839      	ldr	r1, [r7, #0]
 8009e58:	68f8      	ldr	r0, [r7, #12]
 8009e5a:	f000 fa61 	bl	800a320 <SPI_EndRxTxTransaction>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2220      	movs	r2, #32
 8009e68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10a      	bne.n	8009e88 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009e72:	2300      	movs	r3, #0
 8009e74:	613b      	str	r3, [r7, #16]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68db      	ldr	r3, [r3, #12]
 8009e7c:	613b      	str	r3, [r7, #16]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	613b      	str	r3, [r7, #16]
 8009e86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d002      	beq.n	8009e96 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8009e90:	2301      	movs	r3, #1
 8009e92:	77fb      	strb	r3, [r7, #31]
 8009e94:	e003      	b.n	8009e9e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009ea6:	7ffb      	ldrb	r3, [r7, #31]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3720      	adds	r7, #32
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08c      	sub	sp, #48	; 0x30
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	60b9      	str	r1, [r7, #8]
 8009eba:	607a      	str	r2, [r7, #4]
 8009ebc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d101      	bne.n	8009ed6 <HAL_SPI_TransmitReceive+0x26>
 8009ed2:	2302      	movs	r3, #2
 8009ed4:	e198      	b.n	800a208 <HAL_SPI_TransmitReceive+0x358>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2201      	movs	r2, #1
 8009eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ede:	f7fc fd5b 	bl	8006998 <HAL_GetTick>
 8009ee2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009eea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009ef4:	887b      	ldrh	r3, [r7, #2]
 8009ef6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ef8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d00f      	beq.n	8009f20 <HAL_SPI_TransmitReceive+0x70>
 8009f00:	69fb      	ldr	r3, [r7, #28]
 8009f02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f06:	d107      	bne.n	8009f18 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d103      	bne.n	8009f18 <HAL_SPI_TransmitReceive+0x68>
 8009f10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	d003      	beq.n	8009f20 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009f18:	2302      	movs	r3, #2
 8009f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009f1e:	e16d      	b.n	800a1fc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d005      	beq.n	8009f32 <HAL_SPI_TransmitReceive+0x82>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d002      	beq.n	8009f32 <HAL_SPI_TransmitReceive+0x82>
 8009f2c:	887b      	ldrh	r3, [r7, #2]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d103      	bne.n	8009f3a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009f38:	e160      	b.n	800a1fc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	d003      	beq.n	8009f4e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2205      	movs	r2, #5
 8009f4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	887a      	ldrh	r2, [r7, #2]
 8009f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	887a      	ldrh	r2, [r7, #2]
 8009f64:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	887a      	ldrh	r2, [r7, #2]
 8009f70:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	887a      	ldrh	r2, [r7, #2]
 8009f76:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	2200      	movs	r2, #0
 8009f82:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f8e:	2b40      	cmp	r3, #64	; 0x40
 8009f90:	d007      	beq.n	8009fa2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009faa:	d17c      	bne.n	800a0a6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d002      	beq.n	8009fba <HAL_SPI_TransmitReceive+0x10a>
 8009fb4:	8b7b      	ldrh	r3, [r7, #26]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d16a      	bne.n	800a090 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fbe:	881a      	ldrh	r2, [r3, #0]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fca:	1c9a      	adds	r2, r3, #2
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	3b01      	subs	r3, #1
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009fde:	e057      	b.n	800a090 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	f003 0302 	and.w	r3, r3, #2
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d11b      	bne.n	800a026 <HAL_SPI_TransmitReceive+0x176>
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d016      	beq.n	800a026 <HAL_SPI_TransmitReceive+0x176>
 8009ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d113      	bne.n	800a026 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a002:	881a      	ldrh	r2, [r3, #0]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a00e:	1c9a      	adds	r2, r3, #2
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a018:	b29b      	uxth	r3, r3
 800a01a:	3b01      	subs	r3, #1
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a022:	2300      	movs	r3, #0
 800a024:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	f003 0301 	and.w	r3, r3, #1
 800a030:	2b01      	cmp	r3, #1
 800a032:	d119      	bne.n	800a068 <HAL_SPI_TransmitReceive+0x1b8>
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a038:	b29b      	uxth	r3, r3
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d014      	beq.n	800a068 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	68da      	ldr	r2, [r3, #12]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a048:	b292      	uxth	r2, r2
 800a04a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a050:	1c9a      	adds	r2, r3, #2
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	3b01      	subs	r3, #1
 800a05e:	b29a      	uxth	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a064:	2301      	movs	r3, #1
 800a066:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a068:	f7fc fc96 	bl	8006998 <HAL_GetTick>
 800a06c:	4602      	mov	r2, r0
 800a06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a070:	1ad3      	subs	r3, r2, r3
 800a072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a074:	429a      	cmp	r2, r3
 800a076:	d80b      	bhi.n	800a090 <HAL_SPI_TransmitReceive+0x1e0>
 800a078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a07e:	d007      	beq.n	800a090 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800a080:	2303      	movs	r3, #3
 800a082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800a08e:	e0b5      	b.n	800a1fc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a094:	b29b      	uxth	r3, r3
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1a2      	bne.n	8009fe0 <HAL_SPI_TransmitReceive+0x130>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d19d      	bne.n	8009fe0 <HAL_SPI_TransmitReceive+0x130>
 800a0a4:	e080      	b.n	800a1a8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d002      	beq.n	800a0b4 <HAL_SPI_TransmitReceive+0x204>
 800a0ae:	8b7b      	ldrh	r3, [r7, #26]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d16f      	bne.n	800a194 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	330c      	adds	r3, #12
 800a0be:	7812      	ldrb	r2, [r2, #0]
 800a0c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0d0:	b29b      	uxth	r3, r3
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a0da:	e05b      	b.n	800a194 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	f003 0302 	and.w	r3, r3, #2
 800a0e6:	2b02      	cmp	r3, #2
 800a0e8:	d11c      	bne.n	800a124 <HAL_SPI_TransmitReceive+0x274>
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d017      	beq.n	800a124 <HAL_SPI_TransmitReceive+0x274>
 800a0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d114      	bne.n	800a124 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	330c      	adds	r3, #12
 800a104:	7812      	ldrb	r2, [r2, #0]
 800a106:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a10c:	1c5a      	adds	r2, r3, #1
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a116:	b29b      	uxth	r3, r3
 800a118:	3b01      	subs	r3, #1
 800a11a:	b29a      	uxth	r2, r3
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a120:	2300      	movs	r3, #0
 800a122:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d119      	bne.n	800a166 <HAL_SPI_TransmitReceive+0x2b6>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a136:	b29b      	uxth	r3, r3
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d014      	beq.n	800a166 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68da      	ldr	r2, [r3, #12]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a146:	b2d2      	uxtb	r2, r2
 800a148:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14e:	1c5a      	adds	r2, r3, #1
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a158:	b29b      	uxth	r3, r3
 800a15a:	3b01      	subs	r3, #1
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a162:	2301      	movs	r3, #1
 800a164:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a166:	f7fc fc17 	bl	8006998 <HAL_GetTick>
 800a16a:	4602      	mov	r2, r0
 800a16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16e:	1ad3      	subs	r3, r2, r3
 800a170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a172:	429a      	cmp	r2, r3
 800a174:	d803      	bhi.n	800a17e <HAL_SPI_TransmitReceive+0x2ce>
 800a176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a17c:	d102      	bne.n	800a184 <HAL_SPI_TransmitReceive+0x2d4>
 800a17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a180:	2b00      	cmp	r3, #0
 800a182:	d107      	bne.n	800a194 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800a184:	2303      	movs	r3, #3
 800a186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2201      	movs	r2, #1
 800a18e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800a192:	e033      	b.n	800a1fc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a198:	b29b      	uxth	r3, r3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d19e      	bne.n	800a0dc <HAL_SPI_TransmitReceive+0x22c>
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d199      	bne.n	800a0dc <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a1a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a1ac:	68f8      	ldr	r0, [r7, #12]
 800a1ae:	f000 f8b7 	bl	800a320 <SPI_EndRxTxTransaction>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d006      	beq.n	800a1c6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2220      	movs	r2, #32
 800a1c2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a1c4:	e01a      	b.n	800a1fc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10a      	bne.n	800a1e4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	617b      	str	r3, [r7, #20]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	617b      	str	r3, [r7, #20]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	689b      	ldr	r3, [r3, #8]
 800a1e0:	617b      	str	r3, [r7, #20]
 800a1e2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a1f2:	e003      	b.n	800a1fc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a204:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a208:	4618      	mov	r0, r3
 800a20a:	3730      	adds	r7, #48	; 0x30
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b088      	sub	sp, #32
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	603b      	str	r3, [r7, #0]
 800a21c:	4613      	mov	r3, r2
 800a21e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a220:	f7fc fbba 	bl	8006998 <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a228:	1a9b      	subs	r3, r3, r2
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	4413      	add	r3, r2
 800a22e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a230:	f7fc fbb2 	bl	8006998 <HAL_GetTick>
 800a234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a236:	4b39      	ldr	r3, [pc, #228]	; (800a31c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	015b      	lsls	r3, r3, #5
 800a23c:	0d1b      	lsrs	r3, r3, #20
 800a23e:	69fa      	ldr	r2, [r7, #28]
 800a240:	fb02 f303 	mul.w	r3, r2, r3
 800a244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a246:	e054      	b.n	800a2f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24e:	d050      	beq.n	800a2f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a250:	f7fc fba2 	bl	8006998 <HAL_GetTick>
 800a254:	4602      	mov	r2, r0
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	69fa      	ldr	r2, [r7, #28]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d902      	bls.n	800a266 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d13d      	bne.n	800a2e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a27e:	d111      	bne.n	800a2a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a288:	d004      	beq.n	800a294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a292:	d107      	bne.n	800a2a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2ac:	d10f      	bne.n	800a2ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a2bc:	601a      	str	r2, [r3, #0]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a2cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	e017      	b.n	800a312 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d101      	bne.n	800a2ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	3b01      	subs	r3, #1
 800a2f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	689a      	ldr	r2, [r3, #8]
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	4013      	ands	r3, r2
 800a2fc:	68ba      	ldr	r2, [r7, #8]
 800a2fe:	429a      	cmp	r2, r3
 800a300:	bf0c      	ite	eq
 800a302:	2301      	moveq	r3, #1
 800a304:	2300      	movne	r3, #0
 800a306:	b2db      	uxtb	r3, r3
 800a308:	461a      	mov	r2, r3
 800a30a:	79fb      	ldrb	r3, [r7, #7]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d19b      	bne.n	800a248 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3720      	adds	r7, #32
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
 800a31a:	bf00      	nop
 800a31c:	2000002c 	.word	0x2000002c

0800a320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b086      	sub	sp, #24
 800a324:	af02      	add	r7, sp, #8
 800a326:	60f8      	str	r0, [r7, #12]
 800a328:	60b9      	str	r1, [r7, #8]
 800a32a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	2200      	movs	r2, #0
 800a334:	2180      	movs	r1, #128	; 0x80
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f7ff ff6a 	bl	800a210 <SPI_WaitFlagStateUntilTimeout>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d007      	beq.n	800a352 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a346:	f043 0220 	orr.w	r2, r3, #32
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800a34e:	2303      	movs	r3, #3
 800a350:	e000      	b.n	800a354 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3710      	adds	r7, #16
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d101      	bne.n	800a36e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e041      	b.n	800a3f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b00      	cmp	r3, #0
 800a378:	d106      	bne.n	800a388 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f7fc f8b8 	bl	80064f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2202      	movs	r2, #2
 800a38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681a      	ldr	r2, [r3, #0]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	3304      	adds	r3, #4
 800a398:	4619      	mov	r1, r3
 800a39a:	4610      	mov	r0, r2
 800a39c:	f000 fc94 	bl	800acc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2201      	movs	r2, #1
 800a3a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2201      	movs	r2, #1
 800a3ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2201      	movs	r2, #1
 800a3b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2201      	movs	r2, #1
 800a3c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
	...

0800a3fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d001      	beq.n	800a414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	e03a      	b.n	800a48a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2202      	movs	r2, #2
 800a418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68da      	ldr	r2, [r3, #12]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f042 0201 	orr.w	r2, r2, #1
 800a42a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a18      	ldr	r2, [pc, #96]	; (800a494 <HAL_TIM_Base_Start_IT+0x98>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d00e      	beq.n	800a454 <HAL_TIM_Base_Start_IT+0x58>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a43e:	d009      	beq.n	800a454 <HAL_TIM_Base_Start_IT+0x58>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a14      	ldr	r2, [pc, #80]	; (800a498 <HAL_TIM_Base_Start_IT+0x9c>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d004      	beq.n	800a454 <HAL_TIM_Base_Start_IT+0x58>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a13      	ldr	r2, [pc, #76]	; (800a49c <HAL_TIM_Base_Start_IT+0xa0>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d111      	bne.n	800a478 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	f003 0307 	and.w	r3, r3, #7
 800a45e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2b06      	cmp	r3, #6
 800a464:	d010      	beq.n	800a488 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f042 0201 	orr.w	r2, r2, #1
 800a474:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a476:	e007      	b.n	800a488 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681a      	ldr	r2, [r3, #0]
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f042 0201 	orr.w	r2, r2, #1
 800a486:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	bc80      	pop	{r7}
 800a492:	4770      	bx	lr
 800a494:	40012c00 	.word	0x40012c00
 800a498:	40000400 	.word	0x40000400
 800a49c:	40000800 	.word	0x40000800

0800a4a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d101      	bne.n	800a4b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e041      	b.n	800a536 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d106      	bne.n	800a4cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f839 	bl	800a53e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	3304      	adds	r3, #4
 800a4dc:	4619      	mov	r1, r3
 800a4de:	4610      	mov	r0, r2
 800a4e0:	f000 fbf2 	bl	800acc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2201      	movs	r2, #1
 800a4e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2201      	movs	r2, #1
 800a4f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2201      	movs	r2, #1
 800a500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2201      	movs	r2, #1
 800a508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2201      	movs	r2, #1
 800a510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2201      	movs	r2, #1
 800a528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2201      	movs	r2, #1
 800a530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a546:	bf00      	nop
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bc80      	pop	{r7}
 800a54e:	4770      	bx	lr

0800a550 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d109      	bne.n	800a574 <HAL_TIM_PWM_Start+0x24>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a566:	b2db      	uxtb	r3, r3
 800a568:	2b01      	cmp	r3, #1
 800a56a:	bf14      	ite	ne
 800a56c:	2301      	movne	r3, #1
 800a56e:	2300      	moveq	r3, #0
 800a570:	b2db      	uxtb	r3, r3
 800a572:	e022      	b.n	800a5ba <HAL_TIM_PWM_Start+0x6a>
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	2b04      	cmp	r3, #4
 800a578:	d109      	bne.n	800a58e <HAL_TIM_PWM_Start+0x3e>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b01      	cmp	r3, #1
 800a584:	bf14      	ite	ne
 800a586:	2301      	movne	r3, #1
 800a588:	2300      	moveq	r3, #0
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	e015      	b.n	800a5ba <HAL_TIM_PWM_Start+0x6a>
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2b08      	cmp	r3, #8
 800a592:	d109      	bne.n	800a5a8 <HAL_TIM_PWM_Start+0x58>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	bf14      	ite	ne
 800a5a0:	2301      	movne	r3, #1
 800a5a2:	2300      	moveq	r3, #0
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	e008      	b.n	800a5ba <HAL_TIM_PWM_Start+0x6a>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	bf14      	ite	ne
 800a5b4:	2301      	movne	r3, #1
 800a5b6:	2300      	moveq	r3, #0
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d001      	beq.n	800a5c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	e05e      	b.n	800a680 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d104      	bne.n	800a5d2 <HAL_TIM_PWM_Start+0x82>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a5d0:	e013      	b.n	800a5fa <HAL_TIM_PWM_Start+0xaa>
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	2b04      	cmp	r3, #4
 800a5d6:	d104      	bne.n	800a5e2 <HAL_TIM_PWM_Start+0x92>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2202      	movs	r2, #2
 800a5dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a5e0:	e00b      	b.n	800a5fa <HAL_TIM_PWM_Start+0xaa>
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	2b08      	cmp	r3, #8
 800a5e6:	d104      	bne.n	800a5f2 <HAL_TIM_PWM_Start+0xa2>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2202      	movs	r2, #2
 800a5ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a5f0:	e003      	b.n	800a5fa <HAL_TIM_PWM_Start+0xaa>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2202      	movs	r2, #2
 800a5f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2201      	movs	r2, #1
 800a600:	6839      	ldr	r1, [r7, #0]
 800a602:	4618      	mov	r0, r3
 800a604:	f000 fde0 	bl	800b1c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a1e      	ldr	r2, [pc, #120]	; (800a688 <HAL_TIM_PWM_Start+0x138>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d107      	bne.n	800a622 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a620:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a18      	ldr	r2, [pc, #96]	; (800a688 <HAL_TIM_PWM_Start+0x138>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d00e      	beq.n	800a64a <HAL_TIM_PWM_Start+0xfa>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a634:	d009      	beq.n	800a64a <HAL_TIM_PWM_Start+0xfa>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4a14      	ldr	r2, [pc, #80]	; (800a68c <HAL_TIM_PWM_Start+0x13c>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d004      	beq.n	800a64a <HAL_TIM_PWM_Start+0xfa>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a12      	ldr	r2, [pc, #72]	; (800a690 <HAL_TIM_PWM_Start+0x140>)
 800a646:	4293      	cmp	r3, r2
 800a648:	d111      	bne.n	800a66e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	f003 0307 	and.w	r3, r3, #7
 800a654:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2b06      	cmp	r3, #6
 800a65a:	d010      	beq.n	800a67e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f042 0201 	orr.w	r2, r2, #1
 800a66a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a66c:	e007      	b.n	800a67e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	681a      	ldr	r2, [r3, #0]
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f042 0201 	orr.w	r2, r2, #1
 800a67c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	40012c00 	.word	0x40012c00
 800a68c:	40000400 	.word	0x40000400
 800a690:	40000800 	.word	0x40000800

0800a694 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b082      	sub	sp, #8
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	6839      	ldr	r1, [r7, #0]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 fd8e 	bl	800b1c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a29      	ldr	r2, [pc, #164]	; (800a758 <HAL_TIM_PWM_Stop+0xc4>)
 800a6b2:	4293      	cmp	r3, r2
 800a6b4:	d117      	bne.n	800a6e6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	6a1a      	ldr	r2, [r3, #32]
 800a6bc:	f241 1311 	movw	r3, #4369	; 0x1111
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d10f      	bne.n	800a6e6 <HAL_TIM_PWM_Stop+0x52>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	6a1a      	ldr	r2, [r3, #32]
 800a6cc:	f240 4344 	movw	r3, #1092	; 0x444
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d107      	bne.n	800a6e6 <HAL_TIM_PWM_Stop+0x52>
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a6e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	6a1a      	ldr	r2, [r3, #32]
 800a6ec:	f241 1311 	movw	r3, #4369	; 0x1111
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d10f      	bne.n	800a716 <HAL_TIM_PWM_Stop+0x82>
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6a1a      	ldr	r2, [r3, #32]
 800a6fc:	f240 4344 	movw	r3, #1092	; 0x444
 800a700:	4013      	ands	r3, r2
 800a702:	2b00      	cmp	r3, #0
 800a704:	d107      	bne.n	800a716 <HAL_TIM_PWM_Stop+0x82>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f022 0201 	bic.w	r2, r2, #1
 800a714:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d104      	bne.n	800a726 <HAL_TIM_PWM_Stop+0x92>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2201      	movs	r2, #1
 800a720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a724:	e013      	b.n	800a74e <HAL_TIM_PWM_Stop+0xba>
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	2b04      	cmp	r3, #4
 800a72a:	d104      	bne.n	800a736 <HAL_TIM_PWM_Stop+0xa2>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a734:	e00b      	b.n	800a74e <HAL_TIM_PWM_Stop+0xba>
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2b08      	cmp	r3, #8
 800a73a:	d104      	bne.n	800a746 <HAL_TIM_PWM_Stop+0xb2>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a744:	e003      	b.n	800a74e <HAL_TIM_PWM_Stop+0xba>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	40012c00 	.word	0x40012c00

0800a75c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b082      	sub	sp, #8
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	691b      	ldr	r3, [r3, #16]
 800a76a:	f003 0302 	and.w	r3, r3, #2
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d122      	bne.n	800a7b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	f003 0302 	and.w	r3, r3, #2
 800a77c:	2b02      	cmp	r3, #2
 800a77e:	d11b      	bne.n	800a7b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f06f 0202 	mvn.w	r2, #2
 800a788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2201      	movs	r2, #1
 800a78e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	699b      	ldr	r3, [r3, #24]
 800a796:	f003 0303 	and.w	r3, r3, #3
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d003      	beq.n	800a7a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f000 fa76 	bl	800ac90 <HAL_TIM_IC_CaptureCallback>
 800a7a4:	e005      	b.n	800a7b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7a6:	6878      	ldr	r0, [r7, #4]
 800a7a8:	f000 fa69 	bl	800ac7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fa78 	bl	800aca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	f003 0304 	and.w	r3, r3, #4
 800a7c2:	2b04      	cmp	r3, #4
 800a7c4:	d122      	bne.n	800a80c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	f003 0304 	and.w	r3, r3, #4
 800a7d0:	2b04      	cmp	r3, #4
 800a7d2:	d11b      	bne.n	800a80c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f06f 0204 	mvn.w	r2, #4
 800a7dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2202      	movs	r2, #2
 800a7e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d003      	beq.n	800a7fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fa4c 	bl	800ac90 <HAL_TIM_IC_CaptureCallback>
 800a7f8:	e005      	b.n	800a806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 fa3f 	bl	800ac7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fa4e 	bl	800aca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	f003 0308 	and.w	r3, r3, #8
 800a816:	2b08      	cmp	r3, #8
 800a818:	d122      	bne.n	800a860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	f003 0308 	and.w	r3, r3, #8
 800a824:	2b08      	cmp	r3, #8
 800a826:	d11b      	bne.n	800a860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f06f 0208 	mvn.w	r2, #8
 800a830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2204      	movs	r2, #4
 800a836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	f003 0303 	and.w	r3, r3, #3
 800a842:	2b00      	cmp	r3, #0
 800a844:	d003      	beq.n	800a84e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 fa22 	bl	800ac90 <HAL_TIM_IC_CaptureCallback>
 800a84c:	e005      	b.n	800a85a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 fa15 	bl	800ac7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a854:	6878      	ldr	r0, [r7, #4]
 800a856:	f000 fa24 	bl	800aca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	691b      	ldr	r3, [r3, #16]
 800a866:	f003 0310 	and.w	r3, r3, #16
 800a86a:	2b10      	cmp	r3, #16
 800a86c:	d122      	bne.n	800a8b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	f003 0310 	and.w	r3, r3, #16
 800a878:	2b10      	cmp	r3, #16
 800a87a:	d11b      	bne.n	800a8b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f06f 0210 	mvn.w	r2, #16
 800a884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2208      	movs	r2, #8
 800a88a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	69db      	ldr	r3, [r3, #28]
 800a892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a896:	2b00      	cmp	r3, #0
 800a898:	d003      	beq.n	800a8a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f9f8 	bl	800ac90 <HAL_TIM_IC_CaptureCallback>
 800a8a0:	e005      	b.n	800a8ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f9eb 	bl	800ac7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f9fa 	bl	800aca2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	f003 0301 	and.w	r3, r3, #1
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d10e      	bne.n	800a8e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	f003 0301 	and.w	r3, r3, #1
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d107      	bne.n	800a8e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f06f 0201 	mvn.w	r2, #1
 800a8d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f7fa fae8 	bl	8004eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8ea:	2b80      	cmp	r3, #128	; 0x80
 800a8ec:	d10e      	bne.n	800a90c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8f8:	2b80      	cmp	r3, #128	; 0x80
 800a8fa:	d107      	bne.n	800a90c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 fce9 	bl	800b2de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a916:	2b40      	cmp	r3, #64	; 0x40
 800a918:	d10e      	bne.n	800a938 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	68db      	ldr	r3, [r3, #12]
 800a920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a924:	2b40      	cmp	r3, #64	; 0x40
 800a926:	d107      	bne.n	800a938 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f9be 	bl	800acb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	f003 0320 	and.w	r3, r3, #32
 800a942:	2b20      	cmp	r3, #32
 800a944:	d10e      	bne.n	800a964 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	68db      	ldr	r3, [r3, #12]
 800a94c:	f003 0320 	and.w	r3, r3, #32
 800a950:	2b20      	cmp	r3, #32
 800a952:	d107      	bne.n	800a964 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f06f 0220 	mvn.w	r2, #32
 800a95c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f000 fcb4 	bl	800b2cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a964:	bf00      	nop
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b086      	sub	sp, #24
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a982:	2b01      	cmp	r3, #1
 800a984:	d101      	bne.n	800a98a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a986:	2302      	movs	r3, #2
 800a988:	e0ae      	b.n	800aae8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2b0c      	cmp	r3, #12
 800a996:	f200 809f 	bhi.w	800aad8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a99a:	a201      	add	r2, pc, #4	; (adr r2, 800a9a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a99c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a0:	0800a9d5 	.word	0x0800a9d5
 800a9a4:	0800aad9 	.word	0x0800aad9
 800a9a8:	0800aad9 	.word	0x0800aad9
 800a9ac:	0800aad9 	.word	0x0800aad9
 800a9b0:	0800aa15 	.word	0x0800aa15
 800a9b4:	0800aad9 	.word	0x0800aad9
 800a9b8:	0800aad9 	.word	0x0800aad9
 800a9bc:	0800aad9 	.word	0x0800aad9
 800a9c0:	0800aa57 	.word	0x0800aa57
 800a9c4:	0800aad9 	.word	0x0800aad9
 800a9c8:	0800aad9 	.word	0x0800aad9
 800a9cc:	0800aad9 	.word	0x0800aad9
 800a9d0:	0800aa97 	.word	0x0800aa97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68b9      	ldr	r1, [r7, #8]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 f9d6 	bl	800ad8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	699a      	ldr	r2, [r3, #24]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f042 0208 	orr.w	r2, r2, #8
 800a9ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	699a      	ldr	r2, [r3, #24]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f022 0204 	bic.w	r2, r2, #4
 800a9fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6999      	ldr	r1, [r3, #24]
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	691a      	ldr	r2, [r3, #16]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	619a      	str	r2, [r3, #24]
      break;
 800aa12:	e064      	b.n	800aade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68b9      	ldr	r1, [r7, #8]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 fa1c 	bl	800ae58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	699a      	ldr	r2, [r3, #24]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	699a      	ldr	r2, [r3, #24]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6999      	ldr	r1, [r3, #24]
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	021a      	lsls	r2, r3, #8
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	430a      	orrs	r2, r1
 800aa52:	619a      	str	r2, [r3, #24]
      break;
 800aa54:	e043      	b.n	800aade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	68b9      	ldr	r1, [r7, #8]
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f000 fa65 	bl	800af2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	69da      	ldr	r2, [r3, #28]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f042 0208 	orr.w	r2, r2, #8
 800aa70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	69da      	ldr	r2, [r3, #28]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f022 0204 	bic.w	r2, r2, #4
 800aa80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	69d9      	ldr	r1, [r3, #28]
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	691a      	ldr	r2, [r3, #16]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	430a      	orrs	r2, r1
 800aa92:	61da      	str	r2, [r3, #28]
      break;
 800aa94:	e023      	b.n	800aade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68b9      	ldr	r1, [r7, #8]
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	f000 faaf 	bl	800b000 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	69da      	ldr	r2, [r3, #28]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	69da      	ldr	r2, [r3, #28]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	69d9      	ldr	r1, [r3, #28]
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	691b      	ldr	r3, [r3, #16]
 800aacc:	021a      	lsls	r2, r3, #8
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	430a      	orrs	r2, r1
 800aad4:	61da      	str	r2, [r3, #28]
      break;
 800aad6:	e002      	b.n	800aade <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	75fb      	strb	r3, [r7, #23]
      break;
 800aadc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3718      	adds	r7, #24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d101      	bne.n	800ab0c <HAL_TIM_ConfigClockSource+0x1c>
 800ab08:	2302      	movs	r3, #2
 800ab0a:	e0b4      	b.n	800ac76 <HAL_TIM_ConfigClockSource+0x186>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2201      	movs	r2, #1
 800ab10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2202      	movs	r2, #2
 800ab18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ab2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab44:	d03e      	beq.n	800abc4 <HAL_TIM_ConfigClockSource+0xd4>
 800ab46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab4a:	f200 8087 	bhi.w	800ac5c <HAL_TIM_ConfigClockSource+0x16c>
 800ab4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab52:	f000 8086 	beq.w	800ac62 <HAL_TIM_ConfigClockSource+0x172>
 800ab56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab5a:	d87f      	bhi.n	800ac5c <HAL_TIM_ConfigClockSource+0x16c>
 800ab5c:	2b70      	cmp	r3, #112	; 0x70
 800ab5e:	d01a      	beq.n	800ab96 <HAL_TIM_ConfigClockSource+0xa6>
 800ab60:	2b70      	cmp	r3, #112	; 0x70
 800ab62:	d87b      	bhi.n	800ac5c <HAL_TIM_ConfigClockSource+0x16c>
 800ab64:	2b60      	cmp	r3, #96	; 0x60
 800ab66:	d050      	beq.n	800ac0a <HAL_TIM_ConfigClockSource+0x11a>
 800ab68:	2b60      	cmp	r3, #96	; 0x60
 800ab6a:	d877      	bhi.n	800ac5c <HAL_TIM_ConfigClockSource+0x16c>
 800ab6c:	2b50      	cmp	r3, #80	; 0x50
 800ab6e:	d03c      	beq.n	800abea <HAL_TIM_ConfigClockSource+0xfa>
 800ab70:	2b50      	cmp	r3, #80	; 0x50
 800ab72:	d873      	bhi.n	800ac5c <HAL_TIM_ConfigClockSource+0x16c>
 800ab74:	2b40      	cmp	r3, #64	; 0x40
 800ab76:	d058      	beq.n	800ac2a <HAL_TIM_ConfigClockSource+0x13a>
 800ab78:	2b40      	cmp	r3, #64	; 0x40
 800ab7a:	d86f      	bhi.n	800ac5c <HAL_TIM_ConfigClockSource+0x16c>
 800ab7c:	2b30      	cmp	r3, #48	; 0x30
 800ab7e:	d064      	beq.n	800ac4a <HAL_TIM_ConfigClockSource+0x15a>
 800ab80:	2b30      	cmp	r3, #48	; 0x30
 800ab82:	d86b      	bhi.n	800ac5c <HAL_TIM_ConfigClockSource+0x16c>
 800ab84:	2b20      	cmp	r3, #32
 800ab86:	d060      	beq.n	800ac4a <HAL_TIM_ConfigClockSource+0x15a>
 800ab88:	2b20      	cmp	r3, #32
 800ab8a:	d867      	bhi.n	800ac5c <HAL_TIM_ConfigClockSource+0x16c>
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d05c      	beq.n	800ac4a <HAL_TIM_ConfigClockSource+0x15a>
 800ab90:	2b10      	cmp	r3, #16
 800ab92:	d05a      	beq.n	800ac4a <HAL_TIM_ConfigClockSource+0x15a>
 800ab94:	e062      	b.n	800ac5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aba6:	f000 faf0 	bl	800b18a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800abb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	609a      	str	r2, [r3, #8]
      break;
 800abc2:	e04f      	b.n	800ac64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800abd4:	f000 fad9 	bl	800b18a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	689a      	ldr	r2, [r3, #8]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800abe6:	609a      	str	r2, [r3, #8]
      break;
 800abe8:	e03c      	b.n	800ac64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abf6:	461a      	mov	r2, r3
 800abf8:	f000 fa50 	bl	800b09c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2150      	movs	r1, #80	; 0x50
 800ac02:	4618      	mov	r0, r3
 800ac04:	f000 faa7 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800ac08:	e02c      	b.n	800ac64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac16:	461a      	mov	r2, r3
 800ac18:	f000 fa6e 	bl	800b0f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	2160      	movs	r1, #96	; 0x60
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 fa97 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800ac28:	e01c      	b.n	800ac64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac36:	461a      	mov	r2, r3
 800ac38:	f000 fa30 	bl	800b09c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2140      	movs	r1, #64	; 0x40
 800ac42:	4618      	mov	r0, r3
 800ac44:	f000 fa87 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800ac48:	e00c      	b.n	800ac64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4619      	mov	r1, r3
 800ac54:	4610      	mov	r0, r2
 800ac56:	f000 fa7e 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800ac5a:	e003      	b.n	800ac64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac60:	e000      	b.n	800ac64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ac62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2201      	movs	r2, #1
 800ac68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b083      	sub	sp, #12
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac86:	bf00      	nop
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bc80      	pop	{r7}
 800ac8e:	4770      	bx	lr

0800ac90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bc80      	pop	{r7}
 800aca0:	4770      	bx	lr

0800aca2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aca2:	b480      	push	{r7}
 800aca4:	b083      	sub	sp, #12
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acaa:	bf00      	nop
 800acac:	370c      	adds	r7, #12
 800acae:	46bd      	mov	sp, r7
 800acb0:	bc80      	pop	{r7}
 800acb2:	4770      	bx	lr

0800acb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acb4:	b480      	push	{r7}
 800acb6:	b083      	sub	sp, #12
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acbc:	bf00      	nop
 800acbe:	370c      	adds	r7, #12
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bc80      	pop	{r7}
 800acc4:	4770      	bx	lr
	...

0800acc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	4a29      	ldr	r2, [pc, #164]	; (800ad80 <TIM_Base_SetConfig+0xb8>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d00b      	beq.n	800acf8 <TIM_Base_SetConfig+0x30>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ace6:	d007      	beq.n	800acf8 <TIM_Base_SetConfig+0x30>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4a26      	ldr	r2, [pc, #152]	; (800ad84 <TIM_Base_SetConfig+0xbc>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d003      	beq.n	800acf8 <TIM_Base_SetConfig+0x30>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a25      	ldr	r2, [pc, #148]	; (800ad88 <TIM_Base_SetConfig+0xc0>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d108      	bne.n	800ad0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	685b      	ldr	r3, [r3, #4]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	4a1c      	ldr	r2, [pc, #112]	; (800ad80 <TIM_Base_SetConfig+0xb8>)
 800ad0e:	4293      	cmp	r3, r2
 800ad10:	d00b      	beq.n	800ad2a <TIM_Base_SetConfig+0x62>
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad18:	d007      	beq.n	800ad2a <TIM_Base_SetConfig+0x62>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a19      	ldr	r2, [pc, #100]	; (800ad84 <TIM_Base_SetConfig+0xbc>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d003      	beq.n	800ad2a <TIM_Base_SetConfig+0x62>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	4a18      	ldr	r2, [pc, #96]	; (800ad88 <TIM_Base_SetConfig+0xc0>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d108      	bne.n	800ad3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	68db      	ldr	r3, [r3, #12]
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	695b      	ldr	r3, [r3, #20]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	689a      	ldr	r2, [r3, #8]
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	681a      	ldr	r2, [r3, #0]
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a07      	ldr	r2, [pc, #28]	; (800ad80 <TIM_Base_SetConfig+0xb8>)
 800ad64:	4293      	cmp	r3, r2
 800ad66:	d103      	bne.n	800ad70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	691a      	ldr	r2, [r3, #16]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	615a      	str	r2, [r3, #20]
}
 800ad76:	bf00      	nop
 800ad78:	3714      	adds	r7, #20
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bc80      	pop	{r7}
 800ad7e:	4770      	bx	lr
 800ad80:	40012c00 	.word	0x40012c00
 800ad84:	40000400 	.word	0x40000400
 800ad88:	40000800 	.word	0x40000800

0800ad8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a1b      	ldr	r3, [r3, #32]
 800ad9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a1b      	ldr	r3, [r3, #32]
 800ada0:	f023 0201 	bic.w	r2, r3, #1
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	699b      	ldr	r3, [r3, #24]
 800adb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	f023 0303 	bic.w	r3, r3, #3
 800adc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	4313      	orrs	r3, r2
 800adcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	f023 0302 	bic.w	r3, r3, #2
 800add4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	4313      	orrs	r3, r2
 800adde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a1c      	ldr	r2, [pc, #112]	; (800ae54 <TIM_OC1_SetConfig+0xc8>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d10c      	bne.n	800ae02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	f023 0308 	bic.w	r3, r3, #8
 800adee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	68db      	ldr	r3, [r3, #12]
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	4313      	orrs	r3, r2
 800adf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	f023 0304 	bic.w	r3, r3, #4
 800ae00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	4a13      	ldr	r2, [pc, #76]	; (800ae54 <TIM_OC1_SetConfig+0xc8>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d111      	bne.n	800ae2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	693a      	ldr	r2, [r7, #16]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	693a      	ldr	r2, [r7, #16]
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	693a      	ldr	r2, [r7, #16]
 800ae32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	68fa      	ldr	r2, [r7, #12]
 800ae38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	685a      	ldr	r2, [r3, #4]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	697a      	ldr	r2, [r7, #20]
 800ae46:	621a      	str	r2, [r3, #32]
}
 800ae48:	bf00      	nop
 800ae4a:	371c      	adds	r7, #28
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bc80      	pop	{r7}
 800ae50:	4770      	bx	lr
 800ae52:	bf00      	nop
 800ae54:	40012c00 	.word	0x40012c00

0800ae58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b087      	sub	sp, #28
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6a1b      	ldr	r3, [r3, #32]
 800ae66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a1b      	ldr	r3, [r3, #32]
 800ae6c:	f023 0210 	bic.w	r2, r3, #16
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	699b      	ldr	r3, [r3, #24]
 800ae7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	021b      	lsls	r3, r3, #8
 800ae96:	68fa      	ldr	r2, [r7, #12]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	f023 0320 	bic.w	r3, r3, #32
 800aea2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	011b      	lsls	r3, r3, #4
 800aeaa:	697a      	ldr	r2, [r7, #20]
 800aeac:	4313      	orrs	r3, r2
 800aeae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	4a1d      	ldr	r2, [pc, #116]	; (800af28 <TIM_OC2_SetConfig+0xd0>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d10d      	bne.n	800aed4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
 800aec4:	011b      	lsls	r3, r3, #4
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aecc:	697b      	ldr	r3, [r7, #20]
 800aece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aed2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a14      	ldr	r2, [pc, #80]	; (800af28 <TIM_OC2_SetConfig+0xd0>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d113      	bne.n	800af04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aee2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aeea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	695b      	ldr	r3, [r3, #20]
 800aef0:	009b      	lsls	r3, r3, #2
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	4313      	orrs	r3, r2
 800aef6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	699b      	ldr	r3, [r3, #24]
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	693a      	ldr	r2, [r7, #16]
 800af00:	4313      	orrs	r3, r2
 800af02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	693a      	ldr	r2, [r7, #16]
 800af08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	685a      	ldr	r2, [r3, #4]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	697a      	ldr	r2, [r7, #20]
 800af1c:	621a      	str	r2, [r3, #32]
}
 800af1e:	bf00      	nop
 800af20:	371c      	adds	r7, #28
 800af22:	46bd      	mov	sp, r7
 800af24:	bc80      	pop	{r7}
 800af26:	4770      	bx	lr
 800af28:	40012c00 	.word	0x40012c00

0800af2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b087      	sub	sp, #28
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6a1b      	ldr	r3, [r3, #32]
 800af3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6a1b      	ldr	r3, [r3, #32]
 800af40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	69db      	ldr	r3, [r3, #28]
 800af52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f023 0303 	bic.w	r3, r3, #3
 800af62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800af74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	689b      	ldr	r3, [r3, #8]
 800af7a:	021b      	lsls	r3, r3, #8
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	4313      	orrs	r3, r2
 800af80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	4a1d      	ldr	r2, [pc, #116]	; (800affc <TIM_OC3_SetConfig+0xd0>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d10d      	bne.n	800afa6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	68db      	ldr	r3, [r3, #12]
 800af96:	021b      	lsls	r3, r3, #8
 800af98:	697a      	ldr	r2, [r7, #20]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800afa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a14      	ldr	r2, [pc, #80]	; (800affc <TIM_OC3_SetConfig+0xd0>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d113      	bne.n	800afd6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800afb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800afbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	011b      	lsls	r3, r3, #4
 800afc4:	693a      	ldr	r2, [r7, #16]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	699b      	ldr	r3, [r3, #24]
 800afce:	011b      	lsls	r3, r3, #4
 800afd0:	693a      	ldr	r2, [r7, #16]
 800afd2:	4313      	orrs	r3, r2
 800afd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68fa      	ldr	r2, [r7, #12]
 800afe0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	621a      	str	r2, [r3, #32]
}
 800aff0:	bf00      	nop
 800aff2:	371c      	adds	r7, #28
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bc80      	pop	{r7}
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	40012c00 	.word	0x40012c00

0800b000 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b000:	b480      	push	{r7}
 800b002:	b087      	sub	sp, #28
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
 800b008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6a1b      	ldr	r3, [r3, #32]
 800b00e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6a1b      	ldr	r3, [r3, #32]
 800b014:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	69db      	ldr	r3, [r3, #28]
 800b026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b02e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b036:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	021b      	lsls	r3, r3, #8
 800b03e:	68fa      	ldr	r2, [r7, #12]
 800b040:	4313      	orrs	r3, r2
 800b042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b04a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	031b      	lsls	r3, r3, #12
 800b052:	693a      	ldr	r2, [r7, #16]
 800b054:	4313      	orrs	r3, r2
 800b056:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a0f      	ldr	r2, [pc, #60]	; (800b098 <TIM_OC4_SetConfig+0x98>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d109      	bne.n	800b074 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	695b      	ldr	r3, [r3, #20]
 800b06c:	019b      	lsls	r3, r3, #6
 800b06e:	697a      	ldr	r2, [r7, #20]
 800b070:	4313      	orrs	r3, r2
 800b072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	685a      	ldr	r2, [r3, #4]
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	621a      	str	r2, [r3, #32]
}
 800b08e:	bf00      	nop
 800b090:	371c      	adds	r7, #28
 800b092:	46bd      	mov	sp, r7
 800b094:	bc80      	pop	{r7}
 800b096:	4770      	bx	lr
 800b098:	40012c00 	.word	0x40012c00

0800b09c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6a1b      	ldr	r3, [r3, #32]
 800b0ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	f023 0201 	bic.w	r2, r3, #1
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	699b      	ldr	r3, [r3, #24]
 800b0be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	011b      	lsls	r3, r3, #4
 800b0cc:	693a      	ldr	r2, [r7, #16]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	f023 030a 	bic.w	r3, r3, #10
 800b0d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	621a      	str	r2, [r3, #32]
}
 800b0ee:	bf00      	nop
 800b0f0:	371c      	adds	r7, #28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bc80      	pop	{r7}
 800b0f6:	4770      	bx	lr

0800b0f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b087      	sub	sp, #28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6a1b      	ldr	r3, [r3, #32]
 800b108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6a1b      	ldr	r3, [r3, #32]
 800b10e:	f023 0210 	bic.w	r2, r3, #16
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	699b      	ldr	r3, [r3, #24]
 800b11a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	031b      	lsls	r3, r3, #12
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b134:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	011b      	lsls	r3, r3, #4
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	693a      	ldr	r2, [r7, #16]
 800b144:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	621a      	str	r2, [r3, #32]
}
 800b14c:	bf00      	nop
 800b14e:	371c      	adds	r7, #28
 800b150:	46bd      	mov	sp, r7
 800b152:	bc80      	pop	{r7}
 800b154:	4770      	bx	lr

0800b156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b156:	b480      	push	{r7}
 800b158:	b085      	sub	sp, #20
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b16c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4313      	orrs	r3, r2
 800b174:	f043 0307 	orr.w	r3, r3, #7
 800b178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	609a      	str	r2, [r3, #8]
}
 800b180:	bf00      	nop
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	bc80      	pop	{r7}
 800b188:	4770      	bx	lr

0800b18a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b18a:	b480      	push	{r7}
 800b18c:	b087      	sub	sp, #28
 800b18e:	af00      	add	r7, sp, #0
 800b190:	60f8      	str	r0, [r7, #12]
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	607a      	str	r2, [r7, #4]
 800b196:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	021a      	lsls	r2, r3, #8
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	431a      	orrs	r2, r3
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	697a      	ldr	r2, [r7, #20]
 800b1bc:	609a      	str	r2, [r3, #8]
}
 800b1be:	bf00      	nop
 800b1c0:	371c      	adds	r7, #28
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bc80      	pop	{r7}
 800b1c6:	4770      	bx	lr

0800b1c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b087      	sub	sp, #28
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	f003 031f 	and.w	r3, r3, #31
 800b1da:	2201      	movs	r2, #1
 800b1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6a1a      	ldr	r2, [r3, #32]
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	43db      	mvns	r3, r3
 800b1ea:	401a      	ands	r2, r3
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6a1a      	ldr	r2, [r3, #32]
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	f003 031f 	and.w	r3, r3, #31
 800b1fa:	6879      	ldr	r1, [r7, #4]
 800b1fc:	fa01 f303 	lsl.w	r3, r1, r3
 800b200:	431a      	orrs	r2, r3
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	621a      	str	r2, [r3, #32]
}
 800b206:	bf00      	nop
 800b208:	371c      	adds	r7, #28
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bc80      	pop	{r7}
 800b20e:	4770      	bx	lr

0800b210 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b220:	2b01      	cmp	r3, #1
 800b222:	d101      	bne.n	800b228 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b224:	2302      	movs	r3, #2
 800b226:	e046      	b.n	800b2b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2201      	movs	r2, #1
 800b22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2202      	movs	r2, #2
 800b234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b24e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	4313      	orrs	r3, r2
 800b258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a16      	ldr	r2, [pc, #88]	; (800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d00e      	beq.n	800b28a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b274:	d009      	beq.n	800b28a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a12      	ldr	r2, [pc, #72]	; (800b2c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d004      	beq.n	800b28a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a10      	ldr	r2, [pc, #64]	; (800b2c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d10c      	bne.n	800b2a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	685b      	ldr	r3, [r3, #4]
 800b296:	68ba      	ldr	r2, [r7, #8]
 800b298:	4313      	orrs	r3, r2
 800b29a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2b4:	2300      	movs	r3, #0
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bc80      	pop	{r7}
 800b2be:	4770      	bx	lr
 800b2c0:	40012c00 	.word	0x40012c00
 800b2c4:	40000400 	.word	0x40000400
 800b2c8:	40000800 	.word	0x40000800

0800b2cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2cc:	b480      	push	{r7}
 800b2ce:	b083      	sub	sp, #12
 800b2d0:	af00      	add	r7, sp, #0
 800b2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2d4:	bf00      	nop
 800b2d6:	370c      	adds	r7, #12
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	bc80      	pop	{r7}
 800b2dc:	4770      	bx	lr

0800b2de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b083      	sub	sp, #12
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2e6:	bf00      	nop
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bc80      	pop	{r7}
 800b2ee:	4770      	bx	lr

0800b2f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	e042      	b.n	800b388 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d106      	bne.n	800b31c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7fb f9ec 	bl	80066f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2224      	movs	r2, #36	; 0x24
 800b320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68da      	ldr	r2, [r3, #12]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fdc5 	bl	800bec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	691a      	ldr	r2, [r3, #16]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	695a      	ldr	r2, [r3, #20]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	68da      	ldr	r2, [r3, #12]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2200      	movs	r2, #0
 800b36e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2220      	movs	r2, #32
 800b374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2220      	movs	r2, #32
 800b37c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b386:	2300      	movs	r3, #0
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b08a      	sub	sp, #40	; 0x28
 800b394:	af02      	add	r7, sp, #8
 800b396:	60f8      	str	r0, [r7, #12]
 800b398:	60b9      	str	r1, [r7, #8]
 800b39a:	603b      	str	r3, [r7, #0]
 800b39c:	4613      	mov	r3, r2
 800b39e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b20      	cmp	r3, #32
 800b3ae:	d16d      	bne.n	800b48c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <HAL_UART_Transmit+0x2c>
 800b3b6:	88fb      	ldrh	r3, [r7, #6]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e066      	b.n	800b48e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2221      	movs	r2, #33	; 0x21
 800b3ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b3ce:	f7fb fae3 	bl	8006998 <HAL_GetTick>
 800b3d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	88fa      	ldrh	r2, [r7, #6]
 800b3d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	88fa      	ldrh	r2, [r7, #6]
 800b3de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	689b      	ldr	r3, [r3, #8]
 800b3e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3e8:	d108      	bne.n	800b3fc <HAL_UART_Transmit+0x6c>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d104      	bne.n	800b3fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	61bb      	str	r3, [r7, #24]
 800b3fa:	e003      	b.n	800b404 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b400:	2300      	movs	r3, #0
 800b402:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b404:	e02a      	b.n	800b45c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	2200      	movs	r2, #0
 800b40e:	2180      	movs	r1, #128	; 0x80
 800b410:	68f8      	ldr	r0, [r7, #12]
 800b412:	f000 fb14 	bl	800ba3e <UART_WaitOnFlagUntilTimeout>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e036      	b.n	800b48e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800b420:	69fb      	ldr	r3, [r7, #28]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d10b      	bne.n	800b43e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	881b      	ldrh	r3, [r3, #0]
 800b42a:	461a      	mov	r2, r3
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b434:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	3302      	adds	r3, #2
 800b43a:	61bb      	str	r3, [r7, #24]
 800b43c:	e007      	b.n	800b44e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	781a      	ldrb	r2, [r3, #0]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	3301      	adds	r3, #1
 800b44c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b452:	b29b      	uxth	r3, r3
 800b454:	3b01      	subs	r3, #1
 800b456:	b29a      	uxth	r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b460:	b29b      	uxth	r3, r3
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1cf      	bne.n	800b406 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2200      	movs	r2, #0
 800b46e:	2140      	movs	r1, #64	; 0x40
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f000 fae4 	bl	800ba3e <UART_WaitOnFlagUntilTimeout>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d001      	beq.n	800b480 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e006      	b.n	800b48e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2220      	movs	r2, #32
 800b484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800b488:	2300      	movs	r3, #0
 800b48a:	e000      	b.n	800b48e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800b48c:	2302      	movs	r3, #2
  }
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3720      	adds	r7, #32
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b084      	sub	sp, #16
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	60f8      	str	r0, [r7, #12]
 800b49e:	60b9      	str	r1, [r7, #8]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b20      	cmp	r3, #32
 800b4ae:	d112      	bne.n	800b4d6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d002      	beq.n	800b4bc <HAL_UART_Receive_IT+0x26>
 800b4b6:	88fb      	ldrh	r3, [r7, #6]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d101      	bne.n	800b4c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e00b      	b.n	800b4d8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b4c6:	88fb      	ldrh	r3, [r7, #6]
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	68b9      	ldr	r1, [r7, #8]
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f000 fb24 	bl	800bb1a <UART_Start_Receive_IT>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	e000      	b.n	800b4d8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b4d6:	2302      	movs	r3, #2
  }
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3710      	adds	r7, #16
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b0ba      	sub	sp, #232	; 0xe8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b506:	2300      	movs	r3, #0
 800b508:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b50c:	2300      	movs	r3, #0
 800b50e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b516:	f003 030f 	and.w	r3, r3, #15
 800b51a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b51e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b522:	2b00      	cmp	r3, #0
 800b524:	d10f      	bne.n	800b546 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b52a:	f003 0320 	and.w	r3, r3, #32
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d009      	beq.n	800b546 <HAL_UART_IRQHandler+0x66>
 800b532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b536:	f003 0320 	and.w	r3, r3, #32
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d003      	beq.n	800b546 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 fc01 	bl	800bd46 <UART_Receive_IT>
      return;
 800b544:	e25b      	b.n	800b9fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b546:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f000 80de 	beq.w	800b70c <HAL_UART_IRQHandler+0x22c>
 800b550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b554:	f003 0301 	and.w	r3, r3, #1
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d106      	bne.n	800b56a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b55c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b560:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b564:	2b00      	cmp	r3, #0
 800b566:	f000 80d1 	beq.w	800b70c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b56a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b56e:	f003 0301 	and.w	r3, r3, #1
 800b572:	2b00      	cmp	r3, #0
 800b574:	d00b      	beq.n	800b58e <HAL_UART_IRQHandler+0xae>
 800b576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b57a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d005      	beq.n	800b58e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b586:	f043 0201 	orr.w	r2, r3, #1
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b58e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b592:	f003 0304 	and.w	r3, r3, #4
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00b      	beq.n	800b5b2 <HAL_UART_IRQHandler+0xd2>
 800b59a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b59e:	f003 0301 	and.w	r3, r3, #1
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d005      	beq.n	800b5b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5aa:	f043 0202 	orr.w	r2, r3, #2
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5b6:	f003 0302 	and.w	r3, r3, #2
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d00b      	beq.n	800b5d6 <HAL_UART_IRQHandler+0xf6>
 800b5be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5c2:	f003 0301 	and.w	r3, r3, #1
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d005      	beq.n	800b5d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5ce:	f043 0204 	orr.w	r2, r3, #4
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b5d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5da:	f003 0308 	and.w	r3, r3, #8
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d011      	beq.n	800b606 <HAL_UART_IRQHandler+0x126>
 800b5e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5e6:	f003 0320 	and.w	r3, r3, #32
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d105      	bne.n	800b5fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b5ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5f2:	f003 0301 	and.w	r3, r3, #1
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d005      	beq.n	800b606 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5fe:	f043 0208 	orr.w	r2, r3, #8
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f000 81f2 	beq.w	800b9f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b614:	f003 0320 	and.w	r3, r3, #32
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d008      	beq.n	800b62e <HAL_UART_IRQHandler+0x14e>
 800b61c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b620:	f003 0320 	and.w	r3, r3, #32
 800b624:	2b00      	cmp	r3, #0
 800b626:	d002      	beq.n	800b62e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 fb8c 	bl	800bd46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	695b      	ldr	r3, [r3, #20]
 800b634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b638:	2b00      	cmp	r3, #0
 800b63a:	bf14      	ite	ne
 800b63c:	2301      	movne	r3, #1
 800b63e:	2300      	moveq	r3, #0
 800b640:	b2db      	uxtb	r3, r3
 800b642:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b64a:	f003 0308 	and.w	r3, r3, #8
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d103      	bne.n	800b65a <HAL_UART_IRQHandler+0x17a>
 800b652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b656:	2b00      	cmp	r3, #0
 800b658:	d04f      	beq.n	800b6fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 fa96 	bl	800bb8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	695b      	ldr	r3, [r3, #20]
 800b666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d041      	beq.n	800b6f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3314      	adds	r3, #20
 800b674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b67c:	e853 3f00 	ldrex	r3, [r3]
 800b680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b68c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	3314      	adds	r3, #20
 800b696:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b69a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b69e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b6a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b6aa:	e841 2300 	strex	r3, r2, [r1]
 800b6ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b6b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1d9      	bne.n	800b66e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d013      	beq.n	800b6ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6c6:	4a7e      	ldr	r2, [pc, #504]	; (800b8c0 <HAL_UART_IRQHandler+0x3e0>)
 800b6c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7fc fcc8 	bl	8008064 <HAL_DMA_Abort_IT>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d016      	beq.n	800b708 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6e8:	e00e      	b.n	800b708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	f000 f993 	bl	800ba16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6f0:	e00a      	b.n	800b708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 f98f 	bl	800ba16 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6f8:	e006      	b.n	800b708 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f98b 	bl	800ba16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b706:	e175      	b.n	800b9f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b708:	bf00      	nop
    return;
 800b70a:	e173      	b.n	800b9f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b710:	2b01      	cmp	r3, #1
 800b712:	f040 814f 	bne.w	800b9b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b71a:	f003 0310 	and.w	r3, r3, #16
 800b71e:	2b00      	cmp	r3, #0
 800b720:	f000 8148 	beq.w	800b9b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b728:	f003 0310 	and.w	r3, r3, #16
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 8141 	beq.w	800b9b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b732:	2300      	movs	r3, #0
 800b734:	60bb      	str	r3, [r7, #8]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	60bb      	str	r3, [r7, #8]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	60bb      	str	r3, [r7, #8]
 800b746:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	695b      	ldr	r3, [r3, #20]
 800b74e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b752:	2b00      	cmp	r3, #0
 800b754:	f000 80b6 	beq.w	800b8c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b764:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f000 8145 	beq.w	800b9f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b776:	429a      	cmp	r2, r3
 800b778:	f080 813e 	bcs.w	800b9f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b782:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	2b20      	cmp	r3, #32
 800b78c:	f000 8088 	beq.w	800b8a0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	330c      	adds	r3, #12
 800b796:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b79e:	e853 3f00 	ldrex	r3, [r3]
 800b7a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b7a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	330c      	adds	r3, #12
 800b7b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b7bc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b7c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b7c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b7cc:	e841 2300 	strex	r3, r2, [r1]
 800b7d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b7d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1d9      	bne.n	800b790 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	3314      	adds	r3, #20
 800b7e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7e6:	e853 3f00 	ldrex	r3, [r3]
 800b7ea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b7ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7ee:	f023 0301 	bic.w	r3, r3, #1
 800b7f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	3314      	adds	r3, #20
 800b7fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b800:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b804:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b806:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b808:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b80c:	e841 2300 	strex	r3, r2, [r1]
 800b810:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b814:	2b00      	cmp	r3, #0
 800b816:	d1e1      	bne.n	800b7dc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	3314      	adds	r3, #20
 800b81e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b820:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b822:	e853 3f00 	ldrex	r3, [r3]
 800b826:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b82a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b82e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	3314      	adds	r3, #20
 800b838:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b83c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b83e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b840:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b842:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b844:	e841 2300 	strex	r3, r2, [r1]
 800b848:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b84a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1e3      	bne.n	800b818 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2220      	movs	r2, #32
 800b854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2200      	movs	r2, #0
 800b85c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	330c      	adds	r3, #12
 800b864:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b868:	e853 3f00 	ldrex	r3, [r3]
 800b86c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b86e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b870:	f023 0310 	bic.w	r3, r3, #16
 800b874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	330c      	adds	r3, #12
 800b87e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b882:	65ba      	str	r2, [r7, #88]	; 0x58
 800b884:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b886:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b888:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b88a:	e841 2300 	strex	r3, r2, [r1]
 800b88e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b892:	2b00      	cmp	r3, #0
 800b894:	d1e3      	bne.n	800b85e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fc fba6 	bl	8007fec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2202      	movs	r2, #2
 800b8a4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	1ad3      	subs	r3, r2, r3
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f8b6 	bl	800ba28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b8bc:	e09c      	b.n	800b9f8 <HAL_UART_IRQHandler+0x518>
 800b8be:	bf00      	nop
 800b8c0:	0800bc51 	.word	0x0800bc51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	1ad3      	subs	r3, r2, r3
 800b8d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	f000 808e 	beq.w	800b9fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b8e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f000 8089 	beq.w	800b9fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	330c      	adds	r3, #12
 800b8f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f4:	e853 3f00 	ldrex	r3, [r3]
 800b8f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	330c      	adds	r3, #12
 800b90a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b90e:	647a      	str	r2, [r7, #68]	; 0x44
 800b910:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b916:	e841 2300 	strex	r3, r2, [r1]
 800b91a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1e3      	bne.n	800b8ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	3314      	adds	r3, #20
 800b928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	e853 3f00 	ldrex	r3, [r3]
 800b930:	623b      	str	r3, [r7, #32]
   return(result);
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	f023 0301 	bic.w	r3, r3, #1
 800b938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	3314      	adds	r3, #20
 800b942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b946:	633a      	str	r2, [r7, #48]	; 0x30
 800b948:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b94a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b94c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b94e:	e841 2300 	strex	r3, r2, [r1]
 800b952:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b956:	2b00      	cmp	r3, #0
 800b958:	d1e3      	bne.n	800b922 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2220      	movs	r2, #32
 800b95e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2200      	movs	r2, #0
 800b966:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	330c      	adds	r3, #12
 800b96e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	e853 3f00 	ldrex	r3, [r3]
 800b976:	60fb      	str	r3, [r7, #12]
   return(result);
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f023 0310 	bic.w	r3, r3, #16
 800b97e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	330c      	adds	r3, #12
 800b988:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b98c:	61fa      	str	r2, [r7, #28]
 800b98e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b990:	69b9      	ldr	r1, [r7, #24]
 800b992:	69fa      	ldr	r2, [r7, #28]
 800b994:	e841 2300 	strex	r3, r2, [r1]
 800b998:	617b      	str	r3, [r7, #20]
   return(result);
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1e3      	bne.n	800b968 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2202      	movs	r2, #2
 800b9a4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b9a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 f83b 	bl	800ba28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b9b2:	e023      	b.n	800b9fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b9b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d009      	beq.n	800b9d4 <HAL_UART_IRQHandler+0x4f4>
 800b9c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 f953 	bl	800bc78 <UART_Transmit_IT>
    return;
 800b9d2:	e014      	b.n	800b9fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b9d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00e      	beq.n	800b9fe <HAL_UART_IRQHandler+0x51e>
 800b9e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d008      	beq.n	800b9fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f000 f992 	bl	800bd16 <UART_EndTransmit_IT>
    return;
 800b9f2:	e004      	b.n	800b9fe <HAL_UART_IRQHandler+0x51e>
    return;
 800b9f4:	bf00      	nop
 800b9f6:	e002      	b.n	800b9fe <HAL_UART_IRQHandler+0x51e>
      return;
 800b9f8:	bf00      	nop
 800b9fa:	e000      	b.n	800b9fe <HAL_UART_IRQHandler+0x51e>
      return;
 800b9fc:	bf00      	nop
  }
}
 800b9fe:	37e8      	adds	r7, #232	; 0xe8
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b083      	sub	sp, #12
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ba0c:	bf00      	nop
 800ba0e:	370c      	adds	r7, #12
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bc80      	pop	{r7}
 800ba14:	4770      	bx	lr

0800ba16 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba16:	b480      	push	{r7}
 800ba18:	b083      	sub	sp, #12
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ba1e:	bf00      	nop
 800ba20:	370c      	adds	r7, #12
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bc80      	pop	{r7}
 800ba26:	4770      	bx	lr

0800ba28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	460b      	mov	r3, r1
 800ba32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba34:	bf00      	nop
 800ba36:	370c      	adds	r7, #12
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bc80      	pop	{r7}
 800ba3c:	4770      	bx	lr

0800ba3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b090      	sub	sp, #64	; 0x40
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	60f8      	str	r0, [r7, #12]
 800ba46:	60b9      	str	r1, [r7, #8]
 800ba48:	603b      	str	r3, [r7, #0]
 800ba4a:	4613      	mov	r3, r2
 800ba4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba4e:	e050      	b.n	800baf2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba56:	d04c      	beq.n	800baf2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800ba58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d007      	beq.n	800ba6e <UART_WaitOnFlagUntilTimeout+0x30>
 800ba5e:	f7fa ff9b 	bl	8006998 <HAL_GetTick>
 800ba62:	4602      	mov	r2, r0
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	1ad3      	subs	r3, r2, r3
 800ba68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d241      	bcs.n	800baf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	330c      	adds	r3, #12
 800ba74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba78:	e853 3f00 	ldrex	r3, [r3]
 800ba7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba84:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	330c      	adds	r3, #12
 800ba8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ba8e:	637a      	str	r2, [r7, #52]	; 0x34
 800ba90:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba96:	e841 2300 	strex	r3, r2, [r1]
 800ba9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ba9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1e5      	bne.n	800ba6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	3314      	adds	r3, #20
 800baa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	e853 3f00 	ldrex	r3, [r3]
 800bab0:	613b      	str	r3, [r7, #16]
   return(result);
 800bab2:	693b      	ldr	r3, [r7, #16]
 800bab4:	f023 0301 	bic.w	r3, r3, #1
 800bab8:	63bb      	str	r3, [r7, #56]	; 0x38
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	3314      	adds	r3, #20
 800bac0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bac2:	623a      	str	r2, [r7, #32]
 800bac4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac6:	69f9      	ldr	r1, [r7, #28]
 800bac8:	6a3a      	ldr	r2, [r7, #32]
 800baca:	e841 2300 	strex	r3, r2, [r1]
 800bace:	61bb      	str	r3, [r7, #24]
   return(result);
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1e5      	bne.n	800baa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	2220      	movs	r2, #32
 800bada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2220      	movs	r2, #32
 800bae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	2200      	movs	r2, #0
 800baea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800baee:	2303      	movs	r3, #3
 800baf0:	e00f      	b.n	800bb12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	4013      	ands	r3, r2
 800bafc:	68ba      	ldr	r2, [r7, #8]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	bf0c      	ite	eq
 800bb02:	2301      	moveq	r3, #1
 800bb04:	2300      	movne	r3, #0
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	461a      	mov	r2, r3
 800bb0a:	79fb      	ldrb	r3, [r7, #7]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d09f      	beq.n	800ba50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3740      	adds	r7, #64	; 0x40
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b085      	sub	sp, #20
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	60f8      	str	r0, [r7, #12]
 800bb22:	60b9      	str	r1, [r7, #8]
 800bb24:	4613      	mov	r3, r2
 800bb26:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	68ba      	ldr	r2, [r7, #8]
 800bb2c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	88fa      	ldrh	r2, [r7, #6]
 800bb32:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	88fa      	ldrh	r2, [r7, #6]
 800bb38:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2222      	movs	r2, #34	; 0x22
 800bb44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	691b      	ldr	r3, [r3, #16]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d007      	beq.n	800bb60 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68da      	ldr	r2, [r3, #12]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb5e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	695a      	ldr	r2, [r3, #20]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f042 0201 	orr.w	r2, r2, #1
 800bb6e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	68da      	ldr	r2, [r3, #12]
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	f042 0220 	orr.w	r2, r2, #32
 800bb7e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3714      	adds	r7, #20
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bc80      	pop	{r7}
 800bb8a:	4770      	bx	lr

0800bb8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b095      	sub	sp, #84	; 0x54
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	330c      	adds	r3, #12
 800bb9a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb9e:	e853 3f00 	ldrex	r3, [r3]
 800bba2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	330c      	adds	r3, #12
 800bbb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bbb4:	643a      	str	r2, [r7, #64]	; 0x40
 800bbb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bbba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbbc:	e841 2300 	strex	r3, r2, [r1]
 800bbc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d1e5      	bne.n	800bb94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	3314      	adds	r3, #20
 800bbce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd0:	6a3b      	ldr	r3, [r7, #32]
 800bbd2:	e853 3f00 	ldrex	r3, [r3]
 800bbd6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	f023 0301 	bic.w	r3, r3, #1
 800bbde:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	3314      	adds	r3, #20
 800bbe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bbe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bbea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bbee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bbf0:	e841 2300 	strex	r3, r2, [r1]
 800bbf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d1e5      	bne.n	800bbc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc00:	2b01      	cmp	r3, #1
 800bc02:	d119      	bne.n	800bc38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	330c      	adds	r3, #12
 800bc0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	e853 3f00 	ldrex	r3, [r3]
 800bc12:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	f023 0310 	bic.w	r3, r3, #16
 800bc1a:	647b      	str	r3, [r7, #68]	; 0x44
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	330c      	adds	r3, #12
 800bc22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc24:	61ba      	str	r2, [r7, #24]
 800bc26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc28:	6979      	ldr	r1, [r7, #20]
 800bc2a:	69ba      	ldr	r2, [r7, #24]
 800bc2c:	e841 2300 	strex	r3, r2, [r1]
 800bc30:	613b      	str	r3, [r7, #16]
   return(result);
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d1e5      	bne.n	800bc04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2220      	movs	r2, #32
 800bc3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bc46:	bf00      	nop
 800bc48:	3754      	adds	r7, #84	; 0x54
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bc80      	pop	{r7}
 800bc4e:	4770      	bx	lr

0800bc50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2200      	movs	r2, #0
 800bc62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc6a:	68f8      	ldr	r0, [r7, #12]
 800bc6c:	f7ff fed3 	bl	800ba16 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc70:	bf00      	nop
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2b21      	cmp	r3, #33	; 0x21
 800bc8a:	d13e      	bne.n	800bd0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc94:	d114      	bne.n	800bcc0 <UART_Transmit_IT+0x48>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d110      	bne.n	800bcc0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a1b      	ldr	r3, [r3, #32]
 800bca2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	881b      	ldrh	r3, [r3, #0]
 800bca8:	461a      	mov	r2, r3
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bcb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6a1b      	ldr	r3, [r3, #32]
 800bcb8:	1c9a      	adds	r2, r3, #2
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	621a      	str	r2, [r3, #32]
 800bcbe:	e008      	b.n	800bcd2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6a1b      	ldr	r3, [r3, #32]
 800bcc4:	1c59      	adds	r1, r3, #1
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	6211      	str	r1, [r2, #32]
 800bcca:	781a      	ldrb	r2, [r3, #0]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bcd6:	b29b      	uxth	r3, r3
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	4619      	mov	r1, r3
 800bce0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d10f      	bne.n	800bd06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68da      	ldr	r2, [r3, #12]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bcf4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	68da      	ldr	r2, [r3, #12]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	e000      	b.n	800bd0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bd0a:	2302      	movs	r3, #2
  }
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	3714      	adds	r7, #20
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bc80      	pop	{r7}
 800bd14:	4770      	bx	lr

0800bd16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b082      	sub	sp, #8
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68da      	ldr	r2, [r3, #12]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2220      	movs	r2, #32
 800bd32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f7ff fe64 	bl	800ba04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd3c:	2300      	movs	r3, #0
}
 800bd3e:	4618      	mov	r0, r3
 800bd40:	3708      	adds	r7, #8
 800bd42:	46bd      	mov	sp, r7
 800bd44:	bd80      	pop	{r7, pc}

0800bd46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bd46:	b580      	push	{r7, lr}
 800bd48:	b08c      	sub	sp, #48	; 0x30
 800bd4a:	af00      	add	r7, sp, #0
 800bd4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b22      	cmp	r3, #34	; 0x22
 800bd58:	f040 80ae 	bne.w	800beb8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd64:	d117      	bne.n	800bd96 <UART_Receive_IT+0x50>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d113      	bne.n	800bd96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	685b      	ldr	r3, [r3, #4]
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd84:	b29a      	uxth	r2, r3
 800bd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd8e:	1c9a      	adds	r2, r3, #2
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	629a      	str	r2, [r3, #40]	; 0x28
 800bd94:	e026      	b.n	800bde4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	689b      	ldr	r3, [r3, #8]
 800bda4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bda8:	d007      	beq.n	800bdba <UART_Receive_IT+0x74>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	689b      	ldr	r3, [r3, #8]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d10a      	bne.n	800bdc8 <UART_Receive_IT+0x82>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	691b      	ldr	r3, [r3, #16]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d106      	bne.n	800bdc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	685b      	ldr	r3, [r3, #4]
 800bdc0:	b2da      	uxtb	r2, r3
 800bdc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc4:	701a      	strb	r2, [r3, #0]
 800bdc6:	e008      	b.n	800bdda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	b2db      	uxtb	r3, r3
 800bdd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdd4:	b2da      	uxtb	r2, r3
 800bdd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdde:	1c5a      	adds	r2, r3, #1
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	3b01      	subs	r3, #1
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d15d      	bne.n	800beb4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68da      	ldr	r2, [r3, #12]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f022 0220 	bic.w	r2, r2, #32
 800be06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68da      	ldr	r2, [r3, #12]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	695a      	ldr	r2, [r3, #20]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f022 0201 	bic.w	r2, r2, #1
 800be26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2220      	movs	r2, #32
 800be2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d135      	bne.n	800beaa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2200      	movs	r2, #0
 800be42:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	330c      	adds	r3, #12
 800be4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	e853 3f00 	ldrex	r3, [r3]
 800be52:	613b      	str	r3, [r7, #16]
   return(result);
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	f023 0310 	bic.w	r3, r3, #16
 800be5a:	627b      	str	r3, [r7, #36]	; 0x24
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	330c      	adds	r3, #12
 800be62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be64:	623a      	str	r2, [r7, #32]
 800be66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be68:	69f9      	ldr	r1, [r7, #28]
 800be6a:	6a3a      	ldr	r2, [r7, #32]
 800be6c:	e841 2300 	strex	r3, r2, [r1]
 800be70:	61bb      	str	r3, [r7, #24]
   return(result);
 800be72:	69bb      	ldr	r3, [r7, #24]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d1e5      	bne.n	800be44 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f003 0310 	and.w	r3, r3, #16
 800be82:	2b10      	cmp	r3, #16
 800be84:	d10a      	bne.n	800be9c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be86:	2300      	movs	r3, #0
 800be88:	60fb      	str	r3, [r7, #12]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	60fb      	str	r3, [r7, #12]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	60fb      	str	r3, [r7, #12]
 800be9a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bea0:	4619      	mov	r1, r3
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f7ff fdc0 	bl	800ba28 <HAL_UARTEx_RxEventCallback>
 800bea8:	e002      	b.n	800beb0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7f8 ff0a 	bl	8004cc4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	e002      	b.n	800beba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800beb4:	2300      	movs	r3, #0
 800beb6:	e000      	b.n	800beba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800beb8:	2302      	movs	r3, #2
  }
}
 800beba:	4618      	mov	r0, r3
 800bebc:	3730      	adds	r7, #48	; 0x30
 800bebe:	46bd      	mov	sp, r7
 800bec0:	bd80      	pop	{r7, pc}
	...

0800bec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	68da      	ldr	r2, [r3, #12]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	430a      	orrs	r2, r1
 800bee0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	689a      	ldr	r2, [r3, #8]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	431a      	orrs	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	695b      	ldr	r3, [r3, #20]
 800bef0:	4313      	orrs	r3, r2
 800bef2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800befe:	f023 030c 	bic.w	r3, r3, #12
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	6812      	ldr	r2, [r2, #0]
 800bf06:	68b9      	ldr	r1, [r7, #8]
 800bf08:	430b      	orrs	r3, r1
 800bf0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	695b      	ldr	r3, [r3, #20]
 800bf12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	699a      	ldr	r2, [r3, #24]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	430a      	orrs	r2, r1
 800bf20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4a2c      	ldr	r2, [pc, #176]	; (800bfd8 <UART_SetConfig+0x114>)
 800bf28:	4293      	cmp	r3, r2
 800bf2a:	d103      	bne.n	800bf34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bf2c:	f7fd fb52 	bl	80095d4 <HAL_RCC_GetPCLK2Freq>
 800bf30:	60f8      	str	r0, [r7, #12]
 800bf32:	e002      	b.n	800bf3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bf34:	f7fd fb3a 	bl	80095ac <HAL_RCC_GetPCLK1Freq>
 800bf38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf3a:	68fa      	ldr	r2, [r7, #12]
 800bf3c:	4613      	mov	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4413      	add	r3, r2
 800bf42:	009a      	lsls	r2, r3, #2
 800bf44:	441a      	add	r2, r3
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf50:	4a22      	ldr	r2, [pc, #136]	; (800bfdc <UART_SetConfig+0x118>)
 800bf52:	fba2 2303 	umull	r2, r3, r2, r3
 800bf56:	095b      	lsrs	r3, r3, #5
 800bf58:	0119      	lsls	r1, r3, #4
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	009b      	lsls	r3, r3, #2
 800bf60:	4413      	add	r3, r2
 800bf62:	009a      	lsls	r2, r3, #2
 800bf64:	441a      	add	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	fbb2 f2f3 	udiv	r2, r2, r3
 800bf70:	4b1a      	ldr	r3, [pc, #104]	; (800bfdc <UART_SetConfig+0x118>)
 800bf72:	fba3 0302 	umull	r0, r3, r3, r2
 800bf76:	095b      	lsrs	r3, r3, #5
 800bf78:	2064      	movs	r0, #100	; 0x64
 800bf7a:	fb00 f303 	mul.w	r3, r0, r3
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	011b      	lsls	r3, r3, #4
 800bf82:	3332      	adds	r3, #50	; 0x32
 800bf84:	4a15      	ldr	r2, [pc, #84]	; (800bfdc <UART_SetConfig+0x118>)
 800bf86:	fba2 2303 	umull	r2, r3, r2, r3
 800bf8a:	095b      	lsrs	r3, r3, #5
 800bf8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf90:	4419      	add	r1, r3
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	4613      	mov	r3, r2
 800bf96:	009b      	lsls	r3, r3, #2
 800bf98:	4413      	add	r3, r2
 800bf9a:	009a      	lsls	r2, r3, #2
 800bf9c:	441a      	add	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	685b      	ldr	r3, [r3, #4]
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	fbb2 f2f3 	udiv	r2, r2, r3
 800bfa8:	4b0c      	ldr	r3, [pc, #48]	; (800bfdc <UART_SetConfig+0x118>)
 800bfaa:	fba3 0302 	umull	r0, r3, r3, r2
 800bfae:	095b      	lsrs	r3, r3, #5
 800bfb0:	2064      	movs	r0, #100	; 0x64
 800bfb2:	fb00 f303 	mul.w	r3, r0, r3
 800bfb6:	1ad3      	subs	r3, r2, r3
 800bfb8:	011b      	lsls	r3, r3, #4
 800bfba:	3332      	adds	r3, #50	; 0x32
 800bfbc:	4a07      	ldr	r2, [pc, #28]	; (800bfdc <UART_SetConfig+0x118>)
 800bfbe:	fba2 2303 	umull	r2, r3, r2, r3
 800bfc2:	095b      	lsrs	r3, r3, #5
 800bfc4:	f003 020f 	and.w	r2, r3, #15
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	440a      	add	r2, r1
 800bfce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bfd0:	bf00      	nop
 800bfd2:	3710      	adds	r7, #16
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}
 800bfd8:	40013800 	.word	0x40013800
 800bfdc:	51eb851f 	.word	0x51eb851f

0800bfe0 <std>:
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	b510      	push	{r4, lr}
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	e9c0 3300 	strd	r3, r3, [r0]
 800bfea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bfee:	6083      	str	r3, [r0, #8]
 800bff0:	8181      	strh	r1, [r0, #12]
 800bff2:	6643      	str	r3, [r0, #100]	; 0x64
 800bff4:	81c2      	strh	r2, [r0, #14]
 800bff6:	6183      	str	r3, [r0, #24]
 800bff8:	4619      	mov	r1, r3
 800bffa:	2208      	movs	r2, #8
 800bffc:	305c      	adds	r0, #92	; 0x5c
 800bffe:	f000 fa0d 	bl	800c41c <memset>
 800c002:	4b05      	ldr	r3, [pc, #20]	; (800c018 <std+0x38>)
 800c004:	6224      	str	r4, [r4, #32]
 800c006:	6263      	str	r3, [r4, #36]	; 0x24
 800c008:	4b04      	ldr	r3, [pc, #16]	; (800c01c <std+0x3c>)
 800c00a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c00c:	4b04      	ldr	r3, [pc, #16]	; (800c020 <std+0x40>)
 800c00e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c010:	4b04      	ldr	r3, [pc, #16]	; (800c024 <std+0x44>)
 800c012:	6323      	str	r3, [r4, #48]	; 0x30
 800c014:	bd10      	pop	{r4, pc}
 800c016:	bf00      	nop
 800c018:	0800c26d 	.word	0x0800c26d
 800c01c:	0800c28f 	.word	0x0800c28f
 800c020:	0800c2c7 	.word	0x0800c2c7
 800c024:	0800c2eb 	.word	0x0800c2eb

0800c028 <stdio_exit_handler>:
 800c028:	4a02      	ldr	r2, [pc, #8]	; (800c034 <stdio_exit_handler+0xc>)
 800c02a:	4903      	ldr	r1, [pc, #12]	; (800c038 <stdio_exit_handler+0x10>)
 800c02c:	4803      	ldr	r0, [pc, #12]	; (800c03c <stdio_exit_handler+0x14>)
 800c02e:	f000 b869 	b.w	800c104 <_fwalk_sglue>
 800c032:	bf00      	nop
 800c034:	20000038 	.word	0x20000038
 800c038:	0800d075 	.word	0x0800d075
 800c03c:	20000044 	.word	0x20000044

0800c040 <cleanup_stdio>:
 800c040:	6841      	ldr	r1, [r0, #4]
 800c042:	4b0c      	ldr	r3, [pc, #48]	; (800c074 <cleanup_stdio+0x34>)
 800c044:	b510      	push	{r4, lr}
 800c046:	4299      	cmp	r1, r3
 800c048:	4604      	mov	r4, r0
 800c04a:	d001      	beq.n	800c050 <cleanup_stdio+0x10>
 800c04c:	f001 f812 	bl	800d074 <_fflush_r>
 800c050:	68a1      	ldr	r1, [r4, #8]
 800c052:	4b09      	ldr	r3, [pc, #36]	; (800c078 <cleanup_stdio+0x38>)
 800c054:	4299      	cmp	r1, r3
 800c056:	d002      	beq.n	800c05e <cleanup_stdio+0x1e>
 800c058:	4620      	mov	r0, r4
 800c05a:	f001 f80b 	bl	800d074 <_fflush_r>
 800c05e:	68e1      	ldr	r1, [r4, #12]
 800c060:	4b06      	ldr	r3, [pc, #24]	; (800c07c <cleanup_stdio+0x3c>)
 800c062:	4299      	cmp	r1, r3
 800c064:	d004      	beq.n	800c070 <cleanup_stdio+0x30>
 800c066:	4620      	mov	r0, r4
 800c068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c06c:	f001 b802 	b.w	800d074 <_fflush_r>
 800c070:	bd10      	pop	{r4, pc}
 800c072:	bf00      	nop
 800c074:	200000e8 	.word	0x200000e8
 800c078:	20000150 	.word	0x20000150
 800c07c:	200001b8 	.word	0x200001b8

0800c080 <global_stdio_init.part.0>:
 800c080:	b510      	push	{r4, lr}
 800c082:	4b0b      	ldr	r3, [pc, #44]	; (800c0b0 <global_stdio_init.part.0+0x30>)
 800c084:	4c0b      	ldr	r4, [pc, #44]	; (800c0b4 <global_stdio_init.part.0+0x34>)
 800c086:	4a0c      	ldr	r2, [pc, #48]	; (800c0b8 <global_stdio_init.part.0+0x38>)
 800c088:	4620      	mov	r0, r4
 800c08a:	601a      	str	r2, [r3, #0]
 800c08c:	2104      	movs	r1, #4
 800c08e:	2200      	movs	r2, #0
 800c090:	f7ff ffa6 	bl	800bfe0 <std>
 800c094:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c098:	2201      	movs	r2, #1
 800c09a:	2109      	movs	r1, #9
 800c09c:	f7ff ffa0 	bl	800bfe0 <std>
 800c0a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c0a4:	2202      	movs	r2, #2
 800c0a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0aa:	2112      	movs	r1, #18
 800c0ac:	f7ff bf98 	b.w	800bfe0 <std>
 800c0b0:	20000220 	.word	0x20000220
 800c0b4:	200000e8 	.word	0x200000e8
 800c0b8:	0800c029 	.word	0x0800c029

0800c0bc <__sfp_lock_acquire>:
 800c0bc:	4801      	ldr	r0, [pc, #4]	; (800c0c4 <__sfp_lock_acquire+0x8>)
 800c0be:	f000 ba25 	b.w	800c50c <__retarget_lock_acquire_recursive>
 800c0c2:	bf00      	nop
 800c0c4:	20000229 	.word	0x20000229

0800c0c8 <__sfp_lock_release>:
 800c0c8:	4801      	ldr	r0, [pc, #4]	; (800c0d0 <__sfp_lock_release+0x8>)
 800c0ca:	f000 ba20 	b.w	800c50e <__retarget_lock_release_recursive>
 800c0ce:	bf00      	nop
 800c0d0:	20000229 	.word	0x20000229

0800c0d4 <__sinit>:
 800c0d4:	b510      	push	{r4, lr}
 800c0d6:	4604      	mov	r4, r0
 800c0d8:	f7ff fff0 	bl	800c0bc <__sfp_lock_acquire>
 800c0dc:	6a23      	ldr	r3, [r4, #32]
 800c0de:	b11b      	cbz	r3, 800c0e8 <__sinit+0x14>
 800c0e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0e4:	f7ff bff0 	b.w	800c0c8 <__sfp_lock_release>
 800c0e8:	4b04      	ldr	r3, [pc, #16]	; (800c0fc <__sinit+0x28>)
 800c0ea:	6223      	str	r3, [r4, #32]
 800c0ec:	4b04      	ldr	r3, [pc, #16]	; (800c100 <__sinit+0x2c>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d1f5      	bne.n	800c0e0 <__sinit+0xc>
 800c0f4:	f7ff ffc4 	bl	800c080 <global_stdio_init.part.0>
 800c0f8:	e7f2      	b.n	800c0e0 <__sinit+0xc>
 800c0fa:	bf00      	nop
 800c0fc:	0800c041 	.word	0x0800c041
 800c100:	20000220 	.word	0x20000220

0800c104 <_fwalk_sglue>:
 800c104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c108:	4607      	mov	r7, r0
 800c10a:	4688      	mov	r8, r1
 800c10c:	4614      	mov	r4, r2
 800c10e:	2600      	movs	r6, #0
 800c110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c114:	f1b9 0901 	subs.w	r9, r9, #1
 800c118:	d505      	bpl.n	800c126 <_fwalk_sglue+0x22>
 800c11a:	6824      	ldr	r4, [r4, #0]
 800c11c:	2c00      	cmp	r4, #0
 800c11e:	d1f7      	bne.n	800c110 <_fwalk_sglue+0xc>
 800c120:	4630      	mov	r0, r6
 800c122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c126:	89ab      	ldrh	r3, [r5, #12]
 800c128:	2b01      	cmp	r3, #1
 800c12a:	d907      	bls.n	800c13c <_fwalk_sglue+0x38>
 800c12c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c130:	3301      	adds	r3, #1
 800c132:	d003      	beq.n	800c13c <_fwalk_sglue+0x38>
 800c134:	4629      	mov	r1, r5
 800c136:	4638      	mov	r0, r7
 800c138:	47c0      	blx	r8
 800c13a:	4306      	orrs	r6, r0
 800c13c:	3568      	adds	r5, #104	; 0x68
 800c13e:	e7e9      	b.n	800c114 <_fwalk_sglue+0x10>

0800c140 <iprintf>:
 800c140:	b40f      	push	{r0, r1, r2, r3}
 800c142:	b507      	push	{r0, r1, r2, lr}
 800c144:	4906      	ldr	r1, [pc, #24]	; (800c160 <iprintf+0x20>)
 800c146:	ab04      	add	r3, sp, #16
 800c148:	6808      	ldr	r0, [r1, #0]
 800c14a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c14e:	6881      	ldr	r1, [r0, #8]
 800c150:	9301      	str	r3, [sp, #4]
 800c152:	f000 fc5f 	bl	800ca14 <_vfiprintf_r>
 800c156:	b003      	add	sp, #12
 800c158:	f85d eb04 	ldr.w	lr, [sp], #4
 800c15c:	b004      	add	sp, #16
 800c15e:	4770      	bx	lr
 800c160:	20000090 	.word	0x20000090

0800c164 <putchar>:
 800c164:	4b02      	ldr	r3, [pc, #8]	; (800c170 <putchar+0xc>)
 800c166:	4601      	mov	r1, r0
 800c168:	6818      	ldr	r0, [r3, #0]
 800c16a:	6882      	ldr	r2, [r0, #8]
 800c16c:	f001 b80b 	b.w	800d186 <_putc_r>
 800c170:	20000090 	.word	0x20000090

0800c174 <_puts_r>:
 800c174:	6a03      	ldr	r3, [r0, #32]
 800c176:	b570      	push	{r4, r5, r6, lr}
 800c178:	4605      	mov	r5, r0
 800c17a:	460e      	mov	r6, r1
 800c17c:	6884      	ldr	r4, [r0, #8]
 800c17e:	b90b      	cbnz	r3, 800c184 <_puts_r+0x10>
 800c180:	f7ff ffa8 	bl	800c0d4 <__sinit>
 800c184:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c186:	07db      	lsls	r3, r3, #31
 800c188:	d405      	bmi.n	800c196 <_puts_r+0x22>
 800c18a:	89a3      	ldrh	r3, [r4, #12]
 800c18c:	0598      	lsls	r0, r3, #22
 800c18e:	d402      	bmi.n	800c196 <_puts_r+0x22>
 800c190:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c192:	f000 f9bb 	bl	800c50c <__retarget_lock_acquire_recursive>
 800c196:	89a3      	ldrh	r3, [r4, #12]
 800c198:	0719      	lsls	r1, r3, #28
 800c19a:	d513      	bpl.n	800c1c4 <_puts_r+0x50>
 800c19c:	6923      	ldr	r3, [r4, #16]
 800c19e:	b18b      	cbz	r3, 800c1c4 <_puts_r+0x50>
 800c1a0:	3e01      	subs	r6, #1
 800c1a2:	68a3      	ldr	r3, [r4, #8]
 800c1a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c1a8:	3b01      	subs	r3, #1
 800c1aa:	60a3      	str	r3, [r4, #8]
 800c1ac:	b9e9      	cbnz	r1, 800c1ea <_puts_r+0x76>
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	da2e      	bge.n	800c210 <_puts_r+0x9c>
 800c1b2:	4622      	mov	r2, r4
 800c1b4:	210a      	movs	r1, #10
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	f000 f89b 	bl	800c2f2 <__swbuf_r>
 800c1bc:	3001      	adds	r0, #1
 800c1be:	d007      	beq.n	800c1d0 <_puts_r+0x5c>
 800c1c0:	250a      	movs	r5, #10
 800c1c2:	e007      	b.n	800c1d4 <_puts_r+0x60>
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	f000 f8d0 	bl	800c36c <__swsetup_r>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d0e7      	beq.n	800c1a0 <_puts_r+0x2c>
 800c1d0:	f04f 35ff 	mov.w	r5, #4294967295
 800c1d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1d6:	07da      	lsls	r2, r3, #31
 800c1d8:	d405      	bmi.n	800c1e6 <_puts_r+0x72>
 800c1da:	89a3      	ldrh	r3, [r4, #12]
 800c1dc:	059b      	lsls	r3, r3, #22
 800c1de:	d402      	bmi.n	800c1e6 <_puts_r+0x72>
 800c1e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1e2:	f000 f994 	bl	800c50e <__retarget_lock_release_recursive>
 800c1e6:	4628      	mov	r0, r5
 800c1e8:	bd70      	pop	{r4, r5, r6, pc}
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	da04      	bge.n	800c1f8 <_puts_r+0x84>
 800c1ee:	69a2      	ldr	r2, [r4, #24]
 800c1f0:	429a      	cmp	r2, r3
 800c1f2:	dc06      	bgt.n	800c202 <_puts_r+0x8e>
 800c1f4:	290a      	cmp	r1, #10
 800c1f6:	d004      	beq.n	800c202 <_puts_r+0x8e>
 800c1f8:	6823      	ldr	r3, [r4, #0]
 800c1fa:	1c5a      	adds	r2, r3, #1
 800c1fc:	6022      	str	r2, [r4, #0]
 800c1fe:	7019      	strb	r1, [r3, #0]
 800c200:	e7cf      	b.n	800c1a2 <_puts_r+0x2e>
 800c202:	4622      	mov	r2, r4
 800c204:	4628      	mov	r0, r5
 800c206:	f000 f874 	bl	800c2f2 <__swbuf_r>
 800c20a:	3001      	adds	r0, #1
 800c20c:	d1c9      	bne.n	800c1a2 <_puts_r+0x2e>
 800c20e:	e7df      	b.n	800c1d0 <_puts_r+0x5c>
 800c210:	250a      	movs	r5, #10
 800c212:	6823      	ldr	r3, [r4, #0]
 800c214:	1c5a      	adds	r2, r3, #1
 800c216:	6022      	str	r2, [r4, #0]
 800c218:	701d      	strb	r5, [r3, #0]
 800c21a:	e7db      	b.n	800c1d4 <_puts_r+0x60>

0800c21c <puts>:
 800c21c:	4b02      	ldr	r3, [pc, #8]	; (800c228 <puts+0xc>)
 800c21e:	4601      	mov	r1, r0
 800c220:	6818      	ldr	r0, [r3, #0]
 800c222:	f7ff bfa7 	b.w	800c174 <_puts_r>
 800c226:	bf00      	nop
 800c228:	20000090 	.word	0x20000090

0800c22c <siprintf>:
 800c22c:	b40e      	push	{r1, r2, r3}
 800c22e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c232:	b500      	push	{lr}
 800c234:	b09c      	sub	sp, #112	; 0x70
 800c236:	ab1d      	add	r3, sp, #116	; 0x74
 800c238:	9002      	str	r0, [sp, #8]
 800c23a:	9006      	str	r0, [sp, #24]
 800c23c:	9107      	str	r1, [sp, #28]
 800c23e:	9104      	str	r1, [sp, #16]
 800c240:	4808      	ldr	r0, [pc, #32]	; (800c264 <siprintf+0x38>)
 800c242:	4909      	ldr	r1, [pc, #36]	; (800c268 <siprintf+0x3c>)
 800c244:	f853 2b04 	ldr.w	r2, [r3], #4
 800c248:	9105      	str	r1, [sp, #20]
 800c24a:	6800      	ldr	r0, [r0, #0]
 800c24c:	a902      	add	r1, sp, #8
 800c24e:	9301      	str	r3, [sp, #4]
 800c250:	f000 faba 	bl	800c7c8 <_svfiprintf_r>
 800c254:	2200      	movs	r2, #0
 800c256:	9b02      	ldr	r3, [sp, #8]
 800c258:	701a      	strb	r2, [r3, #0]
 800c25a:	b01c      	add	sp, #112	; 0x70
 800c25c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c260:	b003      	add	sp, #12
 800c262:	4770      	bx	lr
 800c264:	20000090 	.word	0x20000090
 800c268:	ffff0208 	.word	0xffff0208

0800c26c <__sread>:
 800c26c:	b510      	push	{r4, lr}
 800c26e:	460c      	mov	r4, r1
 800c270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c274:	f000 f8fc 	bl	800c470 <_read_r>
 800c278:	2800      	cmp	r0, #0
 800c27a:	bfab      	itete	ge
 800c27c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c27e:	89a3      	ldrhlt	r3, [r4, #12]
 800c280:	181b      	addge	r3, r3, r0
 800c282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c286:	bfac      	ite	ge
 800c288:	6563      	strge	r3, [r4, #84]	; 0x54
 800c28a:	81a3      	strhlt	r3, [r4, #12]
 800c28c:	bd10      	pop	{r4, pc}

0800c28e <__swrite>:
 800c28e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c292:	461f      	mov	r7, r3
 800c294:	898b      	ldrh	r3, [r1, #12]
 800c296:	4605      	mov	r5, r0
 800c298:	05db      	lsls	r3, r3, #23
 800c29a:	460c      	mov	r4, r1
 800c29c:	4616      	mov	r6, r2
 800c29e:	d505      	bpl.n	800c2ac <__swrite+0x1e>
 800c2a0:	2302      	movs	r3, #2
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2a8:	f000 f8d0 	bl	800c44c <_lseek_r>
 800c2ac:	89a3      	ldrh	r3, [r4, #12]
 800c2ae:	4632      	mov	r2, r6
 800c2b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2b4:	81a3      	strh	r3, [r4, #12]
 800c2b6:	4628      	mov	r0, r5
 800c2b8:	463b      	mov	r3, r7
 800c2ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2c2:	f000 b8e7 	b.w	800c494 <_write_r>

0800c2c6 <__sseek>:
 800c2c6:	b510      	push	{r4, lr}
 800c2c8:	460c      	mov	r4, r1
 800c2ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ce:	f000 f8bd 	bl	800c44c <_lseek_r>
 800c2d2:	1c43      	adds	r3, r0, #1
 800c2d4:	89a3      	ldrh	r3, [r4, #12]
 800c2d6:	bf15      	itete	ne
 800c2d8:	6560      	strne	r0, [r4, #84]	; 0x54
 800c2da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c2de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c2e2:	81a3      	strheq	r3, [r4, #12]
 800c2e4:	bf18      	it	ne
 800c2e6:	81a3      	strhne	r3, [r4, #12]
 800c2e8:	bd10      	pop	{r4, pc}

0800c2ea <__sclose>:
 800c2ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c2ee:	f000 b89d 	b.w	800c42c <_close_r>

0800c2f2 <__swbuf_r>:
 800c2f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f4:	460e      	mov	r6, r1
 800c2f6:	4614      	mov	r4, r2
 800c2f8:	4605      	mov	r5, r0
 800c2fa:	b118      	cbz	r0, 800c304 <__swbuf_r+0x12>
 800c2fc:	6a03      	ldr	r3, [r0, #32]
 800c2fe:	b90b      	cbnz	r3, 800c304 <__swbuf_r+0x12>
 800c300:	f7ff fee8 	bl	800c0d4 <__sinit>
 800c304:	69a3      	ldr	r3, [r4, #24]
 800c306:	60a3      	str	r3, [r4, #8]
 800c308:	89a3      	ldrh	r3, [r4, #12]
 800c30a:	071a      	lsls	r2, r3, #28
 800c30c:	d525      	bpl.n	800c35a <__swbuf_r+0x68>
 800c30e:	6923      	ldr	r3, [r4, #16]
 800c310:	b31b      	cbz	r3, 800c35a <__swbuf_r+0x68>
 800c312:	6823      	ldr	r3, [r4, #0]
 800c314:	6922      	ldr	r2, [r4, #16]
 800c316:	b2f6      	uxtb	r6, r6
 800c318:	1a98      	subs	r0, r3, r2
 800c31a:	6963      	ldr	r3, [r4, #20]
 800c31c:	4637      	mov	r7, r6
 800c31e:	4283      	cmp	r3, r0
 800c320:	dc04      	bgt.n	800c32c <__swbuf_r+0x3a>
 800c322:	4621      	mov	r1, r4
 800c324:	4628      	mov	r0, r5
 800c326:	f000 fea5 	bl	800d074 <_fflush_r>
 800c32a:	b9e0      	cbnz	r0, 800c366 <__swbuf_r+0x74>
 800c32c:	68a3      	ldr	r3, [r4, #8]
 800c32e:	3b01      	subs	r3, #1
 800c330:	60a3      	str	r3, [r4, #8]
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	1c5a      	adds	r2, r3, #1
 800c336:	6022      	str	r2, [r4, #0]
 800c338:	701e      	strb	r6, [r3, #0]
 800c33a:	6962      	ldr	r2, [r4, #20]
 800c33c:	1c43      	adds	r3, r0, #1
 800c33e:	429a      	cmp	r2, r3
 800c340:	d004      	beq.n	800c34c <__swbuf_r+0x5a>
 800c342:	89a3      	ldrh	r3, [r4, #12]
 800c344:	07db      	lsls	r3, r3, #31
 800c346:	d506      	bpl.n	800c356 <__swbuf_r+0x64>
 800c348:	2e0a      	cmp	r6, #10
 800c34a:	d104      	bne.n	800c356 <__swbuf_r+0x64>
 800c34c:	4621      	mov	r1, r4
 800c34e:	4628      	mov	r0, r5
 800c350:	f000 fe90 	bl	800d074 <_fflush_r>
 800c354:	b938      	cbnz	r0, 800c366 <__swbuf_r+0x74>
 800c356:	4638      	mov	r0, r7
 800c358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c35a:	4621      	mov	r1, r4
 800c35c:	4628      	mov	r0, r5
 800c35e:	f000 f805 	bl	800c36c <__swsetup_r>
 800c362:	2800      	cmp	r0, #0
 800c364:	d0d5      	beq.n	800c312 <__swbuf_r+0x20>
 800c366:	f04f 37ff 	mov.w	r7, #4294967295
 800c36a:	e7f4      	b.n	800c356 <__swbuf_r+0x64>

0800c36c <__swsetup_r>:
 800c36c:	b538      	push	{r3, r4, r5, lr}
 800c36e:	4b2a      	ldr	r3, [pc, #168]	; (800c418 <__swsetup_r+0xac>)
 800c370:	4605      	mov	r5, r0
 800c372:	6818      	ldr	r0, [r3, #0]
 800c374:	460c      	mov	r4, r1
 800c376:	b118      	cbz	r0, 800c380 <__swsetup_r+0x14>
 800c378:	6a03      	ldr	r3, [r0, #32]
 800c37a:	b90b      	cbnz	r3, 800c380 <__swsetup_r+0x14>
 800c37c:	f7ff feaa 	bl	800c0d4 <__sinit>
 800c380:	89a3      	ldrh	r3, [r4, #12]
 800c382:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c386:	0718      	lsls	r0, r3, #28
 800c388:	d422      	bmi.n	800c3d0 <__swsetup_r+0x64>
 800c38a:	06d9      	lsls	r1, r3, #27
 800c38c:	d407      	bmi.n	800c39e <__swsetup_r+0x32>
 800c38e:	2309      	movs	r3, #9
 800c390:	602b      	str	r3, [r5, #0]
 800c392:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c396:	f04f 30ff 	mov.w	r0, #4294967295
 800c39a:	81a3      	strh	r3, [r4, #12]
 800c39c:	e034      	b.n	800c408 <__swsetup_r+0x9c>
 800c39e:	0758      	lsls	r0, r3, #29
 800c3a0:	d512      	bpl.n	800c3c8 <__swsetup_r+0x5c>
 800c3a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3a4:	b141      	cbz	r1, 800c3b8 <__swsetup_r+0x4c>
 800c3a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c3aa:	4299      	cmp	r1, r3
 800c3ac:	d002      	beq.n	800c3b4 <__swsetup_r+0x48>
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	f000 f8bc 	bl	800c52c <_free_r>
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	6363      	str	r3, [r4, #52]	; 0x34
 800c3b8:	89a3      	ldrh	r3, [r4, #12]
 800c3ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c3be:	81a3      	strh	r3, [r4, #12]
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	6063      	str	r3, [r4, #4]
 800c3c4:	6923      	ldr	r3, [r4, #16]
 800c3c6:	6023      	str	r3, [r4, #0]
 800c3c8:	89a3      	ldrh	r3, [r4, #12]
 800c3ca:	f043 0308 	orr.w	r3, r3, #8
 800c3ce:	81a3      	strh	r3, [r4, #12]
 800c3d0:	6923      	ldr	r3, [r4, #16]
 800c3d2:	b94b      	cbnz	r3, 800c3e8 <__swsetup_r+0x7c>
 800c3d4:	89a3      	ldrh	r3, [r4, #12]
 800c3d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c3da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c3de:	d003      	beq.n	800c3e8 <__swsetup_r+0x7c>
 800c3e0:	4621      	mov	r1, r4
 800c3e2:	4628      	mov	r0, r5
 800c3e4:	f000 fe93 	bl	800d10e <__smakebuf_r>
 800c3e8:	89a0      	ldrh	r0, [r4, #12]
 800c3ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c3ee:	f010 0301 	ands.w	r3, r0, #1
 800c3f2:	d00a      	beq.n	800c40a <__swsetup_r+0x9e>
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	60a3      	str	r3, [r4, #8]
 800c3f8:	6963      	ldr	r3, [r4, #20]
 800c3fa:	425b      	negs	r3, r3
 800c3fc:	61a3      	str	r3, [r4, #24]
 800c3fe:	6923      	ldr	r3, [r4, #16]
 800c400:	b943      	cbnz	r3, 800c414 <__swsetup_r+0xa8>
 800c402:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c406:	d1c4      	bne.n	800c392 <__swsetup_r+0x26>
 800c408:	bd38      	pop	{r3, r4, r5, pc}
 800c40a:	0781      	lsls	r1, r0, #30
 800c40c:	bf58      	it	pl
 800c40e:	6963      	ldrpl	r3, [r4, #20]
 800c410:	60a3      	str	r3, [r4, #8]
 800c412:	e7f4      	b.n	800c3fe <__swsetup_r+0x92>
 800c414:	2000      	movs	r0, #0
 800c416:	e7f7      	b.n	800c408 <__swsetup_r+0x9c>
 800c418:	20000090 	.word	0x20000090

0800c41c <memset>:
 800c41c:	4603      	mov	r3, r0
 800c41e:	4402      	add	r2, r0
 800c420:	4293      	cmp	r3, r2
 800c422:	d100      	bne.n	800c426 <memset+0xa>
 800c424:	4770      	bx	lr
 800c426:	f803 1b01 	strb.w	r1, [r3], #1
 800c42a:	e7f9      	b.n	800c420 <memset+0x4>

0800c42c <_close_r>:
 800c42c:	b538      	push	{r3, r4, r5, lr}
 800c42e:	2300      	movs	r3, #0
 800c430:	4d05      	ldr	r5, [pc, #20]	; (800c448 <_close_r+0x1c>)
 800c432:	4604      	mov	r4, r0
 800c434:	4608      	mov	r0, r1
 800c436:	602b      	str	r3, [r5, #0]
 800c438:	f7f9 ff09 	bl	800624e <_close>
 800c43c:	1c43      	adds	r3, r0, #1
 800c43e:	d102      	bne.n	800c446 <_close_r+0x1a>
 800c440:	682b      	ldr	r3, [r5, #0]
 800c442:	b103      	cbz	r3, 800c446 <_close_r+0x1a>
 800c444:	6023      	str	r3, [r4, #0]
 800c446:	bd38      	pop	{r3, r4, r5, pc}
 800c448:	20000224 	.word	0x20000224

0800c44c <_lseek_r>:
 800c44c:	b538      	push	{r3, r4, r5, lr}
 800c44e:	4604      	mov	r4, r0
 800c450:	4608      	mov	r0, r1
 800c452:	4611      	mov	r1, r2
 800c454:	2200      	movs	r2, #0
 800c456:	4d05      	ldr	r5, [pc, #20]	; (800c46c <_lseek_r+0x20>)
 800c458:	602a      	str	r2, [r5, #0]
 800c45a:	461a      	mov	r2, r3
 800c45c:	f7f9 ff1b 	bl	8006296 <_lseek>
 800c460:	1c43      	adds	r3, r0, #1
 800c462:	d102      	bne.n	800c46a <_lseek_r+0x1e>
 800c464:	682b      	ldr	r3, [r5, #0]
 800c466:	b103      	cbz	r3, 800c46a <_lseek_r+0x1e>
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	20000224 	.word	0x20000224

0800c470 <_read_r>:
 800c470:	b538      	push	{r3, r4, r5, lr}
 800c472:	4604      	mov	r4, r0
 800c474:	4608      	mov	r0, r1
 800c476:	4611      	mov	r1, r2
 800c478:	2200      	movs	r2, #0
 800c47a:	4d05      	ldr	r5, [pc, #20]	; (800c490 <_read_r+0x20>)
 800c47c:	602a      	str	r2, [r5, #0]
 800c47e:	461a      	mov	r2, r3
 800c480:	f7f9 feac 	bl	80061dc <_read>
 800c484:	1c43      	adds	r3, r0, #1
 800c486:	d102      	bne.n	800c48e <_read_r+0x1e>
 800c488:	682b      	ldr	r3, [r5, #0]
 800c48a:	b103      	cbz	r3, 800c48e <_read_r+0x1e>
 800c48c:	6023      	str	r3, [r4, #0]
 800c48e:	bd38      	pop	{r3, r4, r5, pc}
 800c490:	20000224 	.word	0x20000224

0800c494 <_write_r>:
 800c494:	b538      	push	{r3, r4, r5, lr}
 800c496:	4604      	mov	r4, r0
 800c498:	4608      	mov	r0, r1
 800c49a:	4611      	mov	r1, r2
 800c49c:	2200      	movs	r2, #0
 800c49e:	4d05      	ldr	r5, [pc, #20]	; (800c4b4 <_write_r+0x20>)
 800c4a0:	602a      	str	r2, [r5, #0]
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	f7f9 feb7 	bl	8006216 <_write>
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	d102      	bne.n	800c4b2 <_write_r+0x1e>
 800c4ac:	682b      	ldr	r3, [r5, #0]
 800c4ae:	b103      	cbz	r3, 800c4b2 <_write_r+0x1e>
 800c4b0:	6023      	str	r3, [r4, #0]
 800c4b2:	bd38      	pop	{r3, r4, r5, pc}
 800c4b4:	20000224 	.word	0x20000224

0800c4b8 <__errno>:
 800c4b8:	4b01      	ldr	r3, [pc, #4]	; (800c4c0 <__errno+0x8>)
 800c4ba:	6818      	ldr	r0, [r3, #0]
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	20000090 	.word	0x20000090

0800c4c4 <__libc_init_array>:
 800c4c4:	b570      	push	{r4, r5, r6, lr}
 800c4c6:	2600      	movs	r6, #0
 800c4c8:	4d0c      	ldr	r5, [pc, #48]	; (800c4fc <__libc_init_array+0x38>)
 800c4ca:	4c0d      	ldr	r4, [pc, #52]	; (800c500 <__libc_init_array+0x3c>)
 800c4cc:	1b64      	subs	r4, r4, r5
 800c4ce:	10a4      	asrs	r4, r4, #2
 800c4d0:	42a6      	cmp	r6, r4
 800c4d2:	d109      	bne.n	800c4e8 <__libc_init_array+0x24>
 800c4d4:	f000 ff1e 	bl	800d314 <_init>
 800c4d8:	2600      	movs	r6, #0
 800c4da:	4d0a      	ldr	r5, [pc, #40]	; (800c504 <__libc_init_array+0x40>)
 800c4dc:	4c0a      	ldr	r4, [pc, #40]	; (800c508 <__libc_init_array+0x44>)
 800c4de:	1b64      	subs	r4, r4, r5
 800c4e0:	10a4      	asrs	r4, r4, #2
 800c4e2:	42a6      	cmp	r6, r4
 800c4e4:	d105      	bne.n	800c4f2 <__libc_init_array+0x2e>
 800c4e6:	bd70      	pop	{r4, r5, r6, pc}
 800c4e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4ec:	4798      	blx	r3
 800c4ee:	3601      	adds	r6, #1
 800c4f0:	e7ee      	b.n	800c4d0 <__libc_init_array+0xc>
 800c4f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4f6:	4798      	blx	r3
 800c4f8:	3601      	adds	r6, #1
 800c4fa:	e7f2      	b.n	800c4e2 <__libc_init_array+0x1e>
 800c4fc:	0800dd00 	.word	0x0800dd00
 800c500:	0800dd00 	.word	0x0800dd00
 800c504:	0800dd00 	.word	0x0800dd00
 800c508:	0800dd04 	.word	0x0800dd04

0800c50c <__retarget_lock_acquire_recursive>:
 800c50c:	4770      	bx	lr

0800c50e <__retarget_lock_release_recursive>:
 800c50e:	4770      	bx	lr

0800c510 <memcpy>:
 800c510:	440a      	add	r2, r1
 800c512:	4291      	cmp	r1, r2
 800c514:	f100 33ff 	add.w	r3, r0, #4294967295
 800c518:	d100      	bne.n	800c51c <memcpy+0xc>
 800c51a:	4770      	bx	lr
 800c51c:	b510      	push	{r4, lr}
 800c51e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c522:	4291      	cmp	r1, r2
 800c524:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c528:	d1f9      	bne.n	800c51e <memcpy+0xe>
 800c52a:	bd10      	pop	{r4, pc}

0800c52c <_free_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4605      	mov	r5, r0
 800c530:	2900      	cmp	r1, #0
 800c532:	d040      	beq.n	800c5b6 <_free_r+0x8a>
 800c534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c538:	1f0c      	subs	r4, r1, #4
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	bfb8      	it	lt
 800c53e:	18e4      	addlt	r4, r4, r3
 800c540:	f000 f8dc 	bl	800c6fc <__malloc_lock>
 800c544:	4a1c      	ldr	r2, [pc, #112]	; (800c5b8 <_free_r+0x8c>)
 800c546:	6813      	ldr	r3, [r2, #0]
 800c548:	b933      	cbnz	r3, 800c558 <_free_r+0x2c>
 800c54a:	6063      	str	r3, [r4, #4]
 800c54c:	6014      	str	r4, [r2, #0]
 800c54e:	4628      	mov	r0, r5
 800c550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c554:	f000 b8d8 	b.w	800c708 <__malloc_unlock>
 800c558:	42a3      	cmp	r3, r4
 800c55a:	d908      	bls.n	800c56e <_free_r+0x42>
 800c55c:	6820      	ldr	r0, [r4, #0]
 800c55e:	1821      	adds	r1, r4, r0
 800c560:	428b      	cmp	r3, r1
 800c562:	bf01      	itttt	eq
 800c564:	6819      	ldreq	r1, [r3, #0]
 800c566:	685b      	ldreq	r3, [r3, #4]
 800c568:	1809      	addeq	r1, r1, r0
 800c56a:	6021      	streq	r1, [r4, #0]
 800c56c:	e7ed      	b.n	800c54a <_free_r+0x1e>
 800c56e:	461a      	mov	r2, r3
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	b10b      	cbz	r3, 800c578 <_free_r+0x4c>
 800c574:	42a3      	cmp	r3, r4
 800c576:	d9fa      	bls.n	800c56e <_free_r+0x42>
 800c578:	6811      	ldr	r1, [r2, #0]
 800c57a:	1850      	adds	r0, r2, r1
 800c57c:	42a0      	cmp	r0, r4
 800c57e:	d10b      	bne.n	800c598 <_free_r+0x6c>
 800c580:	6820      	ldr	r0, [r4, #0]
 800c582:	4401      	add	r1, r0
 800c584:	1850      	adds	r0, r2, r1
 800c586:	4283      	cmp	r3, r0
 800c588:	6011      	str	r1, [r2, #0]
 800c58a:	d1e0      	bne.n	800c54e <_free_r+0x22>
 800c58c:	6818      	ldr	r0, [r3, #0]
 800c58e:	685b      	ldr	r3, [r3, #4]
 800c590:	4408      	add	r0, r1
 800c592:	6010      	str	r0, [r2, #0]
 800c594:	6053      	str	r3, [r2, #4]
 800c596:	e7da      	b.n	800c54e <_free_r+0x22>
 800c598:	d902      	bls.n	800c5a0 <_free_r+0x74>
 800c59a:	230c      	movs	r3, #12
 800c59c:	602b      	str	r3, [r5, #0]
 800c59e:	e7d6      	b.n	800c54e <_free_r+0x22>
 800c5a0:	6820      	ldr	r0, [r4, #0]
 800c5a2:	1821      	adds	r1, r4, r0
 800c5a4:	428b      	cmp	r3, r1
 800c5a6:	bf01      	itttt	eq
 800c5a8:	6819      	ldreq	r1, [r3, #0]
 800c5aa:	685b      	ldreq	r3, [r3, #4]
 800c5ac:	1809      	addeq	r1, r1, r0
 800c5ae:	6021      	streq	r1, [r4, #0]
 800c5b0:	6063      	str	r3, [r4, #4]
 800c5b2:	6054      	str	r4, [r2, #4]
 800c5b4:	e7cb      	b.n	800c54e <_free_r+0x22>
 800c5b6:	bd38      	pop	{r3, r4, r5, pc}
 800c5b8:	2000022c 	.word	0x2000022c

0800c5bc <sbrk_aligned>:
 800c5bc:	b570      	push	{r4, r5, r6, lr}
 800c5be:	4e0e      	ldr	r6, [pc, #56]	; (800c5f8 <sbrk_aligned+0x3c>)
 800c5c0:	460c      	mov	r4, r1
 800c5c2:	6831      	ldr	r1, [r6, #0]
 800c5c4:	4605      	mov	r5, r0
 800c5c6:	b911      	cbnz	r1, 800c5ce <sbrk_aligned+0x12>
 800c5c8:	f000 fe4e 	bl	800d268 <_sbrk_r>
 800c5cc:	6030      	str	r0, [r6, #0]
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	f000 fe49 	bl	800d268 <_sbrk_r>
 800c5d6:	1c43      	adds	r3, r0, #1
 800c5d8:	d00a      	beq.n	800c5f0 <sbrk_aligned+0x34>
 800c5da:	1cc4      	adds	r4, r0, #3
 800c5dc:	f024 0403 	bic.w	r4, r4, #3
 800c5e0:	42a0      	cmp	r0, r4
 800c5e2:	d007      	beq.n	800c5f4 <sbrk_aligned+0x38>
 800c5e4:	1a21      	subs	r1, r4, r0
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	f000 fe3e 	bl	800d268 <_sbrk_r>
 800c5ec:	3001      	adds	r0, #1
 800c5ee:	d101      	bne.n	800c5f4 <sbrk_aligned+0x38>
 800c5f0:	f04f 34ff 	mov.w	r4, #4294967295
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	bd70      	pop	{r4, r5, r6, pc}
 800c5f8:	20000230 	.word	0x20000230

0800c5fc <_malloc_r>:
 800c5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c600:	1ccd      	adds	r5, r1, #3
 800c602:	f025 0503 	bic.w	r5, r5, #3
 800c606:	3508      	adds	r5, #8
 800c608:	2d0c      	cmp	r5, #12
 800c60a:	bf38      	it	cc
 800c60c:	250c      	movcc	r5, #12
 800c60e:	2d00      	cmp	r5, #0
 800c610:	4607      	mov	r7, r0
 800c612:	db01      	blt.n	800c618 <_malloc_r+0x1c>
 800c614:	42a9      	cmp	r1, r5
 800c616:	d905      	bls.n	800c624 <_malloc_r+0x28>
 800c618:	230c      	movs	r3, #12
 800c61a:	2600      	movs	r6, #0
 800c61c:	603b      	str	r3, [r7, #0]
 800c61e:	4630      	mov	r0, r6
 800c620:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c624:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c6f8 <_malloc_r+0xfc>
 800c628:	f000 f868 	bl	800c6fc <__malloc_lock>
 800c62c:	f8d8 3000 	ldr.w	r3, [r8]
 800c630:	461c      	mov	r4, r3
 800c632:	bb5c      	cbnz	r4, 800c68c <_malloc_r+0x90>
 800c634:	4629      	mov	r1, r5
 800c636:	4638      	mov	r0, r7
 800c638:	f7ff ffc0 	bl	800c5bc <sbrk_aligned>
 800c63c:	1c43      	adds	r3, r0, #1
 800c63e:	4604      	mov	r4, r0
 800c640:	d155      	bne.n	800c6ee <_malloc_r+0xf2>
 800c642:	f8d8 4000 	ldr.w	r4, [r8]
 800c646:	4626      	mov	r6, r4
 800c648:	2e00      	cmp	r6, #0
 800c64a:	d145      	bne.n	800c6d8 <_malloc_r+0xdc>
 800c64c:	2c00      	cmp	r4, #0
 800c64e:	d048      	beq.n	800c6e2 <_malloc_r+0xe6>
 800c650:	6823      	ldr	r3, [r4, #0]
 800c652:	4631      	mov	r1, r6
 800c654:	4638      	mov	r0, r7
 800c656:	eb04 0903 	add.w	r9, r4, r3
 800c65a:	f000 fe05 	bl	800d268 <_sbrk_r>
 800c65e:	4581      	cmp	r9, r0
 800c660:	d13f      	bne.n	800c6e2 <_malloc_r+0xe6>
 800c662:	6821      	ldr	r1, [r4, #0]
 800c664:	4638      	mov	r0, r7
 800c666:	1a6d      	subs	r5, r5, r1
 800c668:	4629      	mov	r1, r5
 800c66a:	f7ff ffa7 	bl	800c5bc <sbrk_aligned>
 800c66e:	3001      	adds	r0, #1
 800c670:	d037      	beq.n	800c6e2 <_malloc_r+0xe6>
 800c672:	6823      	ldr	r3, [r4, #0]
 800c674:	442b      	add	r3, r5
 800c676:	6023      	str	r3, [r4, #0]
 800c678:	f8d8 3000 	ldr.w	r3, [r8]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d038      	beq.n	800c6f2 <_malloc_r+0xf6>
 800c680:	685a      	ldr	r2, [r3, #4]
 800c682:	42a2      	cmp	r2, r4
 800c684:	d12b      	bne.n	800c6de <_malloc_r+0xe2>
 800c686:	2200      	movs	r2, #0
 800c688:	605a      	str	r2, [r3, #4]
 800c68a:	e00f      	b.n	800c6ac <_malloc_r+0xb0>
 800c68c:	6822      	ldr	r2, [r4, #0]
 800c68e:	1b52      	subs	r2, r2, r5
 800c690:	d41f      	bmi.n	800c6d2 <_malloc_r+0xd6>
 800c692:	2a0b      	cmp	r2, #11
 800c694:	d917      	bls.n	800c6c6 <_malloc_r+0xca>
 800c696:	1961      	adds	r1, r4, r5
 800c698:	42a3      	cmp	r3, r4
 800c69a:	6025      	str	r5, [r4, #0]
 800c69c:	bf18      	it	ne
 800c69e:	6059      	strne	r1, [r3, #4]
 800c6a0:	6863      	ldr	r3, [r4, #4]
 800c6a2:	bf08      	it	eq
 800c6a4:	f8c8 1000 	streq.w	r1, [r8]
 800c6a8:	5162      	str	r2, [r4, r5]
 800c6aa:	604b      	str	r3, [r1, #4]
 800c6ac:	4638      	mov	r0, r7
 800c6ae:	f104 060b 	add.w	r6, r4, #11
 800c6b2:	f000 f829 	bl	800c708 <__malloc_unlock>
 800c6b6:	f026 0607 	bic.w	r6, r6, #7
 800c6ba:	1d23      	adds	r3, r4, #4
 800c6bc:	1af2      	subs	r2, r6, r3
 800c6be:	d0ae      	beq.n	800c61e <_malloc_r+0x22>
 800c6c0:	1b9b      	subs	r3, r3, r6
 800c6c2:	50a3      	str	r3, [r4, r2]
 800c6c4:	e7ab      	b.n	800c61e <_malloc_r+0x22>
 800c6c6:	42a3      	cmp	r3, r4
 800c6c8:	6862      	ldr	r2, [r4, #4]
 800c6ca:	d1dd      	bne.n	800c688 <_malloc_r+0x8c>
 800c6cc:	f8c8 2000 	str.w	r2, [r8]
 800c6d0:	e7ec      	b.n	800c6ac <_malloc_r+0xb0>
 800c6d2:	4623      	mov	r3, r4
 800c6d4:	6864      	ldr	r4, [r4, #4]
 800c6d6:	e7ac      	b.n	800c632 <_malloc_r+0x36>
 800c6d8:	4634      	mov	r4, r6
 800c6da:	6876      	ldr	r6, [r6, #4]
 800c6dc:	e7b4      	b.n	800c648 <_malloc_r+0x4c>
 800c6de:	4613      	mov	r3, r2
 800c6e0:	e7cc      	b.n	800c67c <_malloc_r+0x80>
 800c6e2:	230c      	movs	r3, #12
 800c6e4:	4638      	mov	r0, r7
 800c6e6:	603b      	str	r3, [r7, #0]
 800c6e8:	f000 f80e 	bl	800c708 <__malloc_unlock>
 800c6ec:	e797      	b.n	800c61e <_malloc_r+0x22>
 800c6ee:	6025      	str	r5, [r4, #0]
 800c6f0:	e7dc      	b.n	800c6ac <_malloc_r+0xb0>
 800c6f2:	605b      	str	r3, [r3, #4]
 800c6f4:	deff      	udf	#255	; 0xff
 800c6f6:	bf00      	nop
 800c6f8:	2000022c 	.word	0x2000022c

0800c6fc <__malloc_lock>:
 800c6fc:	4801      	ldr	r0, [pc, #4]	; (800c704 <__malloc_lock+0x8>)
 800c6fe:	f7ff bf05 	b.w	800c50c <__retarget_lock_acquire_recursive>
 800c702:	bf00      	nop
 800c704:	20000228 	.word	0x20000228

0800c708 <__malloc_unlock>:
 800c708:	4801      	ldr	r0, [pc, #4]	; (800c710 <__malloc_unlock+0x8>)
 800c70a:	f7ff bf00 	b.w	800c50e <__retarget_lock_release_recursive>
 800c70e:	bf00      	nop
 800c710:	20000228 	.word	0x20000228

0800c714 <__ssputs_r>:
 800c714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c718:	461f      	mov	r7, r3
 800c71a:	688e      	ldr	r6, [r1, #8]
 800c71c:	4682      	mov	sl, r0
 800c71e:	42be      	cmp	r6, r7
 800c720:	460c      	mov	r4, r1
 800c722:	4690      	mov	r8, r2
 800c724:	680b      	ldr	r3, [r1, #0]
 800c726:	d82c      	bhi.n	800c782 <__ssputs_r+0x6e>
 800c728:	898a      	ldrh	r2, [r1, #12]
 800c72a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c72e:	d026      	beq.n	800c77e <__ssputs_r+0x6a>
 800c730:	6965      	ldr	r5, [r4, #20]
 800c732:	6909      	ldr	r1, [r1, #16]
 800c734:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c738:	eba3 0901 	sub.w	r9, r3, r1
 800c73c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c740:	1c7b      	adds	r3, r7, #1
 800c742:	444b      	add	r3, r9
 800c744:	106d      	asrs	r5, r5, #1
 800c746:	429d      	cmp	r5, r3
 800c748:	bf38      	it	cc
 800c74a:	461d      	movcc	r5, r3
 800c74c:	0553      	lsls	r3, r2, #21
 800c74e:	d527      	bpl.n	800c7a0 <__ssputs_r+0x8c>
 800c750:	4629      	mov	r1, r5
 800c752:	f7ff ff53 	bl	800c5fc <_malloc_r>
 800c756:	4606      	mov	r6, r0
 800c758:	b360      	cbz	r0, 800c7b4 <__ssputs_r+0xa0>
 800c75a:	464a      	mov	r2, r9
 800c75c:	6921      	ldr	r1, [r4, #16]
 800c75e:	f7ff fed7 	bl	800c510 <memcpy>
 800c762:	89a3      	ldrh	r3, [r4, #12]
 800c764:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c76c:	81a3      	strh	r3, [r4, #12]
 800c76e:	6126      	str	r6, [r4, #16]
 800c770:	444e      	add	r6, r9
 800c772:	6026      	str	r6, [r4, #0]
 800c774:	463e      	mov	r6, r7
 800c776:	6165      	str	r5, [r4, #20]
 800c778:	eba5 0509 	sub.w	r5, r5, r9
 800c77c:	60a5      	str	r5, [r4, #8]
 800c77e:	42be      	cmp	r6, r7
 800c780:	d900      	bls.n	800c784 <__ssputs_r+0x70>
 800c782:	463e      	mov	r6, r7
 800c784:	4632      	mov	r2, r6
 800c786:	4641      	mov	r1, r8
 800c788:	6820      	ldr	r0, [r4, #0]
 800c78a:	f000 fd30 	bl	800d1ee <memmove>
 800c78e:	2000      	movs	r0, #0
 800c790:	68a3      	ldr	r3, [r4, #8]
 800c792:	1b9b      	subs	r3, r3, r6
 800c794:	60a3      	str	r3, [r4, #8]
 800c796:	6823      	ldr	r3, [r4, #0]
 800c798:	4433      	add	r3, r6
 800c79a:	6023      	str	r3, [r4, #0]
 800c79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7a0:	462a      	mov	r2, r5
 800c7a2:	f000 fd7f 	bl	800d2a4 <_realloc_r>
 800c7a6:	4606      	mov	r6, r0
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	d1e0      	bne.n	800c76e <__ssputs_r+0x5a>
 800c7ac:	4650      	mov	r0, sl
 800c7ae:	6921      	ldr	r1, [r4, #16]
 800c7b0:	f7ff febc 	bl	800c52c <_free_r>
 800c7b4:	230c      	movs	r3, #12
 800c7b6:	f8ca 3000 	str.w	r3, [sl]
 800c7ba:	89a3      	ldrh	r3, [r4, #12]
 800c7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7c4:	81a3      	strh	r3, [r4, #12]
 800c7c6:	e7e9      	b.n	800c79c <__ssputs_r+0x88>

0800c7c8 <_svfiprintf_r>:
 800c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	4698      	mov	r8, r3
 800c7ce:	898b      	ldrh	r3, [r1, #12]
 800c7d0:	4607      	mov	r7, r0
 800c7d2:	061b      	lsls	r3, r3, #24
 800c7d4:	460d      	mov	r5, r1
 800c7d6:	4614      	mov	r4, r2
 800c7d8:	b09d      	sub	sp, #116	; 0x74
 800c7da:	d50e      	bpl.n	800c7fa <_svfiprintf_r+0x32>
 800c7dc:	690b      	ldr	r3, [r1, #16]
 800c7de:	b963      	cbnz	r3, 800c7fa <_svfiprintf_r+0x32>
 800c7e0:	2140      	movs	r1, #64	; 0x40
 800c7e2:	f7ff ff0b 	bl	800c5fc <_malloc_r>
 800c7e6:	6028      	str	r0, [r5, #0]
 800c7e8:	6128      	str	r0, [r5, #16]
 800c7ea:	b920      	cbnz	r0, 800c7f6 <_svfiprintf_r+0x2e>
 800c7ec:	230c      	movs	r3, #12
 800c7ee:	603b      	str	r3, [r7, #0]
 800c7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7f4:	e0d0      	b.n	800c998 <_svfiprintf_r+0x1d0>
 800c7f6:	2340      	movs	r3, #64	; 0x40
 800c7f8:	616b      	str	r3, [r5, #20]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c7fe:	2320      	movs	r3, #32
 800c800:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c804:	2330      	movs	r3, #48	; 0x30
 800c806:	f04f 0901 	mov.w	r9, #1
 800c80a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c80e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c9b0 <_svfiprintf_r+0x1e8>
 800c812:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c816:	4623      	mov	r3, r4
 800c818:	469a      	mov	sl, r3
 800c81a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c81e:	b10a      	cbz	r2, 800c824 <_svfiprintf_r+0x5c>
 800c820:	2a25      	cmp	r2, #37	; 0x25
 800c822:	d1f9      	bne.n	800c818 <_svfiprintf_r+0x50>
 800c824:	ebba 0b04 	subs.w	fp, sl, r4
 800c828:	d00b      	beq.n	800c842 <_svfiprintf_r+0x7a>
 800c82a:	465b      	mov	r3, fp
 800c82c:	4622      	mov	r2, r4
 800c82e:	4629      	mov	r1, r5
 800c830:	4638      	mov	r0, r7
 800c832:	f7ff ff6f 	bl	800c714 <__ssputs_r>
 800c836:	3001      	adds	r0, #1
 800c838:	f000 80a9 	beq.w	800c98e <_svfiprintf_r+0x1c6>
 800c83c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c83e:	445a      	add	r2, fp
 800c840:	9209      	str	r2, [sp, #36]	; 0x24
 800c842:	f89a 3000 	ldrb.w	r3, [sl]
 800c846:	2b00      	cmp	r3, #0
 800c848:	f000 80a1 	beq.w	800c98e <_svfiprintf_r+0x1c6>
 800c84c:	2300      	movs	r3, #0
 800c84e:	f04f 32ff 	mov.w	r2, #4294967295
 800c852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c856:	f10a 0a01 	add.w	sl, sl, #1
 800c85a:	9304      	str	r3, [sp, #16]
 800c85c:	9307      	str	r3, [sp, #28]
 800c85e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c862:	931a      	str	r3, [sp, #104]	; 0x68
 800c864:	4654      	mov	r4, sl
 800c866:	2205      	movs	r2, #5
 800c868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c86c:	4850      	ldr	r0, [pc, #320]	; (800c9b0 <_svfiprintf_r+0x1e8>)
 800c86e:	f000 fd0b 	bl	800d288 <memchr>
 800c872:	9a04      	ldr	r2, [sp, #16]
 800c874:	b9d8      	cbnz	r0, 800c8ae <_svfiprintf_r+0xe6>
 800c876:	06d0      	lsls	r0, r2, #27
 800c878:	bf44      	itt	mi
 800c87a:	2320      	movmi	r3, #32
 800c87c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c880:	0711      	lsls	r1, r2, #28
 800c882:	bf44      	itt	mi
 800c884:	232b      	movmi	r3, #43	; 0x2b
 800c886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c88a:	f89a 3000 	ldrb.w	r3, [sl]
 800c88e:	2b2a      	cmp	r3, #42	; 0x2a
 800c890:	d015      	beq.n	800c8be <_svfiprintf_r+0xf6>
 800c892:	4654      	mov	r4, sl
 800c894:	2000      	movs	r0, #0
 800c896:	f04f 0c0a 	mov.w	ip, #10
 800c89a:	9a07      	ldr	r2, [sp, #28]
 800c89c:	4621      	mov	r1, r4
 800c89e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c8a2:	3b30      	subs	r3, #48	; 0x30
 800c8a4:	2b09      	cmp	r3, #9
 800c8a6:	d94d      	bls.n	800c944 <_svfiprintf_r+0x17c>
 800c8a8:	b1b0      	cbz	r0, 800c8d8 <_svfiprintf_r+0x110>
 800c8aa:	9207      	str	r2, [sp, #28]
 800c8ac:	e014      	b.n	800c8d8 <_svfiprintf_r+0x110>
 800c8ae:	eba0 0308 	sub.w	r3, r0, r8
 800c8b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	46a2      	mov	sl, r4
 800c8ba:	9304      	str	r3, [sp, #16]
 800c8bc:	e7d2      	b.n	800c864 <_svfiprintf_r+0x9c>
 800c8be:	9b03      	ldr	r3, [sp, #12]
 800c8c0:	1d19      	adds	r1, r3, #4
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	9103      	str	r1, [sp, #12]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	bfbb      	ittet	lt
 800c8ca:	425b      	neglt	r3, r3
 800c8cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c8d0:	9307      	strge	r3, [sp, #28]
 800c8d2:	9307      	strlt	r3, [sp, #28]
 800c8d4:	bfb8      	it	lt
 800c8d6:	9204      	strlt	r2, [sp, #16]
 800c8d8:	7823      	ldrb	r3, [r4, #0]
 800c8da:	2b2e      	cmp	r3, #46	; 0x2e
 800c8dc:	d10c      	bne.n	800c8f8 <_svfiprintf_r+0x130>
 800c8de:	7863      	ldrb	r3, [r4, #1]
 800c8e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c8e2:	d134      	bne.n	800c94e <_svfiprintf_r+0x186>
 800c8e4:	9b03      	ldr	r3, [sp, #12]
 800c8e6:	3402      	adds	r4, #2
 800c8e8:	1d1a      	adds	r2, r3, #4
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	9203      	str	r2, [sp, #12]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	bfb8      	it	lt
 800c8f2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8f6:	9305      	str	r3, [sp, #20]
 800c8f8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c9b4 <_svfiprintf_r+0x1ec>
 800c8fc:	2203      	movs	r2, #3
 800c8fe:	4650      	mov	r0, sl
 800c900:	7821      	ldrb	r1, [r4, #0]
 800c902:	f000 fcc1 	bl	800d288 <memchr>
 800c906:	b138      	cbz	r0, 800c918 <_svfiprintf_r+0x150>
 800c908:	2240      	movs	r2, #64	; 0x40
 800c90a:	9b04      	ldr	r3, [sp, #16]
 800c90c:	eba0 000a 	sub.w	r0, r0, sl
 800c910:	4082      	lsls	r2, r0
 800c912:	4313      	orrs	r3, r2
 800c914:	3401      	adds	r4, #1
 800c916:	9304      	str	r3, [sp, #16]
 800c918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c91c:	2206      	movs	r2, #6
 800c91e:	4826      	ldr	r0, [pc, #152]	; (800c9b8 <_svfiprintf_r+0x1f0>)
 800c920:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c924:	f000 fcb0 	bl	800d288 <memchr>
 800c928:	2800      	cmp	r0, #0
 800c92a:	d038      	beq.n	800c99e <_svfiprintf_r+0x1d6>
 800c92c:	4b23      	ldr	r3, [pc, #140]	; (800c9bc <_svfiprintf_r+0x1f4>)
 800c92e:	bb1b      	cbnz	r3, 800c978 <_svfiprintf_r+0x1b0>
 800c930:	9b03      	ldr	r3, [sp, #12]
 800c932:	3307      	adds	r3, #7
 800c934:	f023 0307 	bic.w	r3, r3, #7
 800c938:	3308      	adds	r3, #8
 800c93a:	9303      	str	r3, [sp, #12]
 800c93c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c93e:	4433      	add	r3, r6
 800c940:	9309      	str	r3, [sp, #36]	; 0x24
 800c942:	e768      	b.n	800c816 <_svfiprintf_r+0x4e>
 800c944:	460c      	mov	r4, r1
 800c946:	2001      	movs	r0, #1
 800c948:	fb0c 3202 	mla	r2, ip, r2, r3
 800c94c:	e7a6      	b.n	800c89c <_svfiprintf_r+0xd4>
 800c94e:	2300      	movs	r3, #0
 800c950:	f04f 0c0a 	mov.w	ip, #10
 800c954:	4619      	mov	r1, r3
 800c956:	3401      	adds	r4, #1
 800c958:	9305      	str	r3, [sp, #20]
 800c95a:	4620      	mov	r0, r4
 800c95c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c960:	3a30      	subs	r2, #48	; 0x30
 800c962:	2a09      	cmp	r2, #9
 800c964:	d903      	bls.n	800c96e <_svfiprintf_r+0x1a6>
 800c966:	2b00      	cmp	r3, #0
 800c968:	d0c6      	beq.n	800c8f8 <_svfiprintf_r+0x130>
 800c96a:	9105      	str	r1, [sp, #20]
 800c96c:	e7c4      	b.n	800c8f8 <_svfiprintf_r+0x130>
 800c96e:	4604      	mov	r4, r0
 800c970:	2301      	movs	r3, #1
 800c972:	fb0c 2101 	mla	r1, ip, r1, r2
 800c976:	e7f0      	b.n	800c95a <_svfiprintf_r+0x192>
 800c978:	ab03      	add	r3, sp, #12
 800c97a:	9300      	str	r3, [sp, #0]
 800c97c:	462a      	mov	r2, r5
 800c97e:	4638      	mov	r0, r7
 800c980:	4b0f      	ldr	r3, [pc, #60]	; (800c9c0 <_svfiprintf_r+0x1f8>)
 800c982:	a904      	add	r1, sp, #16
 800c984:	f3af 8000 	nop.w
 800c988:	1c42      	adds	r2, r0, #1
 800c98a:	4606      	mov	r6, r0
 800c98c:	d1d6      	bne.n	800c93c <_svfiprintf_r+0x174>
 800c98e:	89ab      	ldrh	r3, [r5, #12]
 800c990:	065b      	lsls	r3, r3, #25
 800c992:	f53f af2d 	bmi.w	800c7f0 <_svfiprintf_r+0x28>
 800c996:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c998:	b01d      	add	sp, #116	; 0x74
 800c99a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c99e:	ab03      	add	r3, sp, #12
 800c9a0:	9300      	str	r3, [sp, #0]
 800c9a2:	462a      	mov	r2, r5
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	4b06      	ldr	r3, [pc, #24]	; (800c9c0 <_svfiprintf_r+0x1f8>)
 800c9a8:	a904      	add	r1, sp, #16
 800c9aa:	f000 f9bf 	bl	800cd2c <_printf_i>
 800c9ae:	e7eb      	b.n	800c988 <_svfiprintf_r+0x1c0>
 800c9b0:	0800dcca 	.word	0x0800dcca
 800c9b4:	0800dcd0 	.word	0x0800dcd0
 800c9b8:	0800dcd4 	.word	0x0800dcd4
 800c9bc:	00000000 	.word	0x00000000
 800c9c0:	0800c715 	.word	0x0800c715

0800c9c4 <__sfputc_r>:
 800c9c4:	6893      	ldr	r3, [r2, #8]
 800c9c6:	b410      	push	{r4}
 800c9c8:	3b01      	subs	r3, #1
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	6093      	str	r3, [r2, #8]
 800c9ce:	da07      	bge.n	800c9e0 <__sfputc_r+0x1c>
 800c9d0:	6994      	ldr	r4, [r2, #24]
 800c9d2:	42a3      	cmp	r3, r4
 800c9d4:	db01      	blt.n	800c9da <__sfputc_r+0x16>
 800c9d6:	290a      	cmp	r1, #10
 800c9d8:	d102      	bne.n	800c9e0 <__sfputc_r+0x1c>
 800c9da:	bc10      	pop	{r4}
 800c9dc:	f7ff bc89 	b.w	800c2f2 <__swbuf_r>
 800c9e0:	6813      	ldr	r3, [r2, #0]
 800c9e2:	1c58      	adds	r0, r3, #1
 800c9e4:	6010      	str	r0, [r2, #0]
 800c9e6:	7019      	strb	r1, [r3, #0]
 800c9e8:	4608      	mov	r0, r1
 800c9ea:	bc10      	pop	{r4}
 800c9ec:	4770      	bx	lr

0800c9ee <__sfputs_r>:
 800c9ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f0:	4606      	mov	r6, r0
 800c9f2:	460f      	mov	r7, r1
 800c9f4:	4614      	mov	r4, r2
 800c9f6:	18d5      	adds	r5, r2, r3
 800c9f8:	42ac      	cmp	r4, r5
 800c9fa:	d101      	bne.n	800ca00 <__sfputs_r+0x12>
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	e007      	b.n	800ca10 <__sfputs_r+0x22>
 800ca00:	463a      	mov	r2, r7
 800ca02:	4630      	mov	r0, r6
 800ca04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca08:	f7ff ffdc 	bl	800c9c4 <__sfputc_r>
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	d1f3      	bne.n	800c9f8 <__sfputs_r+0xa>
 800ca10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca14 <_vfiprintf_r>:
 800ca14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca18:	460d      	mov	r5, r1
 800ca1a:	4614      	mov	r4, r2
 800ca1c:	4698      	mov	r8, r3
 800ca1e:	4606      	mov	r6, r0
 800ca20:	b09d      	sub	sp, #116	; 0x74
 800ca22:	b118      	cbz	r0, 800ca2c <_vfiprintf_r+0x18>
 800ca24:	6a03      	ldr	r3, [r0, #32]
 800ca26:	b90b      	cbnz	r3, 800ca2c <_vfiprintf_r+0x18>
 800ca28:	f7ff fb54 	bl	800c0d4 <__sinit>
 800ca2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca2e:	07d9      	lsls	r1, r3, #31
 800ca30:	d405      	bmi.n	800ca3e <_vfiprintf_r+0x2a>
 800ca32:	89ab      	ldrh	r3, [r5, #12]
 800ca34:	059a      	lsls	r2, r3, #22
 800ca36:	d402      	bmi.n	800ca3e <_vfiprintf_r+0x2a>
 800ca38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca3a:	f7ff fd67 	bl	800c50c <__retarget_lock_acquire_recursive>
 800ca3e:	89ab      	ldrh	r3, [r5, #12]
 800ca40:	071b      	lsls	r3, r3, #28
 800ca42:	d501      	bpl.n	800ca48 <_vfiprintf_r+0x34>
 800ca44:	692b      	ldr	r3, [r5, #16]
 800ca46:	b99b      	cbnz	r3, 800ca70 <_vfiprintf_r+0x5c>
 800ca48:	4629      	mov	r1, r5
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	f7ff fc8e 	bl	800c36c <__swsetup_r>
 800ca50:	b170      	cbz	r0, 800ca70 <_vfiprintf_r+0x5c>
 800ca52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca54:	07dc      	lsls	r4, r3, #31
 800ca56:	d504      	bpl.n	800ca62 <_vfiprintf_r+0x4e>
 800ca58:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5c:	b01d      	add	sp, #116	; 0x74
 800ca5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca62:	89ab      	ldrh	r3, [r5, #12]
 800ca64:	0598      	lsls	r0, r3, #22
 800ca66:	d4f7      	bmi.n	800ca58 <_vfiprintf_r+0x44>
 800ca68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca6a:	f7ff fd50 	bl	800c50e <__retarget_lock_release_recursive>
 800ca6e:	e7f3      	b.n	800ca58 <_vfiprintf_r+0x44>
 800ca70:	2300      	movs	r3, #0
 800ca72:	9309      	str	r3, [sp, #36]	; 0x24
 800ca74:	2320      	movs	r3, #32
 800ca76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca7a:	2330      	movs	r3, #48	; 0x30
 800ca7c:	f04f 0901 	mov.w	r9, #1
 800ca80:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca84:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800cc34 <_vfiprintf_r+0x220>
 800ca88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ca8c:	4623      	mov	r3, r4
 800ca8e:	469a      	mov	sl, r3
 800ca90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca94:	b10a      	cbz	r2, 800ca9a <_vfiprintf_r+0x86>
 800ca96:	2a25      	cmp	r2, #37	; 0x25
 800ca98:	d1f9      	bne.n	800ca8e <_vfiprintf_r+0x7a>
 800ca9a:	ebba 0b04 	subs.w	fp, sl, r4
 800ca9e:	d00b      	beq.n	800cab8 <_vfiprintf_r+0xa4>
 800caa0:	465b      	mov	r3, fp
 800caa2:	4622      	mov	r2, r4
 800caa4:	4629      	mov	r1, r5
 800caa6:	4630      	mov	r0, r6
 800caa8:	f7ff ffa1 	bl	800c9ee <__sfputs_r>
 800caac:	3001      	adds	r0, #1
 800caae:	f000 80a9 	beq.w	800cc04 <_vfiprintf_r+0x1f0>
 800cab2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cab4:	445a      	add	r2, fp
 800cab6:	9209      	str	r2, [sp, #36]	; 0x24
 800cab8:	f89a 3000 	ldrb.w	r3, [sl]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	f000 80a1 	beq.w	800cc04 <_vfiprintf_r+0x1f0>
 800cac2:	2300      	movs	r3, #0
 800cac4:	f04f 32ff 	mov.w	r2, #4294967295
 800cac8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cacc:	f10a 0a01 	add.w	sl, sl, #1
 800cad0:	9304      	str	r3, [sp, #16]
 800cad2:	9307      	str	r3, [sp, #28]
 800cad4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cad8:	931a      	str	r3, [sp, #104]	; 0x68
 800cada:	4654      	mov	r4, sl
 800cadc:	2205      	movs	r2, #5
 800cade:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cae2:	4854      	ldr	r0, [pc, #336]	; (800cc34 <_vfiprintf_r+0x220>)
 800cae4:	f000 fbd0 	bl	800d288 <memchr>
 800cae8:	9a04      	ldr	r2, [sp, #16]
 800caea:	b9d8      	cbnz	r0, 800cb24 <_vfiprintf_r+0x110>
 800caec:	06d1      	lsls	r1, r2, #27
 800caee:	bf44      	itt	mi
 800caf0:	2320      	movmi	r3, #32
 800caf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800caf6:	0713      	lsls	r3, r2, #28
 800caf8:	bf44      	itt	mi
 800cafa:	232b      	movmi	r3, #43	; 0x2b
 800cafc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb00:	f89a 3000 	ldrb.w	r3, [sl]
 800cb04:	2b2a      	cmp	r3, #42	; 0x2a
 800cb06:	d015      	beq.n	800cb34 <_vfiprintf_r+0x120>
 800cb08:	4654      	mov	r4, sl
 800cb0a:	2000      	movs	r0, #0
 800cb0c:	f04f 0c0a 	mov.w	ip, #10
 800cb10:	9a07      	ldr	r2, [sp, #28]
 800cb12:	4621      	mov	r1, r4
 800cb14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb18:	3b30      	subs	r3, #48	; 0x30
 800cb1a:	2b09      	cmp	r3, #9
 800cb1c:	d94d      	bls.n	800cbba <_vfiprintf_r+0x1a6>
 800cb1e:	b1b0      	cbz	r0, 800cb4e <_vfiprintf_r+0x13a>
 800cb20:	9207      	str	r2, [sp, #28]
 800cb22:	e014      	b.n	800cb4e <_vfiprintf_r+0x13a>
 800cb24:	eba0 0308 	sub.w	r3, r0, r8
 800cb28:	fa09 f303 	lsl.w	r3, r9, r3
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	46a2      	mov	sl, r4
 800cb30:	9304      	str	r3, [sp, #16]
 800cb32:	e7d2      	b.n	800cada <_vfiprintf_r+0xc6>
 800cb34:	9b03      	ldr	r3, [sp, #12]
 800cb36:	1d19      	adds	r1, r3, #4
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	9103      	str	r1, [sp, #12]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	bfbb      	ittet	lt
 800cb40:	425b      	neglt	r3, r3
 800cb42:	f042 0202 	orrlt.w	r2, r2, #2
 800cb46:	9307      	strge	r3, [sp, #28]
 800cb48:	9307      	strlt	r3, [sp, #28]
 800cb4a:	bfb8      	it	lt
 800cb4c:	9204      	strlt	r2, [sp, #16]
 800cb4e:	7823      	ldrb	r3, [r4, #0]
 800cb50:	2b2e      	cmp	r3, #46	; 0x2e
 800cb52:	d10c      	bne.n	800cb6e <_vfiprintf_r+0x15a>
 800cb54:	7863      	ldrb	r3, [r4, #1]
 800cb56:	2b2a      	cmp	r3, #42	; 0x2a
 800cb58:	d134      	bne.n	800cbc4 <_vfiprintf_r+0x1b0>
 800cb5a:	9b03      	ldr	r3, [sp, #12]
 800cb5c:	3402      	adds	r4, #2
 800cb5e:	1d1a      	adds	r2, r3, #4
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	9203      	str	r2, [sp, #12]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	bfb8      	it	lt
 800cb68:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb6c:	9305      	str	r3, [sp, #20]
 800cb6e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cc38 <_vfiprintf_r+0x224>
 800cb72:	2203      	movs	r2, #3
 800cb74:	4650      	mov	r0, sl
 800cb76:	7821      	ldrb	r1, [r4, #0]
 800cb78:	f000 fb86 	bl	800d288 <memchr>
 800cb7c:	b138      	cbz	r0, 800cb8e <_vfiprintf_r+0x17a>
 800cb7e:	2240      	movs	r2, #64	; 0x40
 800cb80:	9b04      	ldr	r3, [sp, #16]
 800cb82:	eba0 000a 	sub.w	r0, r0, sl
 800cb86:	4082      	lsls	r2, r0
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	3401      	adds	r4, #1
 800cb8c:	9304      	str	r3, [sp, #16]
 800cb8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb92:	2206      	movs	r2, #6
 800cb94:	4829      	ldr	r0, [pc, #164]	; (800cc3c <_vfiprintf_r+0x228>)
 800cb96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cb9a:	f000 fb75 	bl	800d288 <memchr>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	d03f      	beq.n	800cc22 <_vfiprintf_r+0x20e>
 800cba2:	4b27      	ldr	r3, [pc, #156]	; (800cc40 <_vfiprintf_r+0x22c>)
 800cba4:	bb1b      	cbnz	r3, 800cbee <_vfiprintf_r+0x1da>
 800cba6:	9b03      	ldr	r3, [sp, #12]
 800cba8:	3307      	adds	r3, #7
 800cbaa:	f023 0307 	bic.w	r3, r3, #7
 800cbae:	3308      	adds	r3, #8
 800cbb0:	9303      	str	r3, [sp, #12]
 800cbb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbb4:	443b      	add	r3, r7
 800cbb6:	9309      	str	r3, [sp, #36]	; 0x24
 800cbb8:	e768      	b.n	800ca8c <_vfiprintf_r+0x78>
 800cbba:	460c      	mov	r4, r1
 800cbbc:	2001      	movs	r0, #1
 800cbbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbc2:	e7a6      	b.n	800cb12 <_vfiprintf_r+0xfe>
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	f04f 0c0a 	mov.w	ip, #10
 800cbca:	4619      	mov	r1, r3
 800cbcc:	3401      	adds	r4, #1
 800cbce:	9305      	str	r3, [sp, #20]
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbd6:	3a30      	subs	r2, #48	; 0x30
 800cbd8:	2a09      	cmp	r2, #9
 800cbda:	d903      	bls.n	800cbe4 <_vfiprintf_r+0x1d0>
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d0c6      	beq.n	800cb6e <_vfiprintf_r+0x15a>
 800cbe0:	9105      	str	r1, [sp, #20]
 800cbe2:	e7c4      	b.n	800cb6e <_vfiprintf_r+0x15a>
 800cbe4:	4604      	mov	r4, r0
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbec:	e7f0      	b.n	800cbd0 <_vfiprintf_r+0x1bc>
 800cbee:	ab03      	add	r3, sp, #12
 800cbf0:	9300      	str	r3, [sp, #0]
 800cbf2:	462a      	mov	r2, r5
 800cbf4:	4630      	mov	r0, r6
 800cbf6:	4b13      	ldr	r3, [pc, #76]	; (800cc44 <_vfiprintf_r+0x230>)
 800cbf8:	a904      	add	r1, sp, #16
 800cbfa:	f3af 8000 	nop.w
 800cbfe:	4607      	mov	r7, r0
 800cc00:	1c78      	adds	r0, r7, #1
 800cc02:	d1d6      	bne.n	800cbb2 <_vfiprintf_r+0x19e>
 800cc04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc06:	07d9      	lsls	r1, r3, #31
 800cc08:	d405      	bmi.n	800cc16 <_vfiprintf_r+0x202>
 800cc0a:	89ab      	ldrh	r3, [r5, #12]
 800cc0c:	059a      	lsls	r2, r3, #22
 800cc0e:	d402      	bmi.n	800cc16 <_vfiprintf_r+0x202>
 800cc10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc12:	f7ff fc7c 	bl	800c50e <__retarget_lock_release_recursive>
 800cc16:	89ab      	ldrh	r3, [r5, #12]
 800cc18:	065b      	lsls	r3, r3, #25
 800cc1a:	f53f af1d 	bmi.w	800ca58 <_vfiprintf_r+0x44>
 800cc1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc20:	e71c      	b.n	800ca5c <_vfiprintf_r+0x48>
 800cc22:	ab03      	add	r3, sp, #12
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	462a      	mov	r2, r5
 800cc28:	4630      	mov	r0, r6
 800cc2a:	4b06      	ldr	r3, [pc, #24]	; (800cc44 <_vfiprintf_r+0x230>)
 800cc2c:	a904      	add	r1, sp, #16
 800cc2e:	f000 f87d 	bl	800cd2c <_printf_i>
 800cc32:	e7e4      	b.n	800cbfe <_vfiprintf_r+0x1ea>
 800cc34:	0800dcca 	.word	0x0800dcca
 800cc38:	0800dcd0 	.word	0x0800dcd0
 800cc3c:	0800dcd4 	.word	0x0800dcd4
 800cc40:	00000000 	.word	0x00000000
 800cc44:	0800c9ef 	.word	0x0800c9ef

0800cc48 <_printf_common>:
 800cc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc4c:	4616      	mov	r6, r2
 800cc4e:	4699      	mov	r9, r3
 800cc50:	688a      	ldr	r2, [r1, #8]
 800cc52:	690b      	ldr	r3, [r1, #16]
 800cc54:	4607      	mov	r7, r0
 800cc56:	4293      	cmp	r3, r2
 800cc58:	bfb8      	it	lt
 800cc5a:	4613      	movlt	r3, r2
 800cc5c:	6033      	str	r3, [r6, #0]
 800cc5e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc62:	460c      	mov	r4, r1
 800cc64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cc68:	b10a      	cbz	r2, 800cc6e <_printf_common+0x26>
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	6033      	str	r3, [r6, #0]
 800cc6e:	6823      	ldr	r3, [r4, #0]
 800cc70:	0699      	lsls	r1, r3, #26
 800cc72:	bf42      	ittt	mi
 800cc74:	6833      	ldrmi	r3, [r6, #0]
 800cc76:	3302      	addmi	r3, #2
 800cc78:	6033      	strmi	r3, [r6, #0]
 800cc7a:	6825      	ldr	r5, [r4, #0]
 800cc7c:	f015 0506 	ands.w	r5, r5, #6
 800cc80:	d106      	bne.n	800cc90 <_printf_common+0x48>
 800cc82:	f104 0a19 	add.w	sl, r4, #25
 800cc86:	68e3      	ldr	r3, [r4, #12]
 800cc88:	6832      	ldr	r2, [r6, #0]
 800cc8a:	1a9b      	subs	r3, r3, r2
 800cc8c:	42ab      	cmp	r3, r5
 800cc8e:	dc2b      	bgt.n	800cce8 <_printf_common+0xa0>
 800cc90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc94:	1e13      	subs	r3, r2, #0
 800cc96:	6822      	ldr	r2, [r4, #0]
 800cc98:	bf18      	it	ne
 800cc9a:	2301      	movne	r3, #1
 800cc9c:	0692      	lsls	r2, r2, #26
 800cc9e:	d430      	bmi.n	800cd02 <_printf_common+0xba>
 800cca0:	4649      	mov	r1, r9
 800cca2:	4638      	mov	r0, r7
 800cca4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cca8:	47c0      	blx	r8
 800ccaa:	3001      	adds	r0, #1
 800ccac:	d023      	beq.n	800ccf6 <_printf_common+0xae>
 800ccae:	6823      	ldr	r3, [r4, #0]
 800ccb0:	6922      	ldr	r2, [r4, #16]
 800ccb2:	f003 0306 	and.w	r3, r3, #6
 800ccb6:	2b04      	cmp	r3, #4
 800ccb8:	bf14      	ite	ne
 800ccba:	2500      	movne	r5, #0
 800ccbc:	6833      	ldreq	r3, [r6, #0]
 800ccbe:	f04f 0600 	mov.w	r6, #0
 800ccc2:	bf08      	it	eq
 800ccc4:	68e5      	ldreq	r5, [r4, #12]
 800ccc6:	f104 041a 	add.w	r4, r4, #26
 800ccca:	bf08      	it	eq
 800cccc:	1aed      	subeq	r5, r5, r3
 800ccce:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ccd2:	bf08      	it	eq
 800ccd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	bfc4      	itt	gt
 800ccdc:	1a9b      	subgt	r3, r3, r2
 800ccde:	18ed      	addgt	r5, r5, r3
 800cce0:	42b5      	cmp	r5, r6
 800cce2:	d11a      	bne.n	800cd1a <_printf_common+0xd2>
 800cce4:	2000      	movs	r0, #0
 800cce6:	e008      	b.n	800ccfa <_printf_common+0xb2>
 800cce8:	2301      	movs	r3, #1
 800ccea:	4652      	mov	r2, sl
 800ccec:	4649      	mov	r1, r9
 800ccee:	4638      	mov	r0, r7
 800ccf0:	47c0      	blx	r8
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	d103      	bne.n	800ccfe <_printf_common+0xb6>
 800ccf6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccfe:	3501      	adds	r5, #1
 800cd00:	e7c1      	b.n	800cc86 <_printf_common+0x3e>
 800cd02:	2030      	movs	r0, #48	; 0x30
 800cd04:	18e1      	adds	r1, r4, r3
 800cd06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cd10:	4422      	add	r2, r4
 800cd12:	3302      	adds	r3, #2
 800cd14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cd18:	e7c2      	b.n	800cca0 <_printf_common+0x58>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	4622      	mov	r2, r4
 800cd1e:	4649      	mov	r1, r9
 800cd20:	4638      	mov	r0, r7
 800cd22:	47c0      	blx	r8
 800cd24:	3001      	adds	r0, #1
 800cd26:	d0e6      	beq.n	800ccf6 <_printf_common+0xae>
 800cd28:	3601      	adds	r6, #1
 800cd2a:	e7d9      	b.n	800cce0 <_printf_common+0x98>

0800cd2c <_printf_i>:
 800cd2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd30:	7e0f      	ldrb	r7, [r1, #24]
 800cd32:	4691      	mov	r9, r2
 800cd34:	2f78      	cmp	r7, #120	; 0x78
 800cd36:	4680      	mov	r8, r0
 800cd38:	460c      	mov	r4, r1
 800cd3a:	469a      	mov	sl, r3
 800cd3c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cd3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cd42:	d807      	bhi.n	800cd54 <_printf_i+0x28>
 800cd44:	2f62      	cmp	r7, #98	; 0x62
 800cd46:	d80a      	bhi.n	800cd5e <_printf_i+0x32>
 800cd48:	2f00      	cmp	r7, #0
 800cd4a:	f000 80d5 	beq.w	800cef8 <_printf_i+0x1cc>
 800cd4e:	2f58      	cmp	r7, #88	; 0x58
 800cd50:	f000 80c1 	beq.w	800ced6 <_printf_i+0x1aa>
 800cd54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cd5c:	e03a      	b.n	800cdd4 <_printf_i+0xa8>
 800cd5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cd62:	2b15      	cmp	r3, #21
 800cd64:	d8f6      	bhi.n	800cd54 <_printf_i+0x28>
 800cd66:	a101      	add	r1, pc, #4	; (adr r1, 800cd6c <_printf_i+0x40>)
 800cd68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cd6c:	0800cdc5 	.word	0x0800cdc5
 800cd70:	0800cdd9 	.word	0x0800cdd9
 800cd74:	0800cd55 	.word	0x0800cd55
 800cd78:	0800cd55 	.word	0x0800cd55
 800cd7c:	0800cd55 	.word	0x0800cd55
 800cd80:	0800cd55 	.word	0x0800cd55
 800cd84:	0800cdd9 	.word	0x0800cdd9
 800cd88:	0800cd55 	.word	0x0800cd55
 800cd8c:	0800cd55 	.word	0x0800cd55
 800cd90:	0800cd55 	.word	0x0800cd55
 800cd94:	0800cd55 	.word	0x0800cd55
 800cd98:	0800cedf 	.word	0x0800cedf
 800cd9c:	0800ce05 	.word	0x0800ce05
 800cda0:	0800ce99 	.word	0x0800ce99
 800cda4:	0800cd55 	.word	0x0800cd55
 800cda8:	0800cd55 	.word	0x0800cd55
 800cdac:	0800cf01 	.word	0x0800cf01
 800cdb0:	0800cd55 	.word	0x0800cd55
 800cdb4:	0800ce05 	.word	0x0800ce05
 800cdb8:	0800cd55 	.word	0x0800cd55
 800cdbc:	0800cd55 	.word	0x0800cd55
 800cdc0:	0800cea1 	.word	0x0800cea1
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	1d1a      	adds	r2, r3, #4
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	602a      	str	r2, [r5, #0]
 800cdcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cdd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	e0a0      	b.n	800cf1a <_printf_i+0x1ee>
 800cdd8:	6820      	ldr	r0, [r4, #0]
 800cdda:	682b      	ldr	r3, [r5, #0]
 800cddc:	0607      	lsls	r7, r0, #24
 800cdde:	f103 0104 	add.w	r1, r3, #4
 800cde2:	6029      	str	r1, [r5, #0]
 800cde4:	d501      	bpl.n	800cdea <_printf_i+0xbe>
 800cde6:	681e      	ldr	r6, [r3, #0]
 800cde8:	e003      	b.n	800cdf2 <_printf_i+0xc6>
 800cdea:	0646      	lsls	r6, r0, #25
 800cdec:	d5fb      	bpl.n	800cde6 <_printf_i+0xba>
 800cdee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cdf2:	2e00      	cmp	r6, #0
 800cdf4:	da03      	bge.n	800cdfe <_printf_i+0xd2>
 800cdf6:	232d      	movs	r3, #45	; 0x2d
 800cdf8:	4276      	negs	r6, r6
 800cdfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdfe:	230a      	movs	r3, #10
 800ce00:	4859      	ldr	r0, [pc, #356]	; (800cf68 <_printf_i+0x23c>)
 800ce02:	e012      	b.n	800ce2a <_printf_i+0xfe>
 800ce04:	682b      	ldr	r3, [r5, #0]
 800ce06:	6820      	ldr	r0, [r4, #0]
 800ce08:	1d19      	adds	r1, r3, #4
 800ce0a:	6029      	str	r1, [r5, #0]
 800ce0c:	0605      	lsls	r5, r0, #24
 800ce0e:	d501      	bpl.n	800ce14 <_printf_i+0xe8>
 800ce10:	681e      	ldr	r6, [r3, #0]
 800ce12:	e002      	b.n	800ce1a <_printf_i+0xee>
 800ce14:	0641      	lsls	r1, r0, #25
 800ce16:	d5fb      	bpl.n	800ce10 <_printf_i+0xe4>
 800ce18:	881e      	ldrh	r6, [r3, #0]
 800ce1a:	2f6f      	cmp	r7, #111	; 0x6f
 800ce1c:	bf0c      	ite	eq
 800ce1e:	2308      	moveq	r3, #8
 800ce20:	230a      	movne	r3, #10
 800ce22:	4851      	ldr	r0, [pc, #324]	; (800cf68 <_printf_i+0x23c>)
 800ce24:	2100      	movs	r1, #0
 800ce26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ce2a:	6865      	ldr	r5, [r4, #4]
 800ce2c:	2d00      	cmp	r5, #0
 800ce2e:	bfa8      	it	ge
 800ce30:	6821      	ldrge	r1, [r4, #0]
 800ce32:	60a5      	str	r5, [r4, #8]
 800ce34:	bfa4      	itt	ge
 800ce36:	f021 0104 	bicge.w	r1, r1, #4
 800ce3a:	6021      	strge	r1, [r4, #0]
 800ce3c:	b90e      	cbnz	r6, 800ce42 <_printf_i+0x116>
 800ce3e:	2d00      	cmp	r5, #0
 800ce40:	d04b      	beq.n	800ceda <_printf_i+0x1ae>
 800ce42:	4615      	mov	r5, r2
 800ce44:	fbb6 f1f3 	udiv	r1, r6, r3
 800ce48:	fb03 6711 	mls	r7, r3, r1, r6
 800ce4c:	5dc7      	ldrb	r7, [r0, r7]
 800ce4e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ce52:	4637      	mov	r7, r6
 800ce54:	42bb      	cmp	r3, r7
 800ce56:	460e      	mov	r6, r1
 800ce58:	d9f4      	bls.n	800ce44 <_printf_i+0x118>
 800ce5a:	2b08      	cmp	r3, #8
 800ce5c:	d10b      	bne.n	800ce76 <_printf_i+0x14a>
 800ce5e:	6823      	ldr	r3, [r4, #0]
 800ce60:	07de      	lsls	r6, r3, #31
 800ce62:	d508      	bpl.n	800ce76 <_printf_i+0x14a>
 800ce64:	6923      	ldr	r3, [r4, #16]
 800ce66:	6861      	ldr	r1, [r4, #4]
 800ce68:	4299      	cmp	r1, r3
 800ce6a:	bfde      	ittt	le
 800ce6c:	2330      	movle	r3, #48	; 0x30
 800ce6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ce72:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce76:	1b52      	subs	r2, r2, r5
 800ce78:	6122      	str	r2, [r4, #16]
 800ce7a:	464b      	mov	r3, r9
 800ce7c:	4621      	mov	r1, r4
 800ce7e:	4640      	mov	r0, r8
 800ce80:	f8cd a000 	str.w	sl, [sp]
 800ce84:	aa03      	add	r2, sp, #12
 800ce86:	f7ff fedf 	bl	800cc48 <_printf_common>
 800ce8a:	3001      	adds	r0, #1
 800ce8c:	d14a      	bne.n	800cf24 <_printf_i+0x1f8>
 800ce8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce92:	b004      	add	sp, #16
 800ce94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	f043 0320 	orr.w	r3, r3, #32
 800ce9e:	6023      	str	r3, [r4, #0]
 800cea0:	2778      	movs	r7, #120	; 0x78
 800cea2:	4832      	ldr	r0, [pc, #200]	; (800cf6c <_printf_i+0x240>)
 800cea4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cea8:	6823      	ldr	r3, [r4, #0]
 800ceaa:	6829      	ldr	r1, [r5, #0]
 800ceac:	061f      	lsls	r7, r3, #24
 800ceae:	f851 6b04 	ldr.w	r6, [r1], #4
 800ceb2:	d402      	bmi.n	800ceba <_printf_i+0x18e>
 800ceb4:	065f      	lsls	r7, r3, #25
 800ceb6:	bf48      	it	mi
 800ceb8:	b2b6      	uxthmi	r6, r6
 800ceba:	07df      	lsls	r7, r3, #31
 800cebc:	bf48      	it	mi
 800cebe:	f043 0320 	orrmi.w	r3, r3, #32
 800cec2:	6029      	str	r1, [r5, #0]
 800cec4:	bf48      	it	mi
 800cec6:	6023      	strmi	r3, [r4, #0]
 800cec8:	b91e      	cbnz	r6, 800ced2 <_printf_i+0x1a6>
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	f023 0320 	bic.w	r3, r3, #32
 800ced0:	6023      	str	r3, [r4, #0]
 800ced2:	2310      	movs	r3, #16
 800ced4:	e7a6      	b.n	800ce24 <_printf_i+0xf8>
 800ced6:	4824      	ldr	r0, [pc, #144]	; (800cf68 <_printf_i+0x23c>)
 800ced8:	e7e4      	b.n	800cea4 <_printf_i+0x178>
 800ceda:	4615      	mov	r5, r2
 800cedc:	e7bd      	b.n	800ce5a <_printf_i+0x12e>
 800cede:	682b      	ldr	r3, [r5, #0]
 800cee0:	6826      	ldr	r6, [r4, #0]
 800cee2:	1d18      	adds	r0, r3, #4
 800cee4:	6961      	ldr	r1, [r4, #20]
 800cee6:	6028      	str	r0, [r5, #0]
 800cee8:	0635      	lsls	r5, r6, #24
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	d501      	bpl.n	800cef2 <_printf_i+0x1c6>
 800ceee:	6019      	str	r1, [r3, #0]
 800cef0:	e002      	b.n	800cef8 <_printf_i+0x1cc>
 800cef2:	0670      	lsls	r0, r6, #25
 800cef4:	d5fb      	bpl.n	800ceee <_printf_i+0x1c2>
 800cef6:	8019      	strh	r1, [r3, #0]
 800cef8:	2300      	movs	r3, #0
 800cefa:	4615      	mov	r5, r2
 800cefc:	6123      	str	r3, [r4, #16]
 800cefe:	e7bc      	b.n	800ce7a <_printf_i+0x14e>
 800cf00:	682b      	ldr	r3, [r5, #0]
 800cf02:	2100      	movs	r1, #0
 800cf04:	1d1a      	adds	r2, r3, #4
 800cf06:	602a      	str	r2, [r5, #0]
 800cf08:	681d      	ldr	r5, [r3, #0]
 800cf0a:	6862      	ldr	r2, [r4, #4]
 800cf0c:	4628      	mov	r0, r5
 800cf0e:	f000 f9bb 	bl	800d288 <memchr>
 800cf12:	b108      	cbz	r0, 800cf18 <_printf_i+0x1ec>
 800cf14:	1b40      	subs	r0, r0, r5
 800cf16:	6060      	str	r0, [r4, #4]
 800cf18:	6863      	ldr	r3, [r4, #4]
 800cf1a:	6123      	str	r3, [r4, #16]
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf22:	e7aa      	b.n	800ce7a <_printf_i+0x14e>
 800cf24:	462a      	mov	r2, r5
 800cf26:	4649      	mov	r1, r9
 800cf28:	4640      	mov	r0, r8
 800cf2a:	6923      	ldr	r3, [r4, #16]
 800cf2c:	47d0      	blx	sl
 800cf2e:	3001      	adds	r0, #1
 800cf30:	d0ad      	beq.n	800ce8e <_printf_i+0x162>
 800cf32:	6823      	ldr	r3, [r4, #0]
 800cf34:	079b      	lsls	r3, r3, #30
 800cf36:	d413      	bmi.n	800cf60 <_printf_i+0x234>
 800cf38:	68e0      	ldr	r0, [r4, #12]
 800cf3a:	9b03      	ldr	r3, [sp, #12]
 800cf3c:	4298      	cmp	r0, r3
 800cf3e:	bfb8      	it	lt
 800cf40:	4618      	movlt	r0, r3
 800cf42:	e7a6      	b.n	800ce92 <_printf_i+0x166>
 800cf44:	2301      	movs	r3, #1
 800cf46:	4632      	mov	r2, r6
 800cf48:	4649      	mov	r1, r9
 800cf4a:	4640      	mov	r0, r8
 800cf4c:	47d0      	blx	sl
 800cf4e:	3001      	adds	r0, #1
 800cf50:	d09d      	beq.n	800ce8e <_printf_i+0x162>
 800cf52:	3501      	adds	r5, #1
 800cf54:	68e3      	ldr	r3, [r4, #12]
 800cf56:	9903      	ldr	r1, [sp, #12]
 800cf58:	1a5b      	subs	r3, r3, r1
 800cf5a:	42ab      	cmp	r3, r5
 800cf5c:	dcf2      	bgt.n	800cf44 <_printf_i+0x218>
 800cf5e:	e7eb      	b.n	800cf38 <_printf_i+0x20c>
 800cf60:	2500      	movs	r5, #0
 800cf62:	f104 0619 	add.w	r6, r4, #25
 800cf66:	e7f5      	b.n	800cf54 <_printf_i+0x228>
 800cf68:	0800dcdb 	.word	0x0800dcdb
 800cf6c:	0800dcec 	.word	0x0800dcec

0800cf70 <__sflush_r>:
 800cf70:	898a      	ldrh	r2, [r1, #12]
 800cf72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf74:	4605      	mov	r5, r0
 800cf76:	0710      	lsls	r0, r2, #28
 800cf78:	460c      	mov	r4, r1
 800cf7a:	d457      	bmi.n	800d02c <__sflush_r+0xbc>
 800cf7c:	684b      	ldr	r3, [r1, #4]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	dc04      	bgt.n	800cf8c <__sflush_r+0x1c>
 800cf82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	dc01      	bgt.n	800cf8c <__sflush_r+0x1c>
 800cf88:	2000      	movs	r0, #0
 800cf8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cf8e:	2e00      	cmp	r6, #0
 800cf90:	d0fa      	beq.n	800cf88 <__sflush_r+0x18>
 800cf92:	2300      	movs	r3, #0
 800cf94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cf98:	682f      	ldr	r7, [r5, #0]
 800cf9a:	6a21      	ldr	r1, [r4, #32]
 800cf9c:	602b      	str	r3, [r5, #0]
 800cf9e:	d032      	beq.n	800d006 <__sflush_r+0x96>
 800cfa0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	075a      	lsls	r2, r3, #29
 800cfa6:	d505      	bpl.n	800cfb4 <__sflush_r+0x44>
 800cfa8:	6863      	ldr	r3, [r4, #4]
 800cfaa:	1ac0      	subs	r0, r0, r3
 800cfac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cfae:	b10b      	cbz	r3, 800cfb4 <__sflush_r+0x44>
 800cfb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cfb2:	1ac0      	subs	r0, r0, r3
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cfba:	4628      	mov	r0, r5
 800cfbc:	6a21      	ldr	r1, [r4, #32]
 800cfbe:	47b0      	blx	r6
 800cfc0:	1c43      	adds	r3, r0, #1
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	d106      	bne.n	800cfd4 <__sflush_r+0x64>
 800cfc6:	6829      	ldr	r1, [r5, #0]
 800cfc8:	291d      	cmp	r1, #29
 800cfca:	d82b      	bhi.n	800d024 <__sflush_r+0xb4>
 800cfcc:	4a28      	ldr	r2, [pc, #160]	; (800d070 <__sflush_r+0x100>)
 800cfce:	410a      	asrs	r2, r1
 800cfd0:	07d6      	lsls	r6, r2, #31
 800cfd2:	d427      	bmi.n	800d024 <__sflush_r+0xb4>
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	6062      	str	r2, [r4, #4]
 800cfd8:	6922      	ldr	r2, [r4, #16]
 800cfda:	04d9      	lsls	r1, r3, #19
 800cfdc:	6022      	str	r2, [r4, #0]
 800cfde:	d504      	bpl.n	800cfea <__sflush_r+0x7a>
 800cfe0:	1c42      	adds	r2, r0, #1
 800cfe2:	d101      	bne.n	800cfe8 <__sflush_r+0x78>
 800cfe4:	682b      	ldr	r3, [r5, #0]
 800cfe6:	b903      	cbnz	r3, 800cfea <__sflush_r+0x7a>
 800cfe8:	6560      	str	r0, [r4, #84]	; 0x54
 800cfea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfec:	602f      	str	r7, [r5, #0]
 800cfee:	2900      	cmp	r1, #0
 800cff0:	d0ca      	beq.n	800cf88 <__sflush_r+0x18>
 800cff2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cff6:	4299      	cmp	r1, r3
 800cff8:	d002      	beq.n	800d000 <__sflush_r+0x90>
 800cffa:	4628      	mov	r0, r5
 800cffc:	f7ff fa96 	bl	800c52c <_free_r>
 800d000:	2000      	movs	r0, #0
 800d002:	6360      	str	r0, [r4, #52]	; 0x34
 800d004:	e7c1      	b.n	800cf8a <__sflush_r+0x1a>
 800d006:	2301      	movs	r3, #1
 800d008:	4628      	mov	r0, r5
 800d00a:	47b0      	blx	r6
 800d00c:	1c41      	adds	r1, r0, #1
 800d00e:	d1c8      	bne.n	800cfa2 <__sflush_r+0x32>
 800d010:	682b      	ldr	r3, [r5, #0]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d0c5      	beq.n	800cfa2 <__sflush_r+0x32>
 800d016:	2b1d      	cmp	r3, #29
 800d018:	d001      	beq.n	800d01e <__sflush_r+0xae>
 800d01a:	2b16      	cmp	r3, #22
 800d01c:	d101      	bne.n	800d022 <__sflush_r+0xb2>
 800d01e:	602f      	str	r7, [r5, #0]
 800d020:	e7b2      	b.n	800cf88 <__sflush_r+0x18>
 800d022:	89a3      	ldrh	r3, [r4, #12]
 800d024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d028:	81a3      	strh	r3, [r4, #12]
 800d02a:	e7ae      	b.n	800cf8a <__sflush_r+0x1a>
 800d02c:	690f      	ldr	r7, [r1, #16]
 800d02e:	2f00      	cmp	r7, #0
 800d030:	d0aa      	beq.n	800cf88 <__sflush_r+0x18>
 800d032:	0793      	lsls	r3, r2, #30
 800d034:	bf18      	it	ne
 800d036:	2300      	movne	r3, #0
 800d038:	680e      	ldr	r6, [r1, #0]
 800d03a:	bf08      	it	eq
 800d03c:	694b      	ldreq	r3, [r1, #20]
 800d03e:	1bf6      	subs	r6, r6, r7
 800d040:	600f      	str	r7, [r1, #0]
 800d042:	608b      	str	r3, [r1, #8]
 800d044:	2e00      	cmp	r6, #0
 800d046:	dd9f      	ble.n	800cf88 <__sflush_r+0x18>
 800d048:	4633      	mov	r3, r6
 800d04a:	463a      	mov	r2, r7
 800d04c:	4628      	mov	r0, r5
 800d04e:	6a21      	ldr	r1, [r4, #32]
 800d050:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800d054:	47e0      	blx	ip
 800d056:	2800      	cmp	r0, #0
 800d058:	dc06      	bgt.n	800d068 <__sflush_r+0xf8>
 800d05a:	89a3      	ldrh	r3, [r4, #12]
 800d05c:	f04f 30ff 	mov.w	r0, #4294967295
 800d060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d064:	81a3      	strh	r3, [r4, #12]
 800d066:	e790      	b.n	800cf8a <__sflush_r+0x1a>
 800d068:	4407      	add	r7, r0
 800d06a:	1a36      	subs	r6, r6, r0
 800d06c:	e7ea      	b.n	800d044 <__sflush_r+0xd4>
 800d06e:	bf00      	nop
 800d070:	dfbffffe 	.word	0xdfbffffe

0800d074 <_fflush_r>:
 800d074:	b538      	push	{r3, r4, r5, lr}
 800d076:	690b      	ldr	r3, [r1, #16]
 800d078:	4605      	mov	r5, r0
 800d07a:	460c      	mov	r4, r1
 800d07c:	b913      	cbnz	r3, 800d084 <_fflush_r+0x10>
 800d07e:	2500      	movs	r5, #0
 800d080:	4628      	mov	r0, r5
 800d082:	bd38      	pop	{r3, r4, r5, pc}
 800d084:	b118      	cbz	r0, 800d08e <_fflush_r+0x1a>
 800d086:	6a03      	ldr	r3, [r0, #32]
 800d088:	b90b      	cbnz	r3, 800d08e <_fflush_r+0x1a>
 800d08a:	f7ff f823 	bl	800c0d4 <__sinit>
 800d08e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d0f3      	beq.n	800d07e <_fflush_r+0xa>
 800d096:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d098:	07d0      	lsls	r0, r2, #31
 800d09a:	d404      	bmi.n	800d0a6 <_fflush_r+0x32>
 800d09c:	0599      	lsls	r1, r3, #22
 800d09e:	d402      	bmi.n	800d0a6 <_fflush_r+0x32>
 800d0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0a2:	f7ff fa33 	bl	800c50c <__retarget_lock_acquire_recursive>
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	4621      	mov	r1, r4
 800d0aa:	f7ff ff61 	bl	800cf70 <__sflush_r>
 800d0ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0b0:	4605      	mov	r5, r0
 800d0b2:	07da      	lsls	r2, r3, #31
 800d0b4:	d4e4      	bmi.n	800d080 <_fflush_r+0xc>
 800d0b6:	89a3      	ldrh	r3, [r4, #12]
 800d0b8:	059b      	lsls	r3, r3, #22
 800d0ba:	d4e1      	bmi.n	800d080 <_fflush_r+0xc>
 800d0bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0be:	f7ff fa26 	bl	800c50e <__retarget_lock_release_recursive>
 800d0c2:	e7dd      	b.n	800d080 <_fflush_r+0xc>

0800d0c4 <__swhatbuf_r>:
 800d0c4:	b570      	push	{r4, r5, r6, lr}
 800d0c6:	460c      	mov	r4, r1
 800d0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0cc:	4615      	mov	r5, r2
 800d0ce:	2900      	cmp	r1, #0
 800d0d0:	461e      	mov	r6, r3
 800d0d2:	b096      	sub	sp, #88	; 0x58
 800d0d4:	da0c      	bge.n	800d0f0 <__swhatbuf_r+0x2c>
 800d0d6:	89a3      	ldrh	r3, [r4, #12]
 800d0d8:	2100      	movs	r1, #0
 800d0da:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d0de:	bf0c      	ite	eq
 800d0e0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d0e4:	2340      	movne	r3, #64	; 0x40
 800d0e6:	2000      	movs	r0, #0
 800d0e8:	6031      	str	r1, [r6, #0]
 800d0ea:	602b      	str	r3, [r5, #0]
 800d0ec:	b016      	add	sp, #88	; 0x58
 800d0ee:	bd70      	pop	{r4, r5, r6, pc}
 800d0f0:	466a      	mov	r2, sp
 800d0f2:	f000 f897 	bl	800d224 <_fstat_r>
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	dbed      	blt.n	800d0d6 <__swhatbuf_r+0x12>
 800d0fa:	9901      	ldr	r1, [sp, #4]
 800d0fc:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d100:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d104:	4259      	negs	r1, r3
 800d106:	4159      	adcs	r1, r3
 800d108:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d10c:	e7eb      	b.n	800d0e6 <__swhatbuf_r+0x22>

0800d10e <__smakebuf_r>:
 800d10e:	898b      	ldrh	r3, [r1, #12]
 800d110:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d112:	079d      	lsls	r5, r3, #30
 800d114:	4606      	mov	r6, r0
 800d116:	460c      	mov	r4, r1
 800d118:	d507      	bpl.n	800d12a <__smakebuf_r+0x1c>
 800d11a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d11e:	6023      	str	r3, [r4, #0]
 800d120:	6123      	str	r3, [r4, #16]
 800d122:	2301      	movs	r3, #1
 800d124:	6163      	str	r3, [r4, #20]
 800d126:	b002      	add	sp, #8
 800d128:	bd70      	pop	{r4, r5, r6, pc}
 800d12a:	466a      	mov	r2, sp
 800d12c:	ab01      	add	r3, sp, #4
 800d12e:	f7ff ffc9 	bl	800d0c4 <__swhatbuf_r>
 800d132:	9900      	ldr	r1, [sp, #0]
 800d134:	4605      	mov	r5, r0
 800d136:	4630      	mov	r0, r6
 800d138:	f7ff fa60 	bl	800c5fc <_malloc_r>
 800d13c:	b948      	cbnz	r0, 800d152 <__smakebuf_r+0x44>
 800d13e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d142:	059a      	lsls	r2, r3, #22
 800d144:	d4ef      	bmi.n	800d126 <__smakebuf_r+0x18>
 800d146:	f023 0303 	bic.w	r3, r3, #3
 800d14a:	f043 0302 	orr.w	r3, r3, #2
 800d14e:	81a3      	strh	r3, [r4, #12]
 800d150:	e7e3      	b.n	800d11a <__smakebuf_r+0xc>
 800d152:	89a3      	ldrh	r3, [r4, #12]
 800d154:	6020      	str	r0, [r4, #0]
 800d156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d15a:	81a3      	strh	r3, [r4, #12]
 800d15c:	9b00      	ldr	r3, [sp, #0]
 800d15e:	6120      	str	r0, [r4, #16]
 800d160:	6163      	str	r3, [r4, #20]
 800d162:	9b01      	ldr	r3, [sp, #4]
 800d164:	b15b      	cbz	r3, 800d17e <__smakebuf_r+0x70>
 800d166:	4630      	mov	r0, r6
 800d168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d16c:	f000 f86c 	bl	800d248 <_isatty_r>
 800d170:	b128      	cbz	r0, 800d17e <__smakebuf_r+0x70>
 800d172:	89a3      	ldrh	r3, [r4, #12]
 800d174:	f023 0303 	bic.w	r3, r3, #3
 800d178:	f043 0301 	orr.w	r3, r3, #1
 800d17c:	81a3      	strh	r3, [r4, #12]
 800d17e:	89a3      	ldrh	r3, [r4, #12]
 800d180:	431d      	orrs	r5, r3
 800d182:	81a5      	strh	r5, [r4, #12]
 800d184:	e7cf      	b.n	800d126 <__smakebuf_r+0x18>

0800d186 <_putc_r>:
 800d186:	b570      	push	{r4, r5, r6, lr}
 800d188:	460d      	mov	r5, r1
 800d18a:	4614      	mov	r4, r2
 800d18c:	4606      	mov	r6, r0
 800d18e:	b118      	cbz	r0, 800d198 <_putc_r+0x12>
 800d190:	6a03      	ldr	r3, [r0, #32]
 800d192:	b90b      	cbnz	r3, 800d198 <_putc_r+0x12>
 800d194:	f7fe ff9e 	bl	800c0d4 <__sinit>
 800d198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d19a:	07d8      	lsls	r0, r3, #31
 800d19c:	d405      	bmi.n	800d1aa <_putc_r+0x24>
 800d19e:	89a3      	ldrh	r3, [r4, #12]
 800d1a0:	0599      	lsls	r1, r3, #22
 800d1a2:	d402      	bmi.n	800d1aa <_putc_r+0x24>
 800d1a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1a6:	f7ff f9b1 	bl	800c50c <__retarget_lock_acquire_recursive>
 800d1aa:	68a3      	ldr	r3, [r4, #8]
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	60a3      	str	r3, [r4, #8]
 800d1b2:	da05      	bge.n	800d1c0 <_putc_r+0x3a>
 800d1b4:	69a2      	ldr	r2, [r4, #24]
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	db12      	blt.n	800d1e0 <_putc_r+0x5a>
 800d1ba:	b2eb      	uxtb	r3, r5
 800d1bc:	2b0a      	cmp	r3, #10
 800d1be:	d00f      	beq.n	800d1e0 <_putc_r+0x5a>
 800d1c0:	6823      	ldr	r3, [r4, #0]
 800d1c2:	1c5a      	adds	r2, r3, #1
 800d1c4:	6022      	str	r2, [r4, #0]
 800d1c6:	701d      	strb	r5, [r3, #0]
 800d1c8:	b2ed      	uxtb	r5, r5
 800d1ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1cc:	07da      	lsls	r2, r3, #31
 800d1ce:	d405      	bmi.n	800d1dc <_putc_r+0x56>
 800d1d0:	89a3      	ldrh	r3, [r4, #12]
 800d1d2:	059b      	lsls	r3, r3, #22
 800d1d4:	d402      	bmi.n	800d1dc <_putc_r+0x56>
 800d1d6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1d8:	f7ff f999 	bl	800c50e <__retarget_lock_release_recursive>
 800d1dc:	4628      	mov	r0, r5
 800d1de:	bd70      	pop	{r4, r5, r6, pc}
 800d1e0:	4629      	mov	r1, r5
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	4630      	mov	r0, r6
 800d1e6:	f7ff f884 	bl	800c2f2 <__swbuf_r>
 800d1ea:	4605      	mov	r5, r0
 800d1ec:	e7ed      	b.n	800d1ca <_putc_r+0x44>

0800d1ee <memmove>:
 800d1ee:	4288      	cmp	r0, r1
 800d1f0:	b510      	push	{r4, lr}
 800d1f2:	eb01 0402 	add.w	r4, r1, r2
 800d1f6:	d902      	bls.n	800d1fe <memmove+0x10>
 800d1f8:	4284      	cmp	r4, r0
 800d1fa:	4623      	mov	r3, r4
 800d1fc:	d807      	bhi.n	800d20e <memmove+0x20>
 800d1fe:	1e43      	subs	r3, r0, #1
 800d200:	42a1      	cmp	r1, r4
 800d202:	d008      	beq.n	800d216 <memmove+0x28>
 800d204:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d208:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d20c:	e7f8      	b.n	800d200 <memmove+0x12>
 800d20e:	4601      	mov	r1, r0
 800d210:	4402      	add	r2, r0
 800d212:	428a      	cmp	r2, r1
 800d214:	d100      	bne.n	800d218 <memmove+0x2a>
 800d216:	bd10      	pop	{r4, pc}
 800d218:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d21c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d220:	e7f7      	b.n	800d212 <memmove+0x24>
	...

0800d224 <_fstat_r>:
 800d224:	b538      	push	{r3, r4, r5, lr}
 800d226:	2300      	movs	r3, #0
 800d228:	4d06      	ldr	r5, [pc, #24]	; (800d244 <_fstat_r+0x20>)
 800d22a:	4604      	mov	r4, r0
 800d22c:	4608      	mov	r0, r1
 800d22e:	4611      	mov	r1, r2
 800d230:	602b      	str	r3, [r5, #0]
 800d232:	f7f9 f817 	bl	8006264 <_fstat>
 800d236:	1c43      	adds	r3, r0, #1
 800d238:	d102      	bne.n	800d240 <_fstat_r+0x1c>
 800d23a:	682b      	ldr	r3, [r5, #0]
 800d23c:	b103      	cbz	r3, 800d240 <_fstat_r+0x1c>
 800d23e:	6023      	str	r3, [r4, #0]
 800d240:	bd38      	pop	{r3, r4, r5, pc}
 800d242:	bf00      	nop
 800d244:	20000224 	.word	0x20000224

0800d248 <_isatty_r>:
 800d248:	b538      	push	{r3, r4, r5, lr}
 800d24a:	2300      	movs	r3, #0
 800d24c:	4d05      	ldr	r5, [pc, #20]	; (800d264 <_isatty_r+0x1c>)
 800d24e:	4604      	mov	r4, r0
 800d250:	4608      	mov	r0, r1
 800d252:	602b      	str	r3, [r5, #0]
 800d254:	f7f9 f815 	bl	8006282 <_isatty>
 800d258:	1c43      	adds	r3, r0, #1
 800d25a:	d102      	bne.n	800d262 <_isatty_r+0x1a>
 800d25c:	682b      	ldr	r3, [r5, #0]
 800d25e:	b103      	cbz	r3, 800d262 <_isatty_r+0x1a>
 800d260:	6023      	str	r3, [r4, #0]
 800d262:	bd38      	pop	{r3, r4, r5, pc}
 800d264:	20000224 	.word	0x20000224

0800d268 <_sbrk_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	2300      	movs	r3, #0
 800d26c:	4d05      	ldr	r5, [pc, #20]	; (800d284 <_sbrk_r+0x1c>)
 800d26e:	4604      	mov	r4, r0
 800d270:	4608      	mov	r0, r1
 800d272:	602b      	str	r3, [r5, #0]
 800d274:	f7f9 f81c 	bl	80062b0 <_sbrk>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d102      	bne.n	800d282 <_sbrk_r+0x1a>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b103      	cbz	r3, 800d282 <_sbrk_r+0x1a>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	20000224 	.word	0x20000224

0800d288 <memchr>:
 800d288:	4603      	mov	r3, r0
 800d28a:	b510      	push	{r4, lr}
 800d28c:	b2c9      	uxtb	r1, r1
 800d28e:	4402      	add	r2, r0
 800d290:	4293      	cmp	r3, r2
 800d292:	4618      	mov	r0, r3
 800d294:	d101      	bne.n	800d29a <memchr+0x12>
 800d296:	2000      	movs	r0, #0
 800d298:	e003      	b.n	800d2a2 <memchr+0x1a>
 800d29a:	7804      	ldrb	r4, [r0, #0]
 800d29c:	3301      	adds	r3, #1
 800d29e:	428c      	cmp	r4, r1
 800d2a0:	d1f6      	bne.n	800d290 <memchr+0x8>
 800d2a2:	bd10      	pop	{r4, pc}

0800d2a4 <_realloc_r>:
 800d2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a8:	4680      	mov	r8, r0
 800d2aa:	4614      	mov	r4, r2
 800d2ac:	460e      	mov	r6, r1
 800d2ae:	b921      	cbnz	r1, 800d2ba <_realloc_r+0x16>
 800d2b0:	4611      	mov	r1, r2
 800d2b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2b6:	f7ff b9a1 	b.w	800c5fc <_malloc_r>
 800d2ba:	b92a      	cbnz	r2, 800d2c8 <_realloc_r+0x24>
 800d2bc:	f7ff f936 	bl	800c52c <_free_r>
 800d2c0:	4625      	mov	r5, r4
 800d2c2:	4628      	mov	r0, r5
 800d2c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c8:	f000 f81b 	bl	800d302 <_malloc_usable_size_r>
 800d2cc:	4284      	cmp	r4, r0
 800d2ce:	4607      	mov	r7, r0
 800d2d0:	d802      	bhi.n	800d2d8 <_realloc_r+0x34>
 800d2d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d2d6:	d812      	bhi.n	800d2fe <_realloc_r+0x5a>
 800d2d8:	4621      	mov	r1, r4
 800d2da:	4640      	mov	r0, r8
 800d2dc:	f7ff f98e 	bl	800c5fc <_malloc_r>
 800d2e0:	4605      	mov	r5, r0
 800d2e2:	2800      	cmp	r0, #0
 800d2e4:	d0ed      	beq.n	800d2c2 <_realloc_r+0x1e>
 800d2e6:	42bc      	cmp	r4, r7
 800d2e8:	4622      	mov	r2, r4
 800d2ea:	4631      	mov	r1, r6
 800d2ec:	bf28      	it	cs
 800d2ee:	463a      	movcs	r2, r7
 800d2f0:	f7ff f90e 	bl	800c510 <memcpy>
 800d2f4:	4631      	mov	r1, r6
 800d2f6:	4640      	mov	r0, r8
 800d2f8:	f7ff f918 	bl	800c52c <_free_r>
 800d2fc:	e7e1      	b.n	800d2c2 <_realloc_r+0x1e>
 800d2fe:	4635      	mov	r5, r6
 800d300:	e7df      	b.n	800d2c2 <_realloc_r+0x1e>

0800d302 <_malloc_usable_size_r>:
 800d302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d306:	1f18      	subs	r0, r3, #4
 800d308:	2b00      	cmp	r3, #0
 800d30a:	bfbc      	itt	lt
 800d30c:	580b      	ldrlt	r3, [r1, r0]
 800d30e:	18c0      	addlt	r0, r0, r3
 800d310:	4770      	bx	lr
	...

0800d314 <_init>:
 800d314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d316:	bf00      	nop
 800d318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d31a:	bc08      	pop	{r3}
 800d31c:	469e      	mov	lr, r3
 800d31e:	4770      	bx	lr

0800d320 <_fini>:
 800d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d322:	bf00      	nop
 800d324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d326:	bc08      	pop	{r3}
 800d328:	469e      	mov	lr, r3
 800d32a:	4770      	bx	lr
